<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

<!-- generator="WordPress/4.9.5" created="2018-04-15 09:53" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>오일석의 블로그</title>
	<link>http://ilseokoh.com</link>
	<description>Microsoft Azure / I&#039;m Maker</description>
	<pubDate>Sun, 15 Apr 2018 09:53:26 +0000</pubDate>
	<language>ko-KR</language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>http://ilseokoh.com</wp:base_site_url>
	<wp:base_blog_url>http://ilseokoh.com</wp:base_blog_url>

	<wp:author><wp:author_id>1</wp:author_id><wp:author_login><![CDATA[ilseokoh]]></wp:author_login><wp:author_email><![CDATA[onestone.oh@gmail.com]]></wp:author_email><wp:author_display_name><![CDATA[ilseokoh]]></wp:author_display_name><wp:author_first_name><![CDATA[]]></wp:author_first_name><wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>


	<generator>https://wordpress.org/?v=4.9.5</generator>

<image>
	<url>/wp-content/uploads/2016/09/oh_studio-100x100.png</url>
	<title>오일석의 블로그</title>
	<link>http://ilseokoh.com</link>
	<width>32</width>
	<height>32</height>
</image> 

	<item>
		<title>Visual Studio Code – Node.js 개발</title>
		<link>http://ilseokoh.com/2016/09/28/visual-studio-code-node-js/</link>
		<pubDate>Wed, 28 Sep 2016 03:32:35 +0000</pubDate>
		<dc:creator><![CDATA[ilseokoh]]></dc:creator>
		<guid isPermaLink="false">http://ohtech.azurewebsites.net/?p=61</guid>
		<description></description>
		<content:encoded><![CDATA[Node.js와 어울리는 많은 에디터들이 있지만 … 무료, 멀티플랫폼(Mac, Linux, Windows), 마이크로소프트가 만든 <a href="https://code.visualstudio.com/">Visual Studio Code</a>를 사용하지 않을 이유는 없다. 물론 Visual Studio 수준의 IDE를 생각하면 안된다. 에티터와 IDE 사이에서 좀 더 에디터에 가까운 툴이니까!

Node.js 개발에 도움을 받을 수 있는 Visual Studio Code (이하 VSC)의 3가지 기능을 집고 가보자.
<h2>1. 내장 터미널 (Integrated Terminal)</h2>
<img class="alignnone size-large wp-image-71" src="http://ohtech.azurewebsites.net/wp-content/uploads/2016/09/node_vsc_01-1024x700.png" alt="node_vsc_01" width="1024" height="700" />

단축키는 ctrl + ` (키보드 왼쪽위에 있는 어퍼스트로피)를 누르면 내장 터미널이 나타난다. 별도 터미널을 써도 되지만 npm 설치나 node app.js 등의 명령을 VSC를 벗어나지 않고 내릴 수 있다.
<h2>2. Debug + Break Point</h2>
VSC에서 Break Point를 걸어서 디버깅을 할 수 있다. 특히 10년도 넘게 Visual Studio를 사용해온 사람이라면 Break Point를 찍고 싶을 것이다. 그러려면 먼저 프로젝트 폴더에 launch.json이 필요하다. 위 그림에서 왼쪽 세로 탭에 벌레금지 아이콘을 누르고 위쪽 설정 아이콘에 빨간 점이 보일 것이다. 클릭을 하고 Select Environment에서 Node.js를 선택하면 launch.json가 .vscode 폴더 밑에 생긴다. 디버그 할 때 실행 환경의 정의하는 파일이다.

이제 F5로 실행하고 F9로 BreakPoint를 찍고 디버깅을 할 수 있다.

<img class="alignnone size-large wp-image-91" src="http://ohtech.azurewebsites.net/wp-content/uploads/2016/09/node_vsc_03-1024x700.png" alt="node_vsc_03" width="1024" height="700" />
<h2>3. 인텔리센스(Intellisense)</h2>
아래 3단계가 필요하다.

1) js파일을 열면 오른쪽 제일 아래 전구 아이콘이 보일 것이다. (첫번째 이미지 참조, 스마일 아이콘 옆) 이걸 누르면 jsconfig.json 파일을 만들 수 있는데 여기서 인텔리센스에 필요없는 폴더를 제외 시켜준다.

2) npm으로 typings라는 모듈을 설치한다. -g 옵션으로 글로벌로 설치한다. VSC에서 javascript의 Intellisense는 type script의 도움을 받는다. 그 타입 스크립트를 만들어주는 툴이다.
<pre class="prettyprint">$ sudo npm install -g typings</pre>
3) 내가 사용하는 모듈에 대해서 아래 명령을 터미널에서 실행한다. 알고있는 모듈이름에 dt~를 붙여서 글로벌로 설치한다. typings 폴더가 생기고 확장자가 ts인 타입스크립트 파일이 생긴다. 이제 Intellisense를 사용할 수 있다. 코딩하다가 단축키 Ctrl + space를 누르면 도움을 받을 수 있다.
<pre class="prettyprint">$ typings install dt~node –global –save
$ typings install dt~express –global –save</pre>
<p class="p1"><img class="alignnone size-large wp-image-101" src="http://ohtech.azurewebsites.net/wp-content/uploads/2016/09/node_vsc_04-1024x700.png" alt="node_vsc_04" width="1024" height="700" /></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>61</wp:post_id>
		<wp:post_date><![CDATA[2016-09-28 12:32:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-09-28 03:32:35]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[visual-studio-code-node-js]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="azure"><![CDATA[Azure]]></category>
		<category domain="post_tag" nicename="azure"><![CDATA[azure]]></category>
		<category domain="post_tag" nicename="break-point"><![CDATA[break point]]></category>
		<category domain="post_tag" nicename="debug"><![CDATA[debug]]></category>
		<category domain="post_tag" nicename="dev"><![CDATA[dev]]></category>
		<category domain="post_tag" nicename="intellisense"><![CDATA[intellisense]]></category>
		<category domain="post_tag" nicename="node"><![CDATA[node]]></category>
		<category domain="post_tag" nicename="node-js"><![CDATA[node.js]]></category>
		<category domain="post_tag" nicename="nodejs"><![CDATA[nodejs]]></category>
		<category domain="post_tag" nicename="tech"><![CDATA[tech]]></category>
		<category domain="post_tag" nicename="visual-studio"><![CDATA[visual studio]]></category>
		<category domain="post_tag" nicename="visual-studio-code"><![CDATA[visual studio code]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_motopress-ce-private-styles]]></wp:meta_key>
			<wp:meta_value><![CDATA[{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[motopress-ce-save-in-version]]></wp:meta_key>
			<wp:meta_value><![CDATA[2.1.0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[2081]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[visual-studio-code-node-js-%ea%b0%9c%eb%b0%9c]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1487857675;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2291;}i:1;a:1:{s:2:"id";i:3171;}i:2;a:1:{s:2:"id";i:4431;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_motopress-ce-private-styles]]></wp:meta_key>
			<wp:meta_value><![CDATA[{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[motopress-ce-save-in-version]]></wp:meta_key>
			<wp:meta_value><![CDATA[2.1.0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[2081]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[visual-studio-code-node-js-%ea%b0%9c%eb%b0%9c]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1487857675;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2291;}i:1;a:1:{s:2:"id";i:3171;}i:2;a:1:{s:2:"id";i:4431;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Azure App Services에서 로컬 파일 접근</title>
		<link>http://ilseokoh.com/2016/10/01/local-file-access-from-azure-app-services/</link>
		<pubDate>Fri, 30 Sep 2016 23:51:55 +0000</pubDate>
		<dc:creator><![CDATA[ilseokoh]]></dc:creator>
		<guid isPermaLink="false">http://ohtech.azurewebsites.net/?p=2091</guid>
		<description></description>
		<content:encoded><![CDATA[Azure App Service는 웹/모바일/API 애플리케이션을 Azure에 구현하기에 최적인 PaaS 형태의 서비스이다. 윈도우가 설치된 가상컴퓨터와 비교하면 환경이 같으면서도 다른면이 있다. 그 중 한가지가 Web Root 말고 로컬 파일 즉, D:\home\abc.txt 같은 경로는 있는지 파일은 어떻게 올리는지가 금방 생각나지 않을 수 있다. 왜냐면 원격접속이나 SSH 접속이 없기 때문이다.

하지만 분명히 D:\home 디렉토리가 존재하고 파일을 넣고 뺄 수 있으며 그 파일을 웹 애플리케이션에서 읽어서 사용할 수 있다. 예를들어 Push Notification 구현에 사용할 인증서 파일 등을 로컬 경로에 저장하고 사용 가능하다.
<h3>Advanced Tool(Kudu)로 파일 관리</h3>
Azure Portal &gt; App Service(Web App) &gt; Advanced Tools &gt; Go 를 누르면 웹기반의 관리 도구에 접속된다.

<img class="alignnone size-large wp-image-2171" src="http://ohtech.azurewebsites.net/wp-content/uploads/2016/10/azure-app-service-kudu-1024x708.png" alt="azure-app-service-kudu" width="1008" height="697" />

Console 접근이나 파일 다운로드 폴더 생성, 새 파일 생성 등을 할 수 있다. 파일 업로드 기능은 보이지 않는다. 파일 업로드는 FTP 로 접속하면 된다.

<img class="alignnone size-large wp-image-2111" src="http://ohtech.azurewebsites.net/wp-content/uploads/2016/10/azure-app-service-kudu-2-1024x708.png" alt="azure-app-service-kudu-2" width="1008" height="697" />
<h3>FTP 접속으로 파일 업로드</h3>
Azure App Services에 FTP 접속이 가능하다. 아이디와 주소는 아래 그림처럼 Overview에 나와있다. 아이디의 형태에 주의. 접속 비밀번호는 Deployment Credentials 에서 설정 및 변경이 가능하다.

<img class="alignnone size-large wp-image-2181" src="http://ohtech.azurewebsites.net/wp-content/uploads/2016/10/azure-app-ftp-1024x708.png" alt="azure-app-ftp" width="1008" height="697" />

FileZilla 등의 FTP 클라이언트로 접속해서 파일을 올릴 수 있다.

로컬 파일에 접근해서 내용을 읽어오는 코드를 C#, ASP .NET MVC로 두줄만 작성해서 테스트 해보았다. D:\home 경로에서 파일을 읽어 웹페이지에 표시할 수 있었다. 웹 애플리케이션에서 로컬 파일 접근이 가능하다.

<img class="alignnone size-large wp-image-2131" src="http://ohtech.azurewebsites.net/wp-content/uploads/2016/10/azure-app-ftp-filezilla-1024x752.png" alt="azure-app-ftp-filezilla" width="1008" height="740" />
<pre class="prettyprint">public ActionResult About()
{
    string text = System.IO.File.ReadAllText(@"D:\home\FileOnWebApp.txt");
    return Content(text);
}</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2091</wp:post_id>
		<wp:post_date><![CDATA[2016-10-01 08:51:55]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-09-30 23:51:55]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[local-file-access-from-azure-app-services]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="app-services"><![CDATA[app services]]></category>
		<category domain="category" nicename="azure"><![CDATA[Azure]]></category>
		<category domain="post_tag" nicename="azure"><![CDATA[azure]]></category>
		<category domain="post_tag" nicename="azure-app-services"><![CDATA[azure app services]]></category>
		<category domain="post_tag" nicename="azure-web-app"><![CDATA[azure web app]]></category>
		<category domain="post_tag" nicename="ftp"><![CDATA[FTP]]></category>
		<category domain="post_tag" nicename="ftp-%ec%a0%91%ec%86%8d"><![CDATA[FTP 접속]]></category>
		<category domain="post_tag" nicename="kudu"><![CDATA[Kudu]]></category>
		<category domain="post_tag" nicename="local-file"><![CDATA[local file]]></category>
		<category domain="post_tag" nicename="web-app"><![CDATA[web app]]></category>
		<category domain="post_tag" nicename="%eb%a1%9c%ec%bb%ac%ed%8c%8c%ec%9d%bc"><![CDATA[로컬파일]]></category>
		<category domain="post_tag" nicename="%ec%95%a0%ec%a0%80"><![CDATA[애저]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1488019225;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2421;}i:1;a:1:{s:2:"id";i:4281;}i:2;a:1:{s:2:"id";i:3011;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1488019225;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2421;}i:1;a:1:{s:2:"id";i:4281;}i:2;a:1:{s:2:"id";i:3011;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Azure Storage Account 로그 보기</title>
		<link>http://ilseokoh.com/2016/10/01/azure-storage-account-%eb%a1%9c%ea%b7%b8-%eb%b3%b4%ea%b8%b0/</link>
		<pubDate>Sat, 01 Oct 2016 04:06:34 +0000</pubDate>
		<dc:creator><![CDATA[ilseokoh]]></dc:creator>
		<guid isPermaLink="false">http://ohtech.azurewebsites.net/?p=2251</guid>
		<description></description>
		<content:encoded><![CDATA[Azure Storage Account의 Blob은 파일을 저장하는 용도 외에도 HTTP 또는 HTTPS로 컨텐츠를 전달해주는 역할을 한다. 이 경우 Static File에 대한 웹서버의 역할이 되는데 접속 로그를 보고 싶은 경우가 생긴다. Blob에서 HTTP를 통해서 밖으로 나가는 트래픽은 비용을 발생시키기 때문에 평소 보다 많은 트래픽이 스토리지를 통해 발생 했다면 내용을 봐야 한다.

Azure Storage Account를 만들면 아래 그림과 같이 기본 설정으로 몇몇 매트릭이 선택되어 있다.

<img class="aligncenter size-full wp-image-12065" src="https://msdnshared.blob.core.windows.net/media/2016/10/storage-diagnostics-config.jpg" alt="storage diagnostics config" width="607" height="730" />

이 설정으로 인해 Storage Account에는 몇개의 Table이 생긴다. <a href="http://storageexplorer.com/">Microsoft Azure Storage Explorer</a>를 사용하여 열어보면 $MetricsHourPrimaryTransactionsBlob 등의 테이블이 보인다. 이 테이블을 열어보면 내용을 시간을 기준으로 조회할 수 있다. 그리고 시스템요청인지 사용자 요청인지? 과금이 되는 요청인지? 등의 정보를 볼 수 있다.

<img class="aligncenter size-large wp-image-12075" src="https://msdnshared.blob.core.windows.net/media/2016/10/storage-account-log-1024x552.jpg" alt="storage account log" width="1024" height="552" />

이 내용이 불충분하고 더 자세한 Request/Response 내용을 보고 싶다면 Diagnostics 설정에서 Blob logs 를 켜놔야 한다. 그럼 Blob에 $log 라는 컨테이너가 생기고 그 안에 Request 별로 로그가 파일로 생성된다. 이 로그를 모아서 분석하면 어떤 일이 벌어졌는지 알 수 있다.

Request 하나의 로그 샘플은 아래와 같다. 세미콜론을 Delimiter 로 엑셀에 Import 보면 내용을 잘 볼 수 있다.
<pre class="prettyprint">1.0;2016-10-01T03:43:22.8197212Z;GetBlob;AnonymousSuccess;200;1707;141;anonymous;;zstorage;blob;"https://zstorage.blob.core.windows.net:443/contents/EC1ADD6DFF19AC26EEA4C3641038471C486A4637.mp3";"/zstorage/contents/EC1ADD6DFF19AC26EEA4C3641038471C486A4637.mp3";44fc2485-0001-003d-3e95-1b2132000000;0;167.220.232.21:16581;2009-09-19;355;0;316;4721873;0;;;"0x8D3E5A752CFE3B2";Monday, 26-Sep-16 00:52:00 GMT;;"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0)";;</pre>
&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2251</wp:post_id>
		<wp:post_date><![CDATA[2016-10-01 13:06:34]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-10-01 04:06:34]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[azure-storage-account-%eb%a1%9c%ea%b7%b8-%eb%b3%b4%ea%b8%b0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="azure"><![CDATA[Azure]]></category>
		<category domain="post_tag" nicename="azure"><![CDATA[azure]]></category>
		<category domain="post_tag" nicename="blob"><![CDATA[blob]]></category>
		<category domain="post_tag" nicename="cloud"><![CDATA[cloud]]></category>
		<category domain="post_tag" nicename="log"><![CDATA[log]]></category>
		<category domain="post_tag" nicename="queue"><![CDATA[queue]]></category>
		<category domain="post_tag" nicename="storage"><![CDATA[storage]]></category>
		<category domain="post_tag" nicename="storage-account"><![CDATA[storage account]]></category>
		<category domain="post_tag" nicename="table"><![CDATA[table]]></category>
		<category domain="post_tag" nicename="%eb%a1%9c%ea%b7%b8"><![CDATA[로그]]></category>
		<category domain="post_tag" nicename="%ec%8a%a4%ed%86%a0%eb%a6%ac%ec%a7%80"><![CDATA[스토리지]]></category>
		<category domain="post_tag" nicename="%ec%95%a0%ec%a0%80"><![CDATA[애저]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://zstorage.blob.core.windows.net:443/contents/EC1ADD6DFF19AC26EEA4C3641038471C486A4637.mp3";"/zstorage/contents/EC1ADD6DFF19AC26EEA4C3641038471C486A4637.mp3
0
audio/mpeg
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1488126663;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:4951;}i:1;a:1:{s:2:"id";i:3011;}i:2;a:1:{s:2:"id";i:2421;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://zstorage.blob.core.windows.net:443/contents/EC1ADD6DFF19AC26EEA4C3641038471C486A4637.mp3";"/zstorage/contents/EC1ADD6DFF19AC26EEA4C3641038471C486A4637.mp3
0
audio/mpeg
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1488126663;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:4951;}i:1;a:1:{s:2:"id";i:3011;}i:2;a:1:{s:2:"id";i:2421;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Xamarin.Android 에뮬레이터 실행오류</title>
		<link>http://ilseokoh.com/2016/10/19/xamarin-android-%ec%97%90%eb%ae%ac%eb%a0%88%ec%9d%b4%ed%84%b0-%ec%8b%a4%ed%96%89%ec%98%a4%eb%a5%98/</link>
		<pubDate>Wed, 19 Oct 2016 08:33:26 +0000</pubDate>
		<dc:creator><![CDATA[ilseokoh]]></dc:creator>
		<guid isPermaLink="false">http://ohtech.azurewebsites.net/?p=2291</guid>
		<description></description>
		<content:encoded><![CDATA[Xamarin으로 Android 개발을 할 때 Visual Studio와 더불어 Microsoft Android Emulator를 사용하는데 Visual Studio 에서 F5를 눌러서 실행을 하면 에뮬레이터에 배포까지는 되는데 실행을 하자마자 죽는 경우가 있다. Break Point를 잡아서 원인을 찾으려 해보지만 Break Point도 잡히지 않는다. 시작하자마자 좌절을 경험하는데 이런 오류 메시지를 Output 창에서 볼 수 있다.
<pre class="prettyprint">10-19 17:28:53.785 D/Mono    ( 2682): Image addref mscorlib[0xaa722660] -&gt; mscorlib.dll[0xac0aba00]: 1
10-19 17:28:53.785 D/Mono    ( 2682): <span style="color: #800000;">AOT module 'mscorlib.dll.so' not found: dlopen failed</span>: library "/data/app/DevTest.Droid-1/lib/x86/libaot-mscorlib.dll.so" not found</pre>
이런 경우 아래 처럼 에뮬레이터 설정을 변경하면 해결 될 수 있다.
<ol>
 	<li>먼저 에뮬레이터가 실행되어 있으면 닫는다.</li>
 	<li>Hyper-V Manger 라는 애플리케이션을 찾아서 실행한다.</li>
 	<li>오류가 발생한 Emulator를 찾아서 Settings를 누른다.[caption id="attachment_2301" align="alignnone" width="1008"]<img class="size-large wp-image-2301" src="http://ohtech.azurewebsites.net/wp-content/uploads/2016/10/HyperVManager-1024x582.png" alt="Hyper V manager" width="1008" height="573" /></li>
 	<li>Processor &gt; Compatibility 를 선택하고 "Migrate to a physical computer with a different Processor Version" 을 체크해준다. <img class="alignnone size-large wp-image-2311" src="http://ohtech.azurewebsites.net/wp-content/uploads/2016/10/HyperVProcessorCompat-1024x975.png" alt="Processor Compat" width="1008" height="960" /></li>
 	<li>Visual Studio에서 다시 실행한다.</li>
</ol>
Happy coding with VS!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2291</wp:post_id>
		<wp:post_date><![CDATA[2016-10-19 17:33:26]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-10-19 08:33:26]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[xamarin-android-%ec%97%90%eb%ae%ac%eb%a0%88%ec%9d%b4%ed%84%b0-%ec%8b%a4%ed%96%89%ec%98%a4%eb%a5%98]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="andoroid"><![CDATA[andoroid]]></category>
		<category domain="post_tag" nicename="emulator"><![CDATA[Emulator]]></category>
		<category domain="post_tag" nicename="error"><![CDATA[error]]></category>
		<category domain="post_tag" nicename="visual-studio"><![CDATA[visual studio]]></category>
		<category domain="post_tag" nicename="xamarin"><![CDATA[xamarin]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[미분류]]></category>
		<category domain="post_tag" nicename="%eb%b9%84%ec%a3%bc%ec%96%bc%ec%8a%a4%ed%8a%9c%eb%94%94%ec%98%a4"><![CDATA[비주얼스튜디오]]></category>
		<category domain="post_tag" nicename="%ec%95%88%eb%93%9c%eb%a1%9c%ec%9d%b4%eb%93%9c"><![CDATA[안드로이드]]></category>
		<category domain="post_tag" nicename="%ec%97%90%eb%ae%ac%eb%a0%88%ec%9d%b4%ed%84%b0"><![CDATA[에뮬레이터]]></category>
		<category domain="post_tag" nicename="%ec%98%a4%eb%a5%98"><![CDATA[오류]]></category>
		<category domain="post_tag" nicename="%ec%9e%90%eb%a7%88%eb%a6%b0"><![CDATA[자마린]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1487646659;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:4281;}i:1;a:1:{s:2:"id";i:4431;}i:2;a:1:{s:2:"id";i:4951;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1487646659;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:4281;}i:1;a:1:{s:2:"id";i:4431;}i:2;a:1:{s:2:"id";i:4951;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Azure CDN 완전정복 1 - 만들기</title>
		<link>http://ilseokoh.com/2016/11/23/azure-cdn-%ec%99%84%ec%a0%84%ec%a0%95%eb%b3%b5-1-%eb%a7%8c%eb%93%a4%ea%b8%b0/</link>
		<pubDate>Wed, 23 Nov 2016 08:59:03 +0000</pubDate>
		<dc:creator><![CDATA[ilseokoh]]></dc:creator>
		<guid isPermaLink="false">http://ohtech.azurewebsites.net/?p=2421</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>CDN 개요</h2>
웹 애플리케이션 개발의 마지막에는 사이트의 성능을 올리기 위한 최적화를 하곤 한다. 물론 운영할 때도 지속적으로 신경써야 하는 부분이다. 여러가지 최적화/튜닝 방법중 <a href="https://ko.wikipedia.org/wiki/%EC%BD%98%ED%85%90%EC%B8%A0_%EC%A0%84%EC%86%A1_%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC">CDN(Content Delivery Network)</a>을 이용하면 정적인 컨텐츠의 다운로드 속도를 크게 개선할 수 있다. 사이트 홈에 사용된 큰 이미지, 동영상, 문서나 프로그램 다운로드, 상품 이미지 등 크기가 큰 컨텐츠 일부를 CDN을 적용하거나 음악, 동영상 같이 컨텐츠를 빠르게 전송하는게 핵심인 서비스에 적용하면 그야말로 드라마틱한 속도 향상을 경험 할 수 있다. 게임의 경우 Patch 파일 다운로드에 CDN을 많이 사용한다.

CDN의 원리는 어쩌면 단순한데 전세계의 네트워크 곳곳에 엣지(Edge) 서버를 두고 원본 컨텐츠를 Edge 서버에 캐싱을 해주는 것이다. 그러면 사용자는 멀리 있는 원본 서버가 아닌 가장 가까운 Edge 서버에서 컨텐츠를 가져오기 때문에 빠른 것이다. <a href="https://docs.microsoft.com/en-us/azure/cdn/cdn-pop-locations">Azure의 엣지 서버 위치는 여기에서 확인</a> 가능하다.

속도 뿐만 아니라 별도의 엣지서버에 캐싱을 하기 때문에 부하를 분산할 수 있고 DDoS 공격으로 부터 보호를 해줄 수 있다. 또한 특정 지역에서는 컨텐츠를 받을 수 없도록 하는 '지역 필터링' 기능도 제공한다.
<h2>Azure CDN 만들기</h2>
Azure CDN은 그리 어렵지 않게 설정해서 사용할 수 있다. Azure의 CDN은 글로벌 서비스인 Akamai와 Verizon CDN을 선택할 수 있다. <a href="https://docs.microsoft.com/ko-kr/azure/cdn/cdn-create-new-endpoint#a-namecreate-a-new-cdn-profilea새-cdn-프로필-만들기">새로운 CDN 프로필을 만들고</a> <a href="https://docs.microsoft.com/ko-kr/azure/cdn/cdn-create-new-endpoint#a-namecreate-a-new-cdn-endpointa새-cdn-끝점-만들기">끝점을 설정</a>하면 우선 기본 설정은 끝이다.
<h2>Verizon vs Akamai</h2>
Azure CDN을 만들때 가격옵션에서 3가지를 선택할 수 있다. 두배나 비싼 P1을 제외하면 Verizon과 Akamai 둘 중 하나를 선택할 수 있다. 기능상의 차이가 있다면 바로 "Core analytics"이다. 즉 모니터링 툴을 얘기하는데 Akamai는 제공하지 않는다. 사실 CDN 서비스는 상당히 안정적인 서비스이기 때문에 모니터링이 필요 없을 수도 있다. 예를들어 어떤 웹 애플리케이션의 일부 리소스를 CDN을 통해서 전송하는 경우에는 필요 없을 수도 있다. 하지만 <span style="text-decoration: underline;">음악 서비스 같이 CDN 이 중요한 서비스인 경우 모니터링이 꼭 필요한데 이경우는 Verizon을 선택</span>하는 것이 좋다. CDN 모니터링에 대한 상세한 내용은 <a href="http://ohtech.azurewebsites.net/2016/11/24/azure-cdn-%EC%99%84%EC%A0%84%EC%A0%95%EB%B3%B4-3-%EB%AA%A8%EB%8B%88%ED%84%B0%EB%A7%81/">이 시리즈의 3편인 모니터링 포스트</a>에서 확인 가능하다.

<img class="alignnone size-full wp-image-2611" src="/wp-content/uploads/2016/11/cde_price.png" alt="cde_price" width="958" height="692" />
<h2>끝점(End Point) 설정</h2>
원본은 Azure의 서비스인 Storage, Cloud Service, Web App를 바로 연결 할 수 있고 Azure 이외의 서비스도 연결 가능하다.

보통 많이 사용하는 방법은 Storage Account의 Blob에 컨텐츠를 넣어놓고 Storage를 CDN에 연결하는 방법이다. Azure Storage Account는 만들면 HTTP/HTTPS 도메인 주소를 하나 주기 때문에 그 주소를 원본 주소로 하면 된다.

<img class="alignnone size-full wp-image-2481" src="/wp-content/uploads/2016/11/azure_cdn_endpoint.png" alt="azure_cdn_endpoint" width="975" height="758" />

만약 Azure 가상머신(VM)에 웹서버가 돌고 있고 컨텐츠가 웹으로 서비스 되고 있다면 Custom Origin을 선택하고 VM의 도메인 주소를 넣어주면 된다. (Azure VM의 도메인 주소는 IP 주소라는 리소스에서 설정 가능하며 abc.eastasia.cloudapp.azure.com 같은 주소를 얻을 수 있다.)

Azure의 서비스가 아니라도 외부에 있는 HTTP/HTTPS 주소가 있고 그 주소로 컨텐츠가 서비스 되고 있다면 역시 Custom Origin을 선택하고 그 주소를 넣어 준다.

Origin Path 를 넣어주면 http://abc.eastasia.cloudapp.azure.com/path 주소가 http://vmcdn.azureedge.net 으로 매핑이 된다.
<h2>CDN 테스트</h2>
끝점까지 만들면 기본 설정은 모두 끝났다. 테스트는 웹브라우저로 CDN 주소로 컨텐츠를 접속해보면 된다. <span style="text-decoration: underline;">주의할 것은 CDN 주소가 즉시 활성화 되지 않는 다는 것</span>. Akamai를 선택했다면 1-2분 이내에 활성화 되고 Verizon을 선택했다면 최대 90분이 걸릴 수 있다. 전세계 엣지 서버로 캐싱되는 시간이니 느긋하게 기다려야 한다.

만약 Azure Storage Blob을 원본으로 설정 했다면 브라우저나 기타 다운로드 툴을 이용해서 테스트를 해본다. <span style="text-decoration: underline;">브라우저로 테스트 한다면 브라우저 캐시를 지우면서 테스트</span>를 해야 한다. 또한 음악이나 동영상 파일의 경우  mime-type이 올바로 설정되어 있다면 브라우저 개발자 도구로 속도를 측정하기는 어렵다. 요즘 브라우저가 너무 똑똑해졌는지 음악을 플레이 하면서 다운로드를 하고 음악의 재생 시간에 따라서 조금씩 다운로드를 하기 때문에 전체 다운로드 시간을 정확히 측정하기 어렵다.

신뢰성이 검증된 툴은 아니지만 DownloadTester라는 툴을 다운받아서 측정해봤다. 캡쳐 이미지에서 윗줄은 원본으로 지역은 East Asia(Hong Kong)에 있는 Blob Storage에 있는 음악 파일이고 아래 줄은 CDN 주소이다. 원본은 약 4.87Mbps, CDN 주소는 10.70Mbps 로 약 2배정도 CDN 속도가 빠르다.

<img class="alignnone size-large wp-image-2751" src="http://ohtech.azurewebsites.net/wp-content/uploads/2016/11/cdn_test-1024x213.png" alt="cdn_test" width="1008" height="210" />]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2421</wp:post_id>
		<wp:post_date><![CDATA[2016-11-23 17:59:03]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-11-23 08:59:03]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[azure-cdn-%ec%99%84%ec%a0%84%ec%a0%95%eb%b3%b5-1-%eb%a7%8c%eb%93%a4%ea%b8%b0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="azure"><![CDATA[azure]]></category>
		<category domain="post_tag" nicename="azure-cdn"><![CDATA[azure cdn]]></category>
		<category domain="post_tag" nicename="cdn"><![CDATA[cdn]]></category>
		<category domain="post_tag" nicename="cloud"><![CDATA[cloud]]></category>
		<category domain="post_tag" nicename="microsoft"><![CDATA[microsoft]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[미분류]]></category>
		<category domain="post_tag" nicename="%ec%95%a0%ec%a0%80"><![CDATA[애저]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1487894594;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3011;}i:1;a:1:{s:2:"id";i:2591;}i:2;a:1:{s:2:"id";i:2561;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1487894594;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3011;}i:1;a:1:{s:2:"id";i:2591;}i:2;a:1:{s:2:"id";i:2561;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>68</wp:comment_id>
			<wp:comment_author><![CDATA[Azure CDN &#8211; DSA(Dynamic Site Acceleration) 동적 사이트 가속 &#8211; 오일석의 블로그]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://ilseokoh.com/2017/11/24/azure-cdn-dsadynamic-site-acceleration-dynamic-site-acceleration/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[52.231.32.123]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2017-11-24 17:32:10]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2017-11-24 08:32:10]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] CDN은 Akamai와 Verizon CDN을 선택할 수 있다. 자세한 내용은 &#8220;Azure CDN 완전정복&#8221; 시리즈를 [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Azure CDN 완전정복 2 - Purge</title>
		<link>http://ilseokoh.com/2016/11/24/azure-cdn-%ec%99%84%ec%a0%84%ec%a0%95%eb%b3%b5-2-purge/</link>
		<pubDate>Thu, 24 Nov 2016 11:07:56 +0000</pubDate>
		<dc:creator><![CDATA[ilseokoh]]></dc:creator>
		<guid isPermaLink="false">http://ohtech.azurewebsites.net/?p=2561</guid>
		<description></description>
		<content:encoded><![CDATA[Purge를 그냥 번역하면 '삭제' 정도가 되겠지만 정확히는 CDN 캐시에 있는 컨텐츠를 삭제 또는 무효화 하는 것이기 때문에 '무효화'정도가 올바른 번역이라고 생각한다. 이 글에서는 Purge라는 영어 단어 그대로 사용한다.

캐시의 특징은 원본이 변경되면 자동으로 즉시 캐시도 변경되지 않는 다는 것이다. 그래서 원본 컨텐츠를 수정해서 업데이트를 해도 한 동안(캐시가 expired 되기 전까지)은 CDN 주소로 접속하면 업데이트 된 컨텐츠를 받을 수 없다. 따라서 원본의 업데이트를 즉시 반영시키려면 CDN 캐시를 무효화 시켜서 원본에서 다시 가져오도록 조치해야 한다. 이 과정을 Purge라고 한다.

여기서는 3가지 Purge 방법을 제시한다. 이중에서 두번째 방법인 Query string을 이용하는 방법이 쉽고 자주 쓰이는 방법이다.
<h2>1. Azure Portal을 이용한 Purge</h2>
Azure Portal에서 전체 CDN 캐시를 Purge 할 수도 있고 수동으로 지정된 컨텐츠를 Purge 할 수 있다. 자세한 내용은 "<a href="https://docs.microsoft.com/ko-kr/azure/cdn/cdn-purge-endpoint">Azure CDN 끝점 제거</a>" 문서를 참고 바란다. 이 방법은 Verizon CDN의 경우 2-3분, Akamai CDN의 경우 7분정도 소요된다.

어떤 경우에는 전체 CDN 캐시를 무효화 시킬 경우도 있다. 또는 CDN으로 서비스 되는 컨텐츠의 양이 적다면 전체 Purge가 크게 문제가 되지 않는다. 전체 Purge 하는 방법은 Azure Portal에 접속해서 CDN 프로파일을 연다. 그리고 아래 그림처럼 Purge(한글 번역은 "삭제")버튼을 누르면 된다.

CDN으로 서비스 되는 컨텐츠가 많고 CDN이 중요한 위치를 차지하고 있다면 전체 CDN 캐시를 Purge하는건 좋은 선택이 아니다. 서비스 전체가 영향을 받기 때문이다.

<img class="alignnone size-large wp-image-2961" src="http://ohtech.azurewebsites.net/wp-content/uploads/2016/11/azure_portal_purge-1024x589.png" alt="azure_portal_purge" width="1008" height="580" />
<h2>2. Query String으로 Purge 하기</h2>
CDN 주소는 https://vmcdn.azureedge.net/mp3/abc.mp3 처럼 결국 HTTP URL이다. URL에는 Query String을 붙일 수 있다. https://vmcdn.azureedge.net/mp3/abc.mp3<span style="text-decoration: underline;">?v=123</span> 처럼 의미 없는 ?v=123 을 붙이면 CDN이 두개의 URL을 전혀 다른 컨텐츠로 인식하도록 만들 수 있다.

즉, 컨텐츠가 업데이트가 될 때 클라이언트가 요청하는 주소에 Query String을 붙여주는 것이다. 만약 URL이 Database에 저장되어 있다면 업데이트된 컨텐츠의 URL을 같이 업데이트 시켜준다. URL이 HTML에 들어가 있다면 HTML에서 사용한 컨텐츠의 URL에 Query string을 붙여 변경하고 다시 배포를 하면된다.

이전버전의 캐시는 시간이 지나면 Expired 되어 자연스럽게 캐시에서 사라지고 CDN은 Query string이 있어도 원본컨텐츠는 같은 곳에서 다시 가져오므로 캐시도 업데이트가 되는 것이다. 컨텐츠를 새로 받아오는 것이므로 즉시 업데이트 된 컨텐츠로 반영된다.

이 방법을 사용 하려면 Azure Portal에서 CDN 끝점 설정으로 들어가 Cache 메뉴를 열고 "Query string caching behavior" 값을 "Cache every unique URL"로 설정해야 한다.

<img class="alignnone size-large wp-image-2981" src="http://ohtech.azurewebsites.net/wp-content/uploads/2016/11/cache_config-1024x853.png" alt="cache_config" width="1008" height="840" />
<h2>3. Azure REST API 로 Purge</h2>
Azure는 REST API를 제공하여 Azure Portal에서 하는 작업을 모두 프로그래밍 방식으로 설정 및 제어 할 수 있다. Azure CDN의 Purge도 API를 이용하여 할 수 있다. <a href="https://docs.microsoft.com/ko-kr/rest/api/cdn/endpoints?redirectedfrom=MSDN#Endpoints_PurgeContent">Azure REST API 문서의 Purge</a> 를 참고하여 프로그래밍을 통해 개별 컨텐츠를 Purge 할 수 있다. 그러려면 <a href="https://docs.microsoft.com/ko-kr/rest/api/index">Azure REST API의 기본 사용법</a>을 스터디 해야한다. 이 글에서는 API가 있다는 정도의 설명만 하고 마친다.

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2561</wp:post_id>
		<wp:post_date><![CDATA[2016-11-24 20:07:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-11-24 11:07:56]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[azure-cdn-%ec%99%84%ec%a0%84%ec%a0%95%eb%b3%b5-2-purge]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="azure"><![CDATA[Azure]]></category>
		<category domain="post_tag" nicename="azure"><![CDATA[azure]]></category>
		<category domain="post_tag" nicename="azure-cdn"><![CDATA[azure cdn]]></category>
		<category domain="post_tag" nicename="cache"><![CDATA[cache]]></category>
		<category domain="post_tag" nicename="cdn"><![CDATA[cdn]]></category>
		<category domain="post_tag" nicename="purge"><![CDATA[purge]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[미분류]]></category>
		<category domain="post_tag" nicename="%ec%95%a0%ec%a0%80"><![CDATA[애저]]></category>
		<category domain="post_tag" nicename="%ec%ba%90%ec%8b%9c-%eb%ac%b4%ed%9a%a8%ed%99%94"><![CDATA[캐시 무효화]]></category>
		<category domain="post_tag" nicename="%ed%81%b4%eb%9d%bc%ec%9a%b0%eb%93%9c"><![CDATA[클라우드]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://vmcdn.azureedge.net/mp3/abc.mp3
0
audio/mpeg
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1487895028;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2591;}i:1;a:1:{s:2:"id";i:2421;}i:2;a:1:{s:2:"id";i:3011;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[enclosure]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://vmcdn.azureedge.net/mp3/abc.mp3
0
audio/mpeg
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1487895028;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2591;}i:1;a:1:{s:2:"id";i:2421;}i:2;a:1:{s:2:"id";i:3011;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Azure CDN 완전정복 3 - 모니터링</title>
		<link>http://ilseokoh.com/2016/11/24/azure-cdn-%ec%99%84%ec%a0%84%ec%a0%95%eb%b3%b5-3-%eb%aa%a8%eb%8b%88%ed%84%b0%eb%a7%81/</link>
		<pubDate>Thu, 24 Nov 2016 12:08:51 +0000</pubDate>
		<dc:creator><![CDATA[ilseokoh]]></dc:creator>
		<guid isPermaLink="false">http://ohtech.azurewebsites.net/?p=2591</guid>
		<description></description>
		<content:encoded><![CDATA[아래 내용은 Azure CDN을 만들 때 Pricing을 S1 Verizon으로 선택했을 때 볼 수 있는 모니터링이 도구다. S2 Akamai를 선택했을 때는 사용할 수 없다.

아래 설명된 예제 리포트는 <a href="http://www.wantreez.com/">원트리즈 뮤직</a>에서 제공해 주셨다.

S1 Verizon과 S2 Akamai의 차이점은 <a href="http://ohtech.azurewebsites.net/2016/11/23/azure-cdn-%ec%99%84%ec%a0%84%ec%a0%95%eb%b3%b5-1-%eb%a7%8c%eb%93%a4%ea%b8%b0/">이 시리즈의 첫번째 글 만들기</a> 편에 설명되어 있다.
<h2>모니터링 도구 접속</h2>
모니터링 도구에 접속 하려면 먼저 <a href="http://portal.azure.com">Azure 포털</a>에 접속해서 모니터링할 CDN 프로파일을 찾아서 아래 그림처럼 Manage 버튼을 누르면 새로운 페이지가 떠서 모니터링 내용을 볼 수 있다.

<img class="alignnone size-full wp-image-2791" src="/wp-content/uploads/2016/11/cdn_manage_button.png" alt="cdn_manage_button" width="908" height="341" />

제공하는 리포트는 Bandwidth, Data Transferred, Status Codes, Cache Status, Cache Hit Rate, IPv4/IPv6 Data Transferred 총 7가지이다.
<h2>Bandwidth</h2>
대역폭 사용에 대한 정보를 볼 수 있다.

그림에서 보면 지난 24시간 동안의 시간별 대역폭 사용량을 그래프와 데이터를 볼 수 있다. 서비스의 특성에 의해 밤과 새벽에는 대역폭 사용량이 없고 아침이 되면 서서히 올라가는 모습을 볼 수 있다. 여기서 시간은 GMT 시간이다.

<img class="alignnone size-large wp-image-2801" src="http://ohtech.azurewebsites.net/wp-content/uploads/2016/11/cdn_monitor_bandwidth-1024x635.png" alt="cdn_monitor_bandwidth" width="1008" height="625" />
<h3>Data Transferred</h3>
전송된 데이터량을 볼 수 있다.

역시 새벽 시간에는 전송량이 없다가 아침부터 증가하는 모습을 볼 수 있다. 중간중간에 피크를 치는 시간대가 있는데 이런 구간은 상세한 분석을 통해서 왜 저런 현상이 일어나는지 파악해야 겠다.

<img class="alignnone size-large wp-image-2841" src="http://ohtech.azurewebsites.net/wp-content/uploads/2016/11/cdn_monitor_transferred-1024x600.png" alt="cdn_monitor_transferred" width="1008" height="591" />
<h3>Status Codes</h3>
전송결과에 대한 <a href="https://ko.wikipedia.org/wiki/HTTP_%EC%83%81%ED%83%9C_%EC%BD%94%EB%93%9C">HTTP 응답 상태 코드</a>를 볼 수 있는 리포트로 내용을 자세히 살펴볼 필요가 있다.

HTTP 200 상태코드는 성공을 나타내며 아래 그래프에서 대부분의 200 응답을 줬다. 200의 더 구체적인 의미는 CDN에서 컨텐츠를 실제 전송 했다는 뜻이다. 즉 네트워크를 통해서 컨텐츠가 전달되었고 전송된 만큼 과금이 이뤄진 경우다.

HTTP 304는 "수정되지 않음"을 의미한다. 브라우저의 경우를 예로들면 브라우저가 해당 컨텐츠를 로컬 캐시에 이미 가지고 있으면 컨텐츠를 달라고 요청하지 않고 컨텐츠가 변경되었는지를 물어본다. 이 때 컨텐츠가 변경되지 않았으면 서버(CDN)는 304 를 응답하고 실제 컨텐츠를 전송하지 않는다. 즉 전송을 하지 않았으니 그만큼 과금이 안되는 것이다.

HTTP 206는 "일부 컨텐츠"를 의미하는데 컨텐츠가 클라이언트의 요청에 의해 전체 중 일부만 전송한 것이다.

HTTP 204 "컨텐츠 없음"은 성공은 했으나 컨텐츠를 전송하지 않은 상태다.

아래 그림에 있는 4가지 상태는 모두 정상적인 상황이다. 하지만 4xx 오류나 5xx오류는 문제가 있는 상태이므로 찾아서 해결을 해야 한다. Azure CDN Standard 가격의 리포트에서는 오류의 상세 내용을 알려주지는 않는다. Premium 가격을 선택하면 오류 리포트를 제공한다.

오류의 인식과 처리도 중요하지만 304 도 중요하다. 클라이언트를 만들 때 HTTP의 캐싱에 대한 내용을 잘 만들어 주면 CDN 비용을 많이 줄일 수 있다. <a href="http://www.letmecompile.com/http-cache-튜토리얼/">HTTP 캐싱에 대한 좋은 글</a>이 있어 링크한다.

<img class="alignnone size-large wp-image-2831" src="http://ohtech.azurewebsites.net/wp-content/uploads/2016/11/cdn_monitor_hit-1024x680.png" alt="cdn_monitor_hit" width="1008" height="669" />
<h3>Cache Status</h3>
캐시 Hit에 대한 비율을 알려주는 리포트다. TCP_HIT는 CDN에 캐싱되어 있는 컨텐츠를 클라이언트에 보내준 경우다. 즉, 클라이언트는 빠르게 컨텐츠를 받을 수 있다. TCP_MISS는 CDN에 캐싱이 없어서 컨텐츠 원본으로 부터 컨텐츠를 가져와서 제공한 경우다. 원본을 가져오는 시간이 필요하므로 클라이언트는 컨텐츠를 늦게 받아간다. 하지만 그 다음번 요청은 컨텐츠가 캐싱되어 있으므로 빠르게 가져갈 수 있다.

새로운 컨텐츠나 업데이트 된 컨텐츠가 많으면 TCP_MISS 비율이 올라간다.

<img class="alignnone size-large wp-image-2811" src="http://ohtech.azurewebsites.net/wp-content/uploads/2016/11/cdn_monitor_cache-status-1024x680.png" alt="cdn_monitor_cache-status" width="1008" height="669" />
<h3>Cache Hit Rate</h3>
일별 캐시 Hit 비율을 보여준다. 신규 컨텐츠가 유입되면 그래프가 변경되는 것을 볼 수 있다.

<img class="alignnone size-large wp-image-2821" src="http://ohtech.azurewebsites.net/wp-content/uploads/2016/11/cdn_monitor_cachehitratio-1024x641.png" alt="cdn_monitor_cachehitratio" width="1008" height="631" />
<h3>IPv4/IPv6 Data Transferred</h3>
이 리포트는 IPv6를 사용하지 않기 때문에 의미가 없어서 스크린 캡쳐를 넣지 않았다.

Azure CDN의 모니터링을 통해서 서비스에 문제가 없는지? CDN을 얼마나 사용하는지? 시간대별 컨텐츠 전송 패턴 등을 알 수 있다.특히 304 응답을 늘려서 비용을 줄이는 노력이 필요하다.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2591</wp:post_id>
		<wp:post_date><![CDATA[2016-11-24 21:08:51]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-11-24 12:08:51]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[azure-cdn-%ec%99%84%ec%a0%84%ec%a0%95%eb%b3%b5-3-%eb%aa%a8%eb%8b%88%ed%84%b0%eb%a7%81]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="azure"><![CDATA[Azure]]></category>
		<category domain="post_tag" nicename="azure"><![CDATA[azure]]></category>
		<category domain="post_tag" nicename="azure-cdn"><![CDATA[azure cdn]]></category>
		<category domain="post_tag" nicename="cdn"><![CDATA[cdn]]></category>
		<category domain="post_tag" nicename="cdn-%eb%aa%a8%eb%8b%88%ed%84%b0%eb%a7%81"><![CDATA[CDN 모니터링]]></category>
		<category domain="post_tag" nicename="http-status"><![CDATA[HTTP Status]]></category>
		<category domain="post_tag" nicename="%eb%aa%a8%eb%8b%88%ed%84%b0%eb%a7%81"><![CDATA[모니터링]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[미분류]]></category>
		<category domain="post_tag" nicename="%ec%95%a0%ec%a0%80"><![CDATA[애저]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[azure-cdn-%ec%99%84%ec%a0%84%ec%a0%95%eb%b3%b4-4-%eb%aa%a8%eb%8b%88%ed%84%b0%eb%a7%81]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[azure-cdn-%ec%99%84%ec%a0%84%ec%a0%95%eb%b3%b4-3-%eb%aa%a8%eb%8b%88%ed%84%b0%eb%a7%81]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1487895004;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2421;}i:1;a:1:{s:2:"id";i:2561;}i:2;a:1:{s:2:"id";i:3011;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[azure-cdn-%ec%99%84%ec%a0%84%ec%a0%95%eb%b3%b4-4-%eb%aa%a8%eb%8b%88%ed%84%b0%eb%a7%81]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[azure-cdn-%ec%99%84%ec%a0%84%ec%a0%95%eb%b3%b4-3-%eb%aa%a8%eb%8b%88%ed%84%b0%eb%a7%81]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1487895004;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2421;}i:1;a:1:{s:2:"id";i:2561;}i:2;a:1:{s:2:"id";i:3011;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Azure CDN 완전정복 4 - 기타설정</title>
		<link>http://ilseokoh.com/2016/11/24/azure-cdn-%ec%99%84%ec%a0%84%ec%a0%95%eb%b3%b5-4-%ea%b8%b0%ed%83%80%ec%84%a4%ec%a0%95/</link>
		<pubDate>Thu, 24 Nov 2016 14:18:07 +0000</pubDate>
		<dc:creator><![CDATA[ilseokoh]]></dc:creator>
		<guid isPermaLink="false">http://ohtech.azurewebsites.net/?p=3011</guid>
		<description></description>
		<content:encoded><![CDATA[&nbsp;
<h2>1. 미리로드</h2>
<div>Azure CDN 은 캐시기 때문에 최초 요청이 오면 원본 컨텐츠를 가져와서 캐싱 후에 전달 해준다. 즉, 최초 요청에는 캐싱을 사용하지 못하므로 (Cache Miss)전송 속도가 느리다. Verizon CDN의 경우에는 이를 방지 하기 위해서 미리로드 기능이 제공 된다. (Akamai는 제공하지 않음) 이 기능을 이용하려면 <a href="https://docs.microsoft.com/ko-kr/azure/cdn/cdn-preload-endpoint">Azure CDN 끝점에 자산 미리 로드 </a>문서를 참고 바란다. 첫번째 요청 마져 빨라야 하는 것이라면 이 기능을 사용하면 되지만 자연스럽게 첫 요청에서 CDN 캐싱이 되도록 놔두는 것도 나쁘지 않다.</div>
<div></div>
<h2>2. 압축</h2>
<div>Azure CDN은 HTTP 압축을 지원한다. HTTP 압축에 대해서는 좋은 글이 많으니 검색해서 참조하면 되고 Azure CDN에서 설정하는 방법은 <a href="https://docs.microsoft.com/ko-kr/azure/cdn/cdn-improve-performance">파일을 압축하여 성능 향상 </a>글을 참조 바란다. 이 글에서 포인트 몇 개를 가져오면</div>
<ul>
 	<li>이미 압축되어 있는 포멧 (ZIP, MP3, MP4, JPG 등)에는 적용하지 않는 것이 좋음.</li>
 	<li>압축을 할지 말지에 대한 규칙이 있음.
<ul>
 	<li>Verizon의 경우 128B - 1MB 사이의 컨텐츠만 압축, Akamai는 모든 파일 가능</li>
 	<li>Verizon은 gzip, deflate, bzip2 인코딩 지원, Akamai는 gzip만 지원</li>
</ul>
</li>
</ul>
테스트 html 파일을 Azure CDN에 올려서 웹브라우저로 요청하고 Fiddler로 내용을 보면 압축한 것을 확인 할 수 있다. Response Header에 Content-Encoding: gzip 을 확인할 수 있고 본문이 압축되어 있다.

<img class="aligncenter size-large wp-image-12556" src="https://msdnshared.blob.core.windows.net/media/2016/11/cdn_comp-1024x683.png" alt="cdn_comp" width="1024" height="683" />
<h2>3. Custom Domain</h2>
<div>Azure CDN은 끝점을 만들면 xxx.azureedge.net 이라는 도메인을 제공한다. 때때로 t서비스의 서브 도메인으로 변경하고 싶을 때가 있는데 Azure 에서 Custom Domain을 제공한다. 설정 방법은 <a href="https://docs.microsoft.com/ko-kr/azure/cdn/cdn-map-content-to-custom-domain">사용자 지정 도메인을 CDN(콘텐츠 배달 네트워크) 끝점에 매핑하는 방법을 참조</a>하면 된다. 각자의 DNS 관리에 들어가서 Azure에서 제공하는 주소를 CNAME으로 등록하고 Azure Portal에 그 주소를 입력해주면된다. cdn.contoso.com dl.contoso.com 등의 주소를 사용 가능하다.</div>
<div></div>
<div>CNAME으로 설정했을 경우 전파 속도가 빠르지만 오래걸릴 경우도 있으니 활성화 될 때까지 기다려야 한다.</div>
<div></div>
<div>중요한 제약사항이 있다.</div>
<div></div>
<div><del>이렇게 만든 Custom Domain 이 HTTPS를 지원하려면 인증서를 업로드해서 활성화 해야 하는데 아직 Azure CDN에서는 지원하지 않는다. 즉 HTTPS를 사용하는 웹 사이트에 CDN 주소를 적용할 때에는 Custom Domain 말고 Azure 에서 만든 xxx.azureedge.net 을 사용해야 한다. 이 기능이 빨리 구현되기를 바란다면 <a href="https://feedback.azure.com/forums/169397-cdn/suggestions/1332683-allow-https-for-custom-cdn-domain-names">Feed Back 에 가서 Vote</a> 버튼을 눌러주길 바란다.</del></div>
<div>2017년 2월 6일 부터 Custom Domain에 Https를 지원 합니다.</div>
<h2>4. 국가별 액세스 제한(Geo-filtering)</h2>
<div>CDN의 사용 시나리오에 따라서 국가별로 컨텐츠가 안보이도록 제한하고 싶은 경우가 있다. 예를들어 한국말로 녹화된 동영상 컨텐츠가 한국에서만 볼 수 있도록 설정을 해서 컨텐츠가 유출 되는 것을 막을 수 있다. 이 기능을 사용하려면 <a href="https://docs.microsoft.com/ko-kr/azure/cdn/cdn-restrict-access-by-country">국가별 액세스 제한 문서</a>를 참고 하면 된다. <a href="https://azure.microsoft.com/en-us/updates/akamai-geo-filtering/">최근(2016-10-21 부터)에 Akamai 도 지원하게 되었다</a>.</div>
<div></div>
<div>역시 새로운 설정이 적용 되려면 역시 최대 90분 을 기다려야 한다.</div>
<div></div>
<div><img class="aligncenter size-full wp-image-12585" src="https://msdnshared.blob.core.windows.net/media/2016/11/azure_cdn_geofiltering.png" alt="azure_cdn_geofiltering" width="865" height="540" /></div>
<div></div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3011</wp:post_id>
		<wp:post_date><![CDATA[2016-11-24 23:18:07]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-11-24 14:18:07]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[azure-cdn-%ec%99%84%ec%a0%84%ec%a0%95%eb%b3%b5-4-%ea%b8%b0%ed%83%80%ec%84%a4%ec%a0%95]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="azure"><![CDATA[Azure]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[미분류]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1487895027;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2421;}i:1;a:1:{s:2:"id";i:2561;}i:2;a:1:{s:2:"id";i:4951;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_dont_email_post_to_subs]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1487895027;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2421;}i:1;a:1:{s:2:"id";i:2561;}i:2;a:1:{s:2:"id";i:4951;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_dont_email_post_to_subs]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>핀켓 CS ChatBot 만들기 HackFest 사례</title>
		<link>http://ilseokoh.com/2016/12/03/%ed%95%80%ec%bc%93-cs-chatbot-%eb%a7%8c%eb%93%a4%ea%b8%b0-hackfest-%ec%82%ac%eb%a1%80/</link>
		<pubDate>Fri, 02 Dec 2016 23:35:19 +0000</pubDate>
		<dc:creator><![CDATA[ilseokoh]]></dc:creator>
		<guid isPermaLink="false">http://ohtech.azurewebsites.net/?p=3171</guid>
		<description></description>
		<content:encoded><![CDATA[<p class="p1"><span class="s1"><a href="http://madup.com/">매드업</a></span>은<span class="s2"> 2011</span>년 설립된 폰플에서 진화한 마케팅 전문기업으로<span class="s2"> <a href="http://finket.co.kr/"><span class="s3">핀켓</span><span class="s1">(FINKET)</span></a></span>이라는<span class="s2"> Mobile Finance Service</span>를 운영하고 있습니다<span class="s2">. <a href="https://play.google.com/store/apps/details?id=com.madup.pocket&amp;hl=ko"><span class="s3">핀켓</span> <span class="s3">앱</span></a></span>은 스마트폰의 잠금화면으로 신뢰성 있는 금융 기사와 포인트 통합 그리고 편리한 멤버십 적립과 개인 금융 서비스를<span class="s2">, </span>광고주에게는 타겟 금융 광고 플랫폼을 제공합니다<span class="s2">. </span></p>
<p class="p3"><span class="s4">매드업과</span> <span class="s4">마이크로소프트가</span> <span class="s4">함께</span> HackFest<span class="s4">를</span> <span class="s4">통해서</span> <span class="s4">핀켓</span> <span class="s4">앱의</span> CS(Customer Satisfaction) <span class="s4">기능을</span> <span class="s4">강화하기</span> <span class="s4">위해</span> ChatBot<span class="s4">을</span> <span class="s4">만들었습니다</span>.</p>

<h2 class="p1"><b>해결하고</b><b> </b><b>싶은</b><b> </b><b>문제점</b><b> </b></h2>
<p class="p1">핀켓의 서비스는 여러 금융 서비스가 연결되기 때문에 사용자들의 문의가 많은 편입니다<span class="s1">. </span>앱의 문의하기 기능은 운영자가 답변을 해줘야 하기 때문에 시간이 지체되거나 업무시간이 아니면 답변을 빠르게 줄 수 없는 문제가 있습니다<span class="s1">. </span></p>
<p class="p1">대화형으로 고객의 질문에 답변을 즉시 해줄 수 있는<span class="s1"> Bot</span>을 통해서<span class="s1"> 1</span>차 응답을 주고 더 자세한 고객지원이 필요하면 다시 운영 담당자에게 연결시켜주면 고객의 만족도를 높일 수 있다는 아이디어에서<span class="s1"> HackFest</span>를 진행했습니다<span class="s1">.</span></p>

<h2 class="p1"><b>Microsoft Bot Framework </b><span class="s1"><b>소개</b></span><b> </b></h2>
<p class="p1"><span class="s2"><a href="https://dev.botframework.com/">Microsoft Bot Framework</a></span><span class="s1">는</span> Bot<span class="s1">을</span> <span class="s1">만들기</span> <span class="s1">위해</span> <span class="s1">마이크로소프트가</span> <span class="s1">운영하는</span> <span class="s1">서비스와</span> SDK<span class="s1">입니다</span>. Bot Connector<span class="s1">라는</span> <span class="s1">서비스를</span> <span class="s1">중심으로</span> Skype, Facebook Messenger<span class="s1">등의</span> <span class="s1">채널을</span> <span class="s1">우리가</span> <span class="s1">만들</span> Bot<span class="s1">에</span> <span class="s1">연결시켜</span> <span class="s1">줍니다</span>. Node.js <span class="s1">와</span> C# <span class="s1">을</span> <span class="s1">지원하는</span> Bot Builder SDK<span class="s1">를</span> <span class="s1">사용하면</span> <span class="s1">빠르게</span> Bot<span class="s1">을</span> <span class="s1">만들</span> <span class="s1">수</span> <span class="s1">있습니다</span>.</p>
<p class="p3">만든<span class="s3"> Bot</span>을 개발자 포털을 통해 등록하고<span class="s3"> Bot Directory</span>를 통해서 사용자들에게 배포 할 수 있습니다<span class="s3">. </span></p>
<p class="p1"><span class="s1">또한</span> <a href="https://www.microsoft.com/cognitive-services"><span class="s2">Microsoft Cognitive Service</span></a><span class="s1">의</span> <span class="s1">여러</span> API<span class="s1">를</span> <span class="s1">연결시키면</span> Bot<span class="s1">을</span> <span class="s1">더욱</span> <span class="s1">똑똑하게</span> <span class="s1">만들어</span> <span class="s1">줄</span> <span class="s1">수</span> <span class="s1">있습니다</span>. <span class="s1">특히</span> <a href="https://www.microsoft.com/cognitive-services/en-us/language-understanding-intelligent-service-luis"><span class="s2">LUIS(Language Understand Intelligent Service)</span></a><span class="s1">는</span> <span class="s1">자연어</span> <span class="s1">처리를</span> <span class="s1">할</span> <span class="s1">수</span> <span class="s1">있으므로</span> <span class="s1">사용자와</span> Bot <span class="s1">사이의</span> <span class="s1">자연스러운</span> <span class="s1">대화가</span> <span class="s1">가능하게</span> <span class="s1">합니다</span>. LUIS<span class="s1">는</span> <span class="s1">현재</span> Preview <span class="s1">버전을</span> <span class="s1">사용해</span> <span class="s1">볼</span> <span class="s1">수</span> <span class="s1">있고</span> <span class="s1">영어</span>, <span class="s1">중국어</span> <span class="s1">등</span> 7<span class="s1">가지</span> <span class="s1">언어를</span> <span class="s1">지원하지만</span> <span class="s1">한국어는</span> 2017<span class="s1">년</span> <span class="s1">공개</span> <span class="s1">예정이고</span> <span class="s1">아직</span> <span class="s1">지원하고</span> <span class="s1">있지</span> <span class="s1">않습니다</span>.</p>

<h2 class="p1"><b>FINKET CS Bot</b></h2>
[embed]https://www.youtube.com/watch?v=iUrwiaHB7p4[/embed]
<p class="p3">현재<span class="s1"> LUIS </span>도 한국어를 지원하지 않고 기타<span class="s1"> API</span>형태로 공개된 한국어 자연어 처리 서비스가 없으므로 두 단계의 개발 로드맵을 설정하고 첫번째 단계에서는 자연어 처리를 쓰지 않지만 자연스럽게 대화하는 느낌을 주면서 사용자에게 선택지를 주는 방식으로<span class="s1"> 1</span>차 개발하기로 결정했습니다<span class="s1">. </span></p>
<p class="p3">사용자에게<span class="s1"> 3 </span>단계의 선택지를 주면서 최종 질문을 알아내고 그 질문에 가장 적절한 답을 줍니다<span class="s1">. </span>대화하는 느낌을 주기 위해서 항상 같은 문장의 질문과 답변이 아닌<span class="s1"> 3</span>가지 정도의 같은 의미의 다른 문장을 준비해서 사용자에게 전달 합니다<span class="s1">.</span></p>

<h2 class="p3"><b>질문</b><span class="s1"><b>/</b></span><b>답</b><b> </b><b>데이터</b></h2>
<p class="p3">그 동안<span class="s1"> FINKET </span>서비스를 운영하면서 쌓아놓은 고객의 질문과 답변 중에서 가장 빈도가 높은 질문을 뽑아서<span class="s1"> 3</span>단계 카테고리로 정의하고 최종 질문과 그 질문에 적합한 답변 데이터도 준비를 해서 이 데이터들은 데이터베이스에 담았습니다<span class="s1">.</span></p>

<h2 class="p1"><b>기본</b><b> </b><b>아키텍처</b><b> </b><b>다이어그램</b><b> </b></h2>
<img class="alignnone size-full wp-image-3201" src="/wp-content/uploads/2016/12/madup-bot-diagram.jpg" alt="madup-bot-diagram" width="824" height="440" />
<ul class="ul1">
<ul class="ul1">
 	<li class="li1">사용자는<span class="s1"> Android</span>앱을 통해서 메시지를 입력하여<span class="s1"> Bot</span>에 전달하거나<span class="s1"> Bot</span>이 전달 해준 메시지를 받습니다<span class="s1">. </span></li>
 	<li class="li3"><span class="s3">사용자가</span> <span class="s3">입력한</span> <span class="s3">메시지는</span> Direct Line REST API<span class="s3">를</span> <span class="s3">통해서</span> Bot Connector<span class="s3">에</span> <span class="s3">전달</span> <span class="s3">되고</span> Bot Connector<span class="s3">는</span> <span class="s3">올바른</span> Bot<span class="s3">에게</span> <span class="s3">메시지를</span> <span class="s3">전달</span> <span class="s3">합니다</span>.</li>
 	<li class="li1"><span class="s1">Bot</span>은 적절한 질문과 대답을 데이터베이스에서 조회해서 사용자에게 전달합니다<span class="s1">. </span></li>
 	<li class="li3">Bot<span class="s3">은</span> Azure Web App <span class="s3">에</span> <span class="s3">배포해서</span> <span class="s3">운영하고</span> <span class="s3">데이터</span> <span class="s3">베이스는</span> Azure SQL Database<span class="s3">를</span> <span class="s3">사용합니다</span>.</li>
</ul>
</ul>
<h2 class="p1"><b>Conversation Channel</b></h2>
<p class="p1"><span class="s1">기존</span> FINKET<span class="s1">앱에</span> <span class="s1">통합되어</span> <span class="s1">배포가</span> <span class="s1">될</span> <span class="s1">예정이기</span> <span class="s1">때문에</span> Microsoft Bot Framework<span class="s1">가</span> <span class="s1">지원하는</span> Skype, Facebook Messenger <span class="s1">등의</span> <span class="s1">채널을</span> <span class="s1">사용하지</span> <span class="s1">않고</span> Android <span class="s1">기반의</span> <span class="s1">앱을</span> <span class="s1">직접</span> <span class="s1">개발하기로</span> <span class="s1">결정했습니다</span>. Bot Connector<span class="s1">와</span> <span class="s1">연결을</span> <span class="s1">위해서</span> Direct Line<span class="s1">이라는</span> <span class="s1">채널을</span> <span class="s1">사용했습니다</span>.<span class="Apple-converted-space">  </span>Direct Line<span class="s1">은</span> REST <span class="s1">방식의</span> API<span class="s1">로</span> <span class="s1">인증을</span> <span class="s1">하고</span> <span class="s1">대화를</span> <span class="s1">주고</span> <span class="s1">받는</span> API<span class="s1">를</span> <span class="s1">제공</span> <span class="s1">합니다</span>. <span class="s1">현재</span><span class="Apple-converted-space">  </span>Direct Line 3.0 REST API<span class="s1">가</span> <span class="s1">공개되었고</span> FINKET Bot<span class="s1">은</span> Direct Line 1.1 REST API<span class="s1">를</span> <span class="s1">사용했습니다</span>.</p>
<p class="p1">Direct Line API<span class="s1">에</span> <span class="s1">대한</span> <span class="s1">자세한</span> <span class="s1">내용은</span> <a href="https://docs.botframework.com/en-us/restapi/directline3/%22%20%5Cl%20%22navtitle"><span class="s2">Bot Framework </span><span class="s3">문서</span><span class="s2">(</span><span class="s3">영문</span><span class="s2">)</span></a><span class="s1">나</span> Eva <span class="s1">블로그</span> <span class="s1">포스팅을</span> <span class="s1">참조하세요</span>.</p>

<h2 class="p1"><b>FINKET Bot </b><span class="s1"><b>소스코드</b></span><b> </b></h2>
<p class="p3"><span class="s4">HackFest</span>의 결과물인 소스코드는 오픈소스로<span class="s4"> <a href="https://github.com/MadupPinket/ket-bot"><span class="s2">Github </span><span class="s3">에</span> <span class="s3">공개</span></a> </span>되어 있습니다<span class="s4">. </span>개발 환경은 아래 표와 같고 실제 구동 방법은<span class="s4"> Github README </span>파일을 참조하세요<span class="s4">. </span></p>

<table class="t1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td class="td1" valign="top">
<p class="p2">Bot</p>

<ul class="ul1">
<ul class="ul1">
 	<li class="li2">Windows 10 / Visual Studio 2015</li>
 	<li class="li2">C#</li>
 	<li class="li3"><span class="s1"><a href="http://aka.ms/bf-bc-vstemplate"><span class="s2">Bot Framework Template </span></a></span></li>
 	<li class="li3"><span class="s1"><a href="https://aka.ms/bf-bc-emulator"><span class="s2">Bot Framework Emulator</span></a></span></li>
</ul>
</ul>
</td>
<td class="td1" valign="top">
<p class="p2">App</p>

<ul class="ul1">
<ul class="ul1">
 	<li class="li2">Windows 10 / Eclipse</li>
 	<li class="li2">Java</li>
 	<li class="li2">Android SDK</li>
</ul>
</ul>
</td>
</tr>
</tbody>
</table>
<p class="p2">Bot Builder SDK<span class="s3">의</span> <span class="s3">가장</span> <span class="s3">핵심적인</span> <span class="s3">코드는</span> <span class="s3">바로</span> <a href="https://docs.botframework.com/en-us/csharp/builder/sdkreference/dialogs.html"><span class="s4">IDialog </span><span class="s5">인터페이스</span></a><span class="s3">를</span> <span class="s3">상속받은</span> Dialog <span class="s3">클래스들</span> <span class="s3">입니다</span>. FINKET Bot <span class="s3">에서는</span> 5<span class="s3">개의</span> Dialog<span class="s3">를</span> <span class="s3">체인으로</span> <span class="s3">연결해서</span> <span class="s3">대화의</span> <span class="s3">흐름을</span> <span class="s3">만들어</span> <span class="s3">냈습니다</span>. Microsoft Bot Framework<span class="s3">의</span> <span class="s3">기본</span> <span class="s3">설계</span> <span class="s3">철학</span> <span class="s3">중</span> <span class="s3">하나는</span> Stateless <span class="s3">입니다</span>. <span class="s3">따라서</span> <span class="s3">대화</span> <span class="s3">중에</span> <span class="s3">저장되어야</span> <span class="s3">하는</span> <span class="s3">상태</span> <span class="s3">값들은</span> <span class="s3">모두</span> Bot State Service<span class="s3">에</span> <span class="s3">저장해서</span> Bot <span class="s3">자체는</span> <span class="s3">상태를</span> <span class="s3">가지고</span> <span class="s3">있지</span> <span class="s3">않도록</span> <span class="s3">해야만</span> <span class="s3">합니다</span>. <span class="s3">그러면</span> Bot<span class="s3">을</span> <span class="s3">여러</span> <span class="s3">대로</span> <span class="s3">늘리는</span> Scale Out<span class="s3">을</span> <span class="s3">해도</span> <span class="s3">문제가</span> <span class="s3">발생하지</span> <span class="s3">않습니다</span>.</p>
<p class="p2"><img class="alignnone size-full wp-image-3191" src="/wp-content/uploads/2016/12/madup-bot-code-flow.jpg" alt="madup-bot-code-flow" width="798" height="482" /></p>
<p class="p4"><span class="s6">Dialog</span>의 사용 방법은<span class="s6"> Eva </span>블로그 포스트를 참조 바랍니다<span class="s6">.</span></p>

<h2 class="p2"><b>개발하면서</b><b> </b><b>배운점</b><b> </b></h2>
<ul class="ul1">
<ul class="ul1">
 	<li class="li2">질문과 답변이 정해진<span class="s1"> Bot</span>의 경우 질문과 답 데이터를 데이터베이스에 저장해서 가져오는 것이 좋은 방법이 아닐 수도 있습니다<span class="s1">. </span>한글 적용에는 조금 어색한 면이 있지만<span class="s1"> <a href="https://docs.botframework.com/en-us/csharp/builder/sdkreference/forms.htm"><span class="s2">FormFlow</span></a></span>를 사용하는게 오히려 성능에는 좋을 것 같습니다<span class="s1">. </span></li>
 	<li class="li3">Direct Line<span class="s3">을</span> <span class="s3">사용하면</span> <span class="s3">채널</span>(Android <span class="s3">앱</span>)<span class="s3">에</span> <span class="s3">여러</span> <span class="s3">기능을</span> <span class="s3">넣어서</span> Bot<span class="s3">의</span> Workload<span class="s3">를</span> <span class="s3">가져갈</span> <span class="s3">수</span> <span class="s3">있지만</span> Skype <span class="s3">등의</span> <span class="s3">다른</span> <span class="s3">채널로</span> <span class="s3">확장을</span> <span class="s3">할</span> <span class="s3">수</span> <span class="s3">없는</span> <span class="s3">문제가</span> <span class="s3">생깁니다</span>. FINKET Bot<span class="s3">의</span> Android <span class="s3">앱도</span> <span class="s3">최대한</span> <span class="s3">메시지만</span> <span class="s3">주고</span> <span class="s3">받도록</span>Dummy <span class="s3">기능만</span> <span class="s3">구현되었습니다</span>.</li>
</ul>
</ul>
<h2 class="p2"><b>향후</b><b> </b><b>과제</b><b> </b></h2>
<p class="p2"><span class="s1">1</span>차 구현에서 제외 되었던 자연어 처리 서비스를 붙여서 우리의 말과 글로 자연스럽게<span class="s1"> Bot</span>에게 고객지원 관련 질문을 던지고 답을 받을 수 있어야 합니다<span class="s1">. </span>아직<span class="s1"> LUIS </span>가 한국어를 지원하지 않는 상황에서<span class="s1"> Microsoft Translator API </span>를 추가로 붙여서 시도를 해볼 예정입니다<span class="s1">. </span></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3171</wp:post_id>
		<wp:post_date><![CDATA[2016-12-03 08:35:19]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-12-02 23:35:19]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%ed%95%80%ec%bc%93-cs-chatbot-%eb%a7%8c%eb%93%a4%ea%b8%b0-hackfest-%ec%82%ac%eb%a1%80]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="bot"><![CDATA[bot]]></category>
		<category domain="post_tag" nicename="bot-framewokr"><![CDATA[bot framewokr]]></category>
		<category domain="post_tag" nicename="finket"><![CDATA[finket]]></category>
		<category domain="post_tag" nicename="hackfest"><![CDATA[hackfest]]></category>
		<category domain="post_tag" nicename="microsoft"><![CDATA[microsoft]]></category>
		<category domain="category" nicename="microsoft-bot-framework"><![CDATA[Microsoft Bot Framework]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_3408392d6ebc0e6aa09fd4ef5f65115b]]></wp:meta_key>
			<wp:meta_value><![CDATA[<iframe width="1008" height="567" src="https://www.youtube.com/embed/iUrwiaHB7p4?feature=oembed" frameborder="0" allowfullscreen></iframe>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_time_3408392d6ebc0e6aa09fd4ef5f65115b]]></wp:meta_key>
			<wp:meta_value><![CDATA[1480910457]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_a0ec5f03e47df5a0fa47fd630c1e838d]]></wp:meta_key>
			<wp:meta_value><![CDATA[<iframe width="200" height="113" src="https://www.youtube.com/embed/iUrwiaHB7p4?feature=oembed" frameborder="0" allowfullscreen></iframe>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_time_a0ec5f03e47df5a0fa47fd630c1e838d]]></wp:meta_key>
			<wp:meta_value><![CDATA[1480720648]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_99d850d357356e08a57658d910b96e25]]></wp:meta_key>
			<wp:meta_value><![CDATA[<iframe width="1040" height="585" src="https://www.youtube.com/embed/iUrwiaHB7p4?feature=oembed" frameborder="0" allowfullscreen></iframe>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_time_99d850d357356e08a57658d910b96e25]]></wp:meta_key>
			<wp:meta_value><![CDATA[1481351145]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[3631]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_5abeb76b243375607baaa8828fa6937a]]></wp:meta_key>
			<wp:meta_value><![CDATA[<iframe width="640" height="360" src="https://www.youtube.com/embed/iUrwiaHB7p4?feature=oembed" frameborder="0" allowfullscreen></iframe>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_time_5abeb76b243375607baaa8828fa6937a]]></wp:meta_key>
			<wp:meta_value><![CDATA[1481352076]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1488041760;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3511;}i:1;a:1:{s:2:"id";i:2421;}i:2;a:1:{s:2:"id";i:3911;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_3408392d6ebc0e6aa09fd4ef5f65115b]]></wp:meta_key>
			<wp:meta_value><![CDATA[<iframe width="1008" height="567" src="https://www.youtube.com/embed/iUrwiaHB7p4?feature=oembed" frameborder="0" allowfullscreen></iframe>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_time_3408392d6ebc0e6aa09fd4ef5f65115b]]></wp:meta_key>
			<wp:meta_value><![CDATA[1480910457]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_a0ec5f03e47df5a0fa47fd630c1e838d]]></wp:meta_key>
			<wp:meta_value><![CDATA[<iframe width="200" height="113" src="https://www.youtube.com/embed/iUrwiaHB7p4?feature=oembed" frameborder="0" allowfullscreen></iframe>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_time_a0ec5f03e47df5a0fa47fd630c1e838d]]></wp:meta_key>
			<wp:meta_value><![CDATA[1480720648]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_99d850d357356e08a57658d910b96e25]]></wp:meta_key>
			<wp:meta_value><![CDATA[<iframe width="1040" height="585" src="https://www.youtube.com/embed/iUrwiaHB7p4?feature=oembed" frameborder="0" allowfullscreen></iframe>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_time_99d850d357356e08a57658d910b96e25]]></wp:meta_key>
			<wp:meta_value><![CDATA[1481351145]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[3631]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_5abeb76b243375607baaa8828fa6937a]]></wp:meta_key>
			<wp:meta_value><![CDATA[<iframe width="640" height="360" src="https://www.youtube.com/embed/iUrwiaHB7p4?feature=oembed" frameborder="0" allowfullscreen></iframe>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_time_5abeb76b243375607baaa8828fa6937a]]></wp:meta_key>
			<wp:meta_value><![CDATA[1481352076]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1488041760;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3511;}i:1;a:1:{s:2:"id";i:2421;}i:2;a:1:{s:2:"id";i:3911;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[Microsoft Bot Framework] Direct Line REST API 3.0</title>
		<link>http://ilseokoh.com/2016/12/02/microsoft-bot-framework-direct-line-rest-api-3-0/</link>
		<pubDate>Fri, 02 Dec 2016 12:48:34 +0000</pubDate>
		<dc:creator><![CDATA[ilseokoh]]></dc:creator>
		<guid isPermaLink="false">http://ohtech.azurewebsites.net/?p=3251</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Direct Line REST API</h2>
<a href="https://www.botframework.com/">Microsoft Bot Framework</a>는 Skype, Facebook Messenger, Slack 등의 다양한 Conversation Channel을 지원하고 있고 그 수가 점점 늘어나고 있다. 하지만 내가 만들 모바일 앱에서 Bot 을 만들고 싶으면 어떤 방법이 있을까? Direct Line이라는 REST API를 지원하기 때문에 우리가 잘 알고 있는 프로그래밍 방법으로 쉽게 Bot 과 연결 시킬 수 있다.

즉, 기존에 있는 채널이 아닌 프로그래밍 방식으로 Bot 과 연결 시키고 싶다면 <a href="https://docs.botframework.com/en-us/restapi/directline3">Direct Line API</a>를 사용하면 된다. 실제로 안드로이드 앱에서 Direct Line REST API를 사용하여 Bot에 연결시킨 프로토타입 프로젝트가 Github에 올려져 있다. <a href="https://github.com/MadupPinket/ket-bot">Ket-bot 프로젝트 코드</a>에서 실제 사용한 예를 볼 수 있다.

<img class="alignnone size-large wp-image-3291" src="http://ohtech.azurewebsites.net/wp-content/uploads/2016/12/bot-framework-1024x576.jpg" alt="microsoft-bot-framework" width="1008" height="567" />

Bot Connector는 Conversation Channel과 Bot 사이에 존재하는 마이크로소프트가 운영하는 서비스다. 채널은 Bot Connector만 연결해주고 메시지를 주고 받으면 된다. Bot 도 역시 Connector만 보고 메시지를 주고 받는다.

현재 최신버전은 3.0이고 <a href="https://docs.botframework.com/en-us/restapi/directline3/">공식 문서</a>에 모든 내용이 나와 있다. 1.1 버전에 비해서 WebSocket을 지원하고 파일 업로드도 지원한다.

API 를 이해한 후 C# 개발자라면 <a href="https://www.nuget.org/packages/Microsoft.Bot.Connector.DirectLine">Direct Line Nuget Package</a>를 받아서 활용하면 되고 <a href="https://docs.botframework.com/en-us/restapi/directline3/swagger.json">Swagger file</a> 도 제공하기 때문에 자동으로 클라이언트 코드를 생성해서 빠르게 개발을 할 수 도 있다. 테스트는 REST API이기 때문에  <a href="https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop">Chrome Postman</a>이나 <a href="http://www.telerik.com/fiddler">Fiddler</a> 또는 <a href="https://docs.botframework.com/en-us/restapi/directline3/">공식문서</a> 하단에 있는 Swagger를 이용하면 된다.

이 글에서는 (WebSocket이 아닌)HTTP POST로 메시지를 보내고 GET을 Polling해서 응답 메시지를 받는 방법에 대해서 알아보기로 하겠다.
<h3>Authentication</h3>
인증과정은 Bot Dev Center에서 생성한 Secret 키를 던지고 token을 받아오는 과정이다. 받아온 token은 오고 가는 메시지의 HTTP 헤더에 넣어서 사용한다. Secret 키는 <a href="https://dev.botframework.com/bots/new">Bot 등록페이지</a>에서 Direct Line 설정 페이지에서 얻을 수 있다.

<img class="alignnone size-large wp-image-3311" src="http://ohtech.azurewebsites.net/wp-content/uploads/2016/12/Config-direct-line-1024x540.png" alt="bot-framework-direct-line-secret" width="1008" height="532" />

POST로 https://directline.botframework.com/v3/directline/tokens/generate URL에 Authentication이라는 헤더에 "Bearer "를 앞에 붙인 Secret를 보내면 token을 받을 수 있다.
<ul>
 	<li>URL: /v3/directline/tokens/generate</li>
 	<li>Method: POST</li>
 	<li>Header: Authorization: Bearer {secret key}</li>
 	<li>body : 없음</li>
</ul>
<a href="/wp-content/uploads/2016/12/bot-auth-postman.jpg"><img class="aligncenter size-full wp-image-3341" src="/wp-content/uploads/2016/12/bot-auth-postman.jpg" alt="bot-auth-postman" width="1686" height="864" /></a>

응답에는 3가지 값이 오는데  우선 이단계에서는 token 만 챙긴다. token은  expires_in 시간이 지나면 무효가 되는데 기본값이 1800초/30분이다. 즉 30분이내에 Refresh 시켜줘야 한다. Refresh 방법은 /v3/directline/tokens/refresh 주소로 POST 전송을 보낼때 헤더에 기존 token을 보내면 된다. 상세 내용은 <a href="https://docs.botframework.com/en-us/restapi/directline3/#refreshing-a-token">Refresh a token</a> 참조
<h3>대화시작</h3>
다음 단계는 클라이언트에서 대화를 시작해야 한다.  Auth에서 받은 token을 헤더에 Authentication이라는 헤더로 전달하고 /v3/directline/conversations 주소로 Post Request를 보내면 Auth에서 받은 같은 conversationId 와 새로운 token, streamUrl을 받아온다. 여기서 streamUrl은 웹소켓 URL이다. 이 웹소켓 URL 역시 만료 시간이 있다. 만약 처음 시작한 대화라면 HTTP 201(Created) 응답을 주고 기존 대화라면 200 응답을 준다.
<ul>
 	<li>URL: /v3/directline/conversations</li>
 	<li>Method: POST</li>
 	<li>Header: Authorization: Bearer {token}</li>
 	<li>body : 없음</li>
</ul>
<a href="/wp-content/uploads/2016/12/bot-start-coversation.jpg"><img class="aligncenter size-full wp-image-3351" src="/wp-content/uploads/2016/12/bot-start-coversation.jpg" alt="bot-start-coversation" width="1686" height="864" /></a>
<pre class="prettyprint">{
  "conversationId": "JSfqQrtzCDn",
  "token": "w9KOqddWUuI.dAA.SgBTAGYAcQBRAHIAdB6AEMARABuAA.sWs_TZNM0gE.oSafVPS2hlU.m2kVr6Zjio_d-Am5cADqbLXHRMB93keAx6_pc7XxPao",
  "expires_in": 1800,
  "streamUrl": "wss://directline.botframework.com/v3/directline/conversations/JSfqQrtzCDn/stream?watermark=-&amp;t=w9KOqddWUuI.dAA.SgBTAGYAcQBRAHIAdAB6AEMARABuAA.sX0gQI9M0gE.jEunMa5gKi8.G6GvGGSy6TPSOav8SoNyaJDbIHaCuBrB6hBRRVsoqg8"
}</pre>
<h3>메시지(Activity) 보내기</h3>
메시지라고 하지 않고 Activity라는 표현을 쓴다. 그 이유는 단순 텍스트 메시지를 보내는 것 외에도 몇가지 타입이 더 있기 때문이다. 메시지를 보내면 응답코드로 상태를 알려주는데 4xx, 5xx 는 오류를 나타내며 성공은 200 상태코드에 보낸 Activity에 ID를 되돌려준다.

프로토콜이 그렇다는 것이고 응답을 받으려면 당연히 응답을 해줄 Bot이 준비되어 있어야 한다. 메시지를 보낼때 Content-Type을 헤더에 써줘야 한다.
<ul>
 	<li>URL: /v3/directline/conversations/{conversationId}/activities</li>
 	<li>Method: POST</li>
 	<li>Header: Authorization: Bearer {token} / <span style="text-decoration: underline;">Content-Type: application/json</span></li>
 	<li>body</li>
</ul>
<pre class="prettyprint">{
  "type": "message",
  "from": {
    "id": "{대화이름}"
  },
  "text": "안녕하세요!"
}</pre>
<a href="/wp-content/uploads/2016/12/bot-send-message.jpg"><img class="aligncenter size-full wp-image-3381" src="/wp-content/uploads/2016/12/bot-send-message.jpg" alt="bot-send-message" width="1686" height="993" /></a>
<h3>메시지(activity) 받기</h3>
메시지를 받을 때는 같은 주소로 GET 요청을 하면 된다. 즉시 응답이 오지 않고 시간이 걸린다. 즉, polling을 하면서 메시지를 기다려야 한다.
<ul>
 	<li>URL: /v3/directline/conversations/{conversationId}/activities</li>
 	<li>Method: <span style="text-decoration: underline;"><strong>GET</strong></span></li>
 	<li>Header: Authorization: Bearer {token}</li>
</ul>
응답을 받아보면 아래와 같다. 각 보내고 받은 메시지에도 ID가 부여 된 걸 알 수 있다. 시간과 채널에 대한 정보와 Bot의 이름 정보도 온다.
<pre class="prettyprint">{
  "activities": [
    {
      "type": "message",
      "id": "3Dk2pLyFLvc|000000000000000004",
      "timestamp": "2016-12-02T12:18:51.0051607Z",
      "channelId": "directline",
      "from": {
        "id": "ketbotv2",
        "name": "ketbotv2"
      },
      "conversation": {
        "id": "3Dk2pLyFLvc"
      },
      "text": "You sent 안녕하세요! which was 6 characters",
      "replyToId": "3Dk2pLyFLvc|000000000000000003"
    }
  ],
  "watermark": "4"
}</pre>
여기서 중요한 값이 하나 오는데 바로 Watermark라는 값이다. 이 값은 메시지를 보낼 때 마다 단순 증가한다. 메시지를 받을 때 GET 요청을 할때 watermark 라는 Query String을 붙여주지 않으면 응답으로 해당 대화의 전체 히스토리를 다 전달 해준다. 메시지를 100번 주고 받았다면 100개의 과거 메시지가 다 전달된다. 이 때 <span style="text-decoration: underline;">Watermark 값을 GET 요청에 Query String으로 전달해 주면 해당 watermark 이후의 메시지만 응답으로</span> 주니 더욱 효율적인 통신을 할 수 있다.

<a href="/wp-content/uploads/2016/12/bot-receive-message.jpg"><img class="aligncenter size-full wp-image-3382" src="/wp-content/uploads/2016/12/bot-receive-message.jpg" alt="bot-receive-message" width="1686" height="1070" /></a>

여기까지가 Microsoft Bot Framework의 Direct Line REST API를 이용해서 단순 메시지를 주고 받는 방법이다.

그 외에 <a href="https://docs.botframework.com/en-us/restapi/directline3/#/Conversations">문서</a>를 보면 파일을 업로드 하는 방법과 WebSocket 을 이용하는 방법이 더 소개되어 있다.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3251</wp:post_id>
		<wp:post_date><![CDATA[2016-12-02 21:48:34]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-12-02 12:48:34]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[microsoft-bot-framework-direct-line-rest-api-3-0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="azure"><![CDATA[azure]]></category>
		<category domain="post_tag" nicename="bot"><![CDATA[bot]]></category>
		<category domain="post_tag" nicename="bot-framework"><![CDATA[bot framework]]></category>
		<category domain="post_tag" nicename="direct-line"><![CDATA[direct line]]></category>
		<category domain="post_tag" nicename="direct-line-api"><![CDATA[direct line api]]></category>
		<category domain="post_tag" nicename="microsoft"><![CDATA[microsoft]]></category>
		<category domain="category" nicename="microsoft-bot-framework"><![CDATA[Microsoft Bot Framework]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1488026511;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3171;}i:1;a:1:{s:2:"id";i:3421;}i:2;a:1:{s:2:"id";i:3511;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1488026511;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3171;}i:1;a:1:{s:2:"id";i:3421;}i:2;a:1:{s:2:"id";i:3511;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[Microsoft Bot Framework] Dialog를 사용하여 대화의 흐름 만들기</title>
		<link>http://ilseokoh.com/2016/12/05/microsoft-bot-framework-dialog/</link>
		<pubDate>Mon, 05 Dec 2016 04:00:40 +0000</pubDate>
		<dc:creator><![CDATA[ilseokoh]]></dc:creator>
		<guid isPermaLink="false">http://ohtech.azurewebsites.net/?p=3421</guid>
		<description></description>
		<content:encoded><![CDATA[<span style="font-size: 18px;">대화에는 맥락이라는 것이 있다.  어떤 주제에 대해서 대화들은 같은 맥락 안에서 대화가 이어진다. Bot 을 만들 때도 같은 맥락 안에서 사용자와 Bot간의 대화가 이어져 나가는 방식으로 구현이 된다. 피자를 주문하는 Bot은 피자 주문이라는 맥락에서 크기, 토핑 종류, 음료 등을 물어보고 답을 할 것이다. </span>

<span style="font-size: 18px;">Microsoft Bot Framework에서는 Bot과 사용자 사이의 대화를 만드는 기본 모델이 Dialog 이다. Dialog를 통해서 반복되는 특정 대화를 모듈화해서 재사용성을 높이고 여러 Dialog를 체인 형식으로 연결시켜서 맥락을 이어가도록 프로그래밍 할 수 있다. </span>

<a href="https://docs.botframework.com/en-us/csharp/builder/sdkreference/dialogs.html">Dialogs 에 대한 공식 문서</a>는 docs.botframework.com 에 있다.

Bot framework builder에 이미 만들어져 있는 Dialog들이 있다. 이 Dialog들과 내가 만든 Dialog를 연결하면 좋은 구조를 만들 수 있다.
<ul>
 	<li><a href="https://docs.botframework.com/en-us/csharp/builder/sdkreference/d9/d03/class_microsoft_1_1_bot_1_1_builder_1_1_dialogs_1_1_prompt_dialog.html">PromptDialog</a>: 사용자의 응답 메시지를 기다리는 Dialog로 여러 버전이 있다. <a class="el" href="https://docs.botframework.com/en-us/csharp/builder/sdkreference/d5/d9a/class_microsoft_1_1_bot_1_1_builder_1_1_dialogs_1_1_prompt_dialog_1_1_prompt_attachment.html">PromptAttachment</a>, <a class="el" href="https://docs.botframework.com/en-us/csharp/builder/sdkreference/dc/df9/class_microsoft_1_1_bot_1_1_builder_1_1_dialogs_1_1_prompt_dialog_1_1_prompt_choice.html">PromptChoice</a>, <a class="el" href="https://docs.botframework.com/en-us/csharp/builder/sdkreference/dd/d7e/class_microsoft_1_1_bot_1_1_builder_1_1_dialogs_1_1_prompt_dialog_1_1_prompt_confirm.html">PromptConfirm</a>, <a class="el" href="https://docs.botframework.com/en-us/csharp/builder/sdkreference/d9/d63/class_microsoft_1_1_bot_1_1_builder_1_1_dialogs_1_1_prompt_dialog_1_1_prompt_double.html">PromptDouble</a>, <a class="el" href="https://docs.botframework.com/en-us/csharp/builder/sdkreference/d4/d27/class_microsoft_1_1_bot_1_1_builder_1_1_dialogs_1_1_prompt_dialog_1_1_prompt_int64.html">PromptInt64</a>, <a class="el" href="https://docs.botframework.com/en-us/csharp/builder/sdkreference/d3/d39/class_microsoft_1_1_bot_1_1_builder_1_1_dialogs_1_1_prompt_dialog_1_1_prompt_string.html">PromptString</a>. 예를들어 PromptInt64는 정수형 숫자만 입력 받고 숫자가 아닌 경우는 다시 물어본다.</li>
 	<li><a class="el" href="https://docs.botframework.com/en-us/csharp/builder/sdkreference/d8/df9/class_microsoft_1_1_bot_1_1_builder_1_1_dialogs_1_1_luis_dialog.html">LuisDialog</a>: Microsoft의 Cognitive Service 중 자연어 처리를 담당하는 LUIS(Language Understanding Intelligent Service)를 연결해서 대화를 만들어 낼 수 있는 클래스</li>
 	<li><a class="el" href="https://docs.botframework.com/en-us/csharp/builder/sdkreference/dc/dab/class_microsoft_1_1_bot_1_1_builder_1_1_dialogs_1_1_command_dialog.html">CommandDialog</a>: 정규표현식이 Match 를 이용하는 Dialog</li>
</ul>
<h2>Custom Dialog 만들기</h2>
StartAsync라는 메서드가 정의되어 있는 <a href="https://docs.botframework.com/en-us/csharp/builder/sdkreference/dd/d5e/interface_microsoft_1_1_bot_1_1_builder_1_1_dialogs_1_1_i_dialog.html">IDialog</a>를 구현하면 된다.
<pre class="prettyprint">public async Task StartAsync(IDialogContext context)
{
    context.Wait(MessageReceivedAsync);
}

public virtual async Task MessageReceivedAsync(IDialogContext context, IAwaitable&lt;IMessageActivity&gt; argument)
{
    using (CommentService service = new CommentService(new KetBotContext()))
    {
        var activity = await argument;

        // get state 
        KetBotState state = null;
        context.ConversationData.TryGetValue("KetBotState", out state);

        var cat3 = await service.GetFormsAsync(state.Stage1Selection);

        bool checkflag = false;
        int selected;
        if (int.TryParse(activity.Text, out selected) &amp;&amp; selected &gt; 0 &amp;&amp; selected &lt;= cat3.Count)
        {
          checkflag = true;
        }

 if (checkflag == true)
 {
     // save Stage1 selection
     state.Stage2Selection = activity.Text;
     // save state
     context.ConversationData.SetValue("KetBotState", state);

     // final answers 
     var answers = await service.GetAnswerAsync(state.Stage0Selection + state.Stage1Selection + state.Stage2Selection);
     await context.PostAsync(string.Join("\n", answers.ToArray()));

     var q = await service.GetCommentAsync("RCB02");
     List&lt;string&gt; yesno = new List&lt;string&gt;() { "네, 맞아요!", "아닌데요?" };

     PromptDialog.Choice(context, AfterChoiceAsync, yesno, q, promptStyle: PromptStyle.Keyboard);
 }
 else
 {
     // Go back to stage 2
     await context.PostAsync(await service.GetCommentAsync("REB01"));
     await context.PostAsync(string.Join("\n", cat3.ToArray()));
     context.Wait(MessageReceivedAsync);
  }
 }
}</pre>
Dialog 안에서는 PINKET Bot의 <a href="https://github.com/MadupPinket/ket-bot/blob/master/bot/KetBot/KetBot/Dialogs/Stage3Dialog.cs">Stage3Dialog.cs</a> 코드처럼
<ul>
 	<li>context.PostAsync()로 사용자에게 메시지를 즉시 전송하거나</li>
 	<li>context.Wait(MessageReceivedAsync)로 사용자로 부터 메시지를 받을 때 까지 기다리거나</li>
 	<li>PromptDialog를 통해서 형식화된 메시지를 주고 받거나</li>
 	<li>context.Done(<span class="pl-s"><span class="pl-pds">"some text)를 호출하면 체인으로 연결된 다음 Dialog가 Active 된다. </span></span></li>
</ul>
<h2>Dialog Chain</h2>
Dialog들을 체인으로 연결시켜서 또 다른 Dialog를 만들 수 있다. 내부적으로 DialogStack에 순서를 관리하며 연결을 위한 다양한 <a href="https://docs.botframework.com/en-us/csharp/builder/sdkreference/dialogs.html#Fluent">Chain Method</a>를 Fluent API로 지원한다.
<h2>Dialog Chain 샘플코드</h2>
<ul>
 	<li>Bot Framework Sample Code 중에 <a href="https://github.com/Microsoft/BotBuilder/blob/master/CSharp/Samples/EchoBot/EchoChainDialog.cs">EchoChainBot </a></li>
 	<li>FINKET Bot의 소스코드의 <a href="https://github.com/MadupPinket/ket-bot/blob/master/bot/KetBot/KetBot/Dialogs/KetBotChainDialog.cs">KetBotChainDialog</a></li>
 	<li><a href="https://github.com/Microsoft/BotBuilder/blob/master/CSharp/Samples/SimpleFacebookAuthBot/SimpleFacebookAuthDialog.cs">SimpleFacebookAuthBot</a></li>
</ul>
EchoChainBot의 코드를 살펴보면
<pre class="prettyprint">public static readonly IDialog&lt;string&gt; dialog = Chain.PostToChain()
 .Select(msg =&gt; msg.Text)
 .Switch(
 new Case&lt;string, IDialog&lt;string&gt;&gt;(text =&gt;
 {
     var regex = new Regex("^reset");
     return regex.Match(text).Success;
 }, (context, txt) =&gt;
 {
     return Chain.From(() =&gt; new PromptDialog.PromptConfirm("Are you sure you want to reset the count?",
     "Didn't get that!", 3, PromptStyle.Keyboard)).ContinueWith&lt;bool, string&gt;(async (ctx, res) =&gt;
 {
 string reply;
 if (await res)
 {
     ctx.UserData.SetValue("count", 0);
     reply = "Reset count.";
 }
 else
 {
     reply = "Did not reset count.";
 }
 return Chain.Return(reply);
 });
 }),
     new RegexCase&lt;IDialog&lt;string&gt;&gt;(new Regex("^help", RegexOptions.IgnoreCase), (context, txt) =&gt;
     {
   return Chain.Return("I am a simple echo dialog with a counter! Reset my counter by typing \"reset\"!");
 }),
 new DefaultCase&lt;string, IDialog&lt;string&gt;&gt;((context, txt) =&gt;
 {
 int count;
 context.UserData.TryGetValue("count", out count);
 context.UserData.SetValue("count", ++count);
 string reply = string.Format("{0}: You said {1}", count, txt);
 return Chain.Return(reply);
 }))
 .Unwrap()
 .PostToUser();</pre>
<ul>
 	<li>Chain.PostToChain() 로 사용자의 메시지로 부터 Chain이 시작되고</li>
 	<li>Select(msg =&gt; msg.Text) DialogContext에서 Message 부분만 Select 하고</li>
 	<li>.Switch(<span class="pl-k">new</span> Case&lt;<span class="pl-k">string</span>, IDialog&lt;<span class="pl-k">string</span>&gt;&gt; ...) 에서 메시지가 Match 되면 Callback 메서드가 실행된다.</li>
 	<li>Switch 에서  RegexCase&lt;IDialog&lt;<span class="pl-k">string</span>&gt;&gt;() 정규표현식을 사용할 수도 있고</li>
 	<li>매칭이 없으면 DefaultCase가 실행된다.</li>
 	<li>마지막으로 Unwarp()과 PostToUser()로 체인을 끝낸다.</li>
</ul>
이런식으로 Dialog를 연결해서 한 묶음의 대화를 완성한 예제가<a href="https://github.com/MadupPinket/ket-bot"> PINKET Bot</a> 이다. Dialog를 체인으로 엮어서 대화를 만드는 부분을 참조해 볼만하다.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3421</wp:post_id>
		<wp:post_date><![CDATA[2016-12-05 13:00:40]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-12-05 04:00:40]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[microsoft-bot-framework-dialog]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="bot"><![CDATA[bot]]></category>
		<category domain="post_tag" nicename="bot-framework"><![CDATA[bot framework]]></category>
		<category domain="post_tag" nicename="chatbot"><![CDATA[chatbot]]></category>
		<category domain="post_tag" nicename="microsoft"><![CDATA[microsoft]]></category>
		<category domain="category" nicename="microsoft-bot-framework"><![CDATA[Microsoft Bot Framework]]></category>
		<category domain="post_tag" nicename="microsoft-bot-framework"><![CDATA[microsoft bot framework]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1485950389;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3171;}i:1;a:1:{s:2:"id";i:3511;}i:2;a:1:{s:2:"id";i:3251;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1485950389;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3171;}i:1;a:1:{s:2:"id";i:3511;}i:2;a:1:{s:2:"id";i:3251;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[Microsoft Bot Framework] 상태저장을 위한 Bot State Service</title>
		<link>http://ilseokoh.com/2016/12/10/microsoft-bot-framework-%ec%83%81%ed%83%9c%ec%a0%80%ec%9e%a5%ec%9d%84-%ec%9c%84%ed%95%9c-bot-state-service/</link>
		<pubDate>Sat, 10 Dec 2016 05:10:20 +0000</pubDate>
		<dc:creator><![CDATA[ilseokoh]]></dc:creator>
		<guid isPermaLink="false">http://ohtech.azurewebsites.net/?p=3511</guid>
		<description></description>
		<content:encoded><![CDATA[Bot State Service가 2018년 3월 31일부로 문을 닫는다고 합니다. 블로그 내용 참조 바랍니다.

https://blog.botframework.com/2017/12/19/bot-state-service-will-soon-retired-march-31st-2018/

&nbsp;

우리가 카카오톡과 같은 메신저를 사용하다 보면 상대방의 질문에 즉시 답하지 못하고 몇 시간이 지난 후에 답을 주는 경우가 있다. 그렇다고 마지막 대화 내용을 놓치지 않고 답을 해줄 수 있다.  Bot 서비스도 역시 Bot이 사용자에게 질문을 던진다면 그 상태를 계속 유지해 줘야한다.

이런 상태 정보를 분리되고 공유된 공간이 아닌 메모리등의 로컬 자원에 의지를 하면 서비스를 확장하는데 문제가 생긴다. 즉, Bot도 기본적으로는 웹 서비스로 구현되기 때문에 서비스 확장에 대비해서 Stateless 로 구현되어야 한다. Microsoft Bot Framework는 이런 상태를 저장하는 공간을 Bot State Service로 제공한다.
<h2>State 저장소를 구분하기 위한 기본 정보</h2>
사용자와 Bot간의 메시지는 Activity라고 부르는데(Message 외에도 여러 타입이 있다) 다음과 같은 상태정보와 함께 움직인다. 이 값을 이용해서 특정 대화, 특정 사용자, 특정 대화에서 특정 사용자를 구분해 낼 수 있다. 이 3가지를 이용해서 각 Context에 맞는 데이터 저장소를 만들어서 저장 할 수 있다.
<ul>
 	<li>From: 어떤 채널(Skrype같은)에서 특정 사용자 아이디. 사용자 단위의 데이터를 저장 할 때.</li>
 	<li>Conversation: 특정 대화를 구분하는 ID. 대화에는 여러 User가 포함되어 있을 수 있다. 모든 사용자가 같이 공유할 데이터.</li>
 	<li>From + Conversation : 특정 대화에서 특정 사용자를 위한 저장공간 구분.</li>
</ul>
<h2>State 메서드</h2>
이 3가지 구분에 의해서 State를 저장하고 가져오는 State 메서드도 3가지로 구분이 된다. 저장되는 데이터는 32 kbyte 보다 작아야 한다.
<ul>
 	<li>데이터 가져오기
<ul>
 	<li>GetUserData()</li>
 	<li>GetConversationData()</li>
 	<li>GetPrivateConversationData()</li>
</ul>
</li>
 	<li>데이터 저장
<ul>
 	<li>SetUserData()</li>
 	<li>SetConversationData()</li>
 	<li>SetPrivateConversationData()</li>
</ul>
</li>
</ul>
<h2>IDialogContext.CoversationData</h2>
Bot State Service에 설명되어 있는 Bot State Service의 State Client 보다 <a href="https://docs.botframework.com/en-us/csharp/builder/sdkreference/d1/dc6/interface_microsoft_1_1_bot_1_1_builder_1_1_dialogs_1_1_i_dialog_context.html">IDialogContext</a> 의 헬퍼 프로퍼티를 사용하면 편리하다.

IDialog를 사용하면 항상 <a href="https://docs.botframework.com/en-us/csharp/builder/sdkreference/d1/dc6/interface_microsoft_1_1_bot_1_1_builder_1_1_dialogs_1_1_i_dialog_context.html">IDialogContext</a>가 따라다니는데 <a href="https://docs.botframework.com/en-us/csharp/builder/sdkreference/db/d9b/interface_microsoft_1_1_bot_1_1_builder_1_1_dialogs_1_1_internals_1_1_i_bot_data.html#ab32e7cf57ecf897949438ba2573aa54a">CoversationData</a>, <a href="https://docs.botframework.com/en-us/csharp/builder/sdkreference/db/d9b/interface_microsoft_1_1_bot_1_1_builder_1_1_dialogs_1_1_internals_1_1_i_bot_data.html#afc4166d3d31f3402aa962e48cd1a8f3c">PrivateConversationData</a>, <a href="https://docs.botframework.com/en-us/csharp/builder/sdkreference/db/d9b/interface_microsoft_1_1_bot_1_1_builder_1_1_dialogs_1_1_internals_1_1_i_bot_data.html#a5fd2f3a1c9280a13aa65dd2b3add257b">UserData</a> 이렇게 3개의 속성을 제공한다. 이 3개 속성에 구현된 <a href="https://docs.botframework.com/en-us/csharp/builder/sdkreference/d7/dea/interface_microsoft_1_1_bot_1_1_builder_1_1_dialogs_1_1_i_bot_data_bag.html">IBotDataBag</a> 메서드를 사용하면 쉽게 State를 관리할 수 있다.
<pre class="prettyprint">[Serializable]
public class Stage2Dialog : IDialog&lt;string&gt;
{
   public async Task StartAsync(IDialogContext context)
   {
        // get state 
        KetBotState state = null;
        context.ConversationData.TryGetValue("KetBotState", out state);
        if (KetBotState == null) return;

        // save state
        context.ConversationData.SetValue("KetBotState", state);
   }
}</pre>
예제로서 <a href="https://github.com/MadupPinket/ket-bot">PINKET Bot</a> 에서는 3가지의 선택지를 사용자에게 물어보고 최종 질문을 찾는 과정에서 3가지 질문의 답변을 State에 저장하면서 대화가 진행되다가 최종 질문이 확인되면 3가지 질문에 대한 답을 조합해서 최종 답변을 찾아 사용자에게 전달한다.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3511</wp:post_id>
		<wp:post_date><![CDATA[2016-12-10 14:10:20]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-12-10 05:10:20]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[microsoft-bot-framework-%ec%83%81%ed%83%9c%ec%a0%80%ec%9e%a5%ec%9d%84-%ec%9c%84%ed%95%9c-bot-state-service]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="bot"><![CDATA[bot]]></category>
		<category domain="post_tag" nicename="bot-state-service"><![CDATA[bot state service]]></category>
		<category domain="post_tag" nicename="chatbot"><![CDATA[chatbot]]></category>
		<category domain="post_tag" nicename="microsoft"><![CDATA[microsoft]]></category>
		<category domain="category" nicename="microsoft-bot-framework"><![CDATA[Microsoft Bot Framework]]></category>
		<category domain="post_tag" nicename="microsoft-bot-framework"><![CDATA[microsoft bot framework]]></category>
		<category domain="post_tag" nicename="stat"><![CDATA[stat]]></category>
		<category domain="post_tag" nicename="%eb%b4%87"><![CDATA[봇]]></category>
		<category domain="post_tag" nicename="%ec%b1%97%eb%b4%87"><![CDATA[챗봇]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1487536909;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3171;}i:1;a:1:{s:2:"id";i:3251;}i:2;a:1:{s:2:"id";i:2421;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1487536909;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3171;}i:1;a:1:{s:2:"id";i:3251;}i:2;a:1:{s:2:"id";i:2421;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_eb24533bdaa8af4d5cc6ef60b4cc7c7e]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>블루투스 뮤직 리시버</title>
		<link>http://ilseokoh.com/2016/12/10/%eb%b8%94%eb%a3%a8%ed%88%ac%ec%8a%a4-%eb%ae%a4%ec%a7%81-%eb%a6%ac%ec%8b%9c%eb%b2%84/</link>
		<pubDate>Sat, 10 Dec 2016 05:07:53 +0000</pubDate>
		<dc:creator><![CDATA[ilseokoh]]></dc:creator>
		<guid isPermaLink="false">http://ohtech.azurewebsites.net/?p=3571</guid>
		<description></description>
		<content:encoded><![CDATA[10년전에 구매했고 지금도 잘 쓰고 있는 스피커가 있다. 접촉 불량도 좀있고 하지만 여전히 명품이지만 한가지 아쉬운 점이 있다. 블루투스가 아쉽다. 무선의 맛을 한번 봤으니 되돌아 갈 수도 없고 모든 음악은 스마트폰에 있으니 여간 불편한게 아니다. 그래서 잘 안쓰게되고 IT 매장을 가면 스피커를 만지작 거리기도 했다.

그래서 구입한 블루투스 리시버가 이 불편함을 해소해 줬다.연결 잘 되고 음질도 뭐 괜찮고 .... 벨킨 블루투스 뮤직 리시버 F8Z492krP 약 3만 5천원.

다시 거실에 음악이 퍼진다.
<a href="/wp-content/uploads/2016/12/IMG_8045.jpg"><img class="aligncenter size-full wp-image-3591" src="/wp-content/uploads/2016/12/IMG_8045.jpg" alt="" width="2960" height="2379" /></a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3571</wp:post_id>
		<wp:post_date><![CDATA[2016-12-10 14:07:53]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-12-10 05:07:53]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%eb%b8%94%eb%a3%a8%ed%88%ac%ec%8a%a4-%eb%ae%a4%ec%a7%81-%eb%a6%ac%ec%8b%9c%eb%b2%84]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="belkin"><![CDATA[belkin]]></category>
		<category domain="post_tag" nicename="bluetooth"><![CDATA[bluetooth]]></category>
		<category domain="post_tag" nicename="%eb%b2%a8%ed%82%a8"><![CDATA[벨킨]]></category>
		<category domain="post_tag" nicename="%eb%b8%94%eb%a3%a8%ed%88%ac%ec%8a%a4"><![CDATA[블루투스]]></category>
		<category domain="category" nicename="%ec%9d%bc%ec%83%81"><![CDATA[일상]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[3581]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_dont_email_post_to_subs]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1487098171;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2421;}i:1;a:1:{s:2:"id";i:4611;}i:2;a:1:{s:2:"id";i:2591;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[3581]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_dont_email_post_to_subs]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1487098171;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2421;}i:1;a:1:{s:2:"id";i:4611;}i:2;a:1:{s:2:"id";i:2591;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>LEGO Technic 42032</title>
		<link>http://ilseokoh.com/2016/12/10/lego-technic-42032/</link>
		<pubDate>Sat, 10 Dec 2016 10:33:37 +0000</pubDate>
		<dc:creator><![CDATA[ilseokoh]]></dc:creator>
		<guid isPermaLink="false">http://ilseokoh.com/?p=3651</guid>
		<description></description>
		<content:encoded><![CDATA[LEGO Technic 42032

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3651</wp:post_id>
		<wp:post_date><![CDATA[2016-12-10 19:33:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-12-10 10:33:37]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[lego-technic-42032]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="lego"><![CDATA[LEGO]]></category>
		<category domain="category" nicename="%ec%9d%bc%ec%83%81"><![CDATA[일상]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[3661]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1487263586;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3831;}i:1;a:1:{s:2:"id";i:3571;}i:2;a:1:{s:2:"id";i:4611;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_dont_email_post_to_subs]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[3661]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1487263586;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3831;}i:1;a:1:{s:2:"id";i:3571;}i:2;a:1:{s:2:"id";i:4611;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_dont_email_post_to_subs]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>미키/미니 마우스 블록 만들기 타임랩스</title>
		<link>http://ilseokoh.com/2016/12/10/%eb%af%b8%ed%82%a4%eb%af%b8%eb%8b%88-%eb%a7%88%ec%9a%b0%ec%8a%a4-%eb%b8%94%eb%a1%9d-%eb%a7%8c%eb%93%a4%ea%b8%b0-%ed%83%80%ec%9e%84%eb%9e%a9%ec%8a%a4/</link>
		<pubDate>Sat, 10 Dec 2016 11:23:56 +0000</pubDate>
		<dc:creator><![CDATA[ilseokoh]]></dc:creator>
		<guid isPermaLink="false">http://ilseokoh.com/?p=3731</guid>
		<description></description>
		<content:encoded><![CDATA[[embed]https://youtu.be/3EcoJOABzgs[/embed]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3731</wp:post_id>
		<wp:post_date><![CDATA[2016-12-10 20:23:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-12-10 11:23:56]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%eb%af%b8%ed%82%a4%eb%af%b8%eb%8b%88-%eb%a7%88%ec%9a%b0%ec%8a%a4-%eb%b8%94%eb%a1%9d-%eb%a7%8c%eb%93%a4%ea%b8%b0-%ed%83%80%ec%9e%84%eb%9e%a9%ec%8a%a4]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="time-lapse"><![CDATA[time lapse]]></category>
		<category domain="category" nicename="video"><![CDATA[Video]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1488170110;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3801;}i:1;a:1:{s:2:"id";i:4471;}i:2;a:1:{s:2:"id";i:2591;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[3761]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1488170110;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3801;}i:1;a:1:{s:2:"id";i:4471;}i:2;a:1:{s:2:"id";i:2591;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[3761]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_c41c4fa946cdbb4958fbb09371b6a96f]]></wp:meta_key>
			<wp:meta_value><![CDATA[<iframe width="640" height="360" src="https://www.youtube.com/embed/3EcoJOABzgs?feature=oembed" frameborder="0" allowfullscreen></iframe>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_time_c41c4fa946cdbb4958fbb09371b6a96f]]></wp:meta_key>
			<wp:meta_value><![CDATA[1488275987]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>자전거 출근 - 가양에서 신사까지</title>
		<link>http://ilseokoh.com/2016/12/10/%ec%9e%90%ec%a0%84%ea%b1%b0-%ec%b6%9c%ea%b7%bc-%ea%b0%80%ec%96%91%ec%97%90%ec%84%9c-%ec%8b%a0%ec%82%ac%ea%b9%8c%ec%a7%80/</link>
		<pubDate>Sat, 10 Dec 2016 11:55:34 +0000</pubDate>
		<dc:creator><![CDATA[ilseokoh]]></dc:creator>
		<guid isPermaLink="false">http://ilseokoh.com/?p=3801</guid>
		<description></description>
		<content:encoded><![CDATA[자전거로 출근하기 최적의 위치. 가양에서 신사까지...
<ul>
 	<li>촬영: iPhone 4 / Instagram Time Lapse App</li>
 	<li>편집: Apple Final Cut Pro X</li>
 	<li>촬영일: 2014년 4월 19일</li>
</ul>
[embed]https://youtu.be/eFdSO2AM_V8[/embed]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3801</wp:post_id>
		<wp:post_date><![CDATA[2016-12-10 20:55:34]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-12-10 11:55:34]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%ec%9e%90%ec%a0%84%ea%b1%b0-%ec%b6%9c%ea%b7%bc-%ea%b0%80%ec%96%91%ec%97%90%ec%84%9c-%ec%8b%a0%ec%82%ac%ea%b9%8c%ec%a7%80]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="time-lapse"><![CDATA[time lapse]]></category>
		<category domain="category" nicename="video"><![CDATA[Video]]></category>
		<category domain="post_tag" nicename="%ed%83%80%ec%9e%84%eb%9e%a9%ec%8a%a4"><![CDATA[타임랩스]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[3811]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1488170110;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3731;}i:1;a:1:{s:2:"id";i:3011;}i:2;a:1:{s:2:"id";i:4281;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_888c0a0413b7acb266ac0fbdbecf0833]]></wp:meta_key>
			<wp:meta_value><![CDATA[<iframe width="525" height="295" src="https://www.youtube.com/embed/eFdSO2AM_V8?feature=oembed" frameborder="0" allowfullscreen></iframe>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_time_888c0a0413b7acb266ac0fbdbecf0833]]></wp:meta_key>
			<wp:meta_value><![CDATA[1488156624]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[3811]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1488170110;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3731;}i:1;a:1:{s:2:"id";i:3011;}i:2;a:1:{s:2:"id";i:4281;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_7d28ecf129c71a1935fea139a3fc960a]]></wp:meta_key>
			<wp:meta_value><![CDATA[<iframe width="640" height="360" src="https://www.youtube.com/embed/eFdSO2AM_V8?feature=oembed" frameborder="0" allowfullscreen></iframe>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_time_7d28ecf129c71a1935fea139a3fc960a]]></wp:meta_key>
			<wp:meta_value><![CDATA[1488275986]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Evernote --&gt; Onenote 이전</title>
		<link>http://ilseokoh.com/2016/12/10/evernote-onenote-%ec%9d%b4%ec%a0%84/</link>
		<pubDate>Sat, 10 Dec 2016 12:51:19 +0000</pubDate>
		<dc:creator><![CDATA[ilseokoh]]></dc:creator>
		<guid isPermaLink="false">http://ilseokoh.com/?p=3831</guid>
		<description></description>
		<content:encoded><![CDATA[Evernote가 싫어진 건 아니고 좋아하는 툴이지만 회사에서 onenote를 쓰면서 점차 사용빈도가 낮아지더니 이제는 거의 쓰지를 않게 되었다. 가끔 예전 노트가 생각 나서 찾아보다가 이걸 통째로 onenote로 이전해서 가까이 두기로 했다. evernote와 거의 이별을 하게 될 텐데 evernote의 경영악화 소식이 오래전에 있었는데 왠지 마음이 아프네.

<a href="https://www.onenote.com/import-evernote-to-onenote">onenote importer</a> 를 이용하면 한번에 자동으로 이전된다. 700개의 노트가 이전되었다.

<img class="aligncenter size-large wp-image-3841" src="/wp-content/uploads/2016/12/onenote-impoter-1024x718.jpg" alt="" width="640" height="449" />]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3831</wp:post_id>
		<wp:post_date><![CDATA[2016-12-10 21:51:19]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-12-10 12:51:19]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[evernote-onenote-%ec%9d%b4%ec%a0%84]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="evernote"><![CDATA[evernote]]></category>
		<category domain="post_tag" nicename="importer"><![CDATA[importer]]></category>
		<category domain="post_tag" nicename="onenote"><![CDATA[onenote]]></category>
		<category domain="category" nicename="%ec%9d%bc%ec%83%81"><![CDATA[일상]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1488170110;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:4281;}i:1;a:1:{s:2:"id";i:3911;}i:2;a:1:{s:2:"id";i:2561;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[3871]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_dont_email_post_to_subs]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1488170110;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:4281;}i:1;a:1:{s:2:"id";i:3911;}i:2;a:1:{s:2:"id";i:2561;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[3871]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_dont_email_post_to_subs]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Azure IPv6 지원과 애플 &quot;IPv6 Only Network&quot;</title>
		<link>http://ilseokoh.com/2016/12/16/azure-ipv6-%ec%a7%80%ec%9b%90%ea%b3%bc-%ec%95%a0%ed%94%8c-ipv6-only-network/</link>
		<pubDate>Fri, 16 Dec 2016 09:48:59 +0000</pubDate>
		<dc:creator><![CDATA[ilseokoh]]></dc:creator>
		<guid isPermaLink="false">http://ilseokoh.com/?p=3911</guid>
		<description></description>
		<content:encoded><![CDATA[지난 9월에 있었던 마이크로소프트 Ignite 2016 행사에서는 Azure의 네트워킹 관련 업데이트가 대거 발표되었다. 주요 내용은 DNS, IPv6, WAF, Peering, Accelerated Networking인데 상세 내용은 동영상 또는 <a href="https://azure.microsoft.com/en-us/blog/azure-networking-announcements-for-ignite-2016/">블로그 글</a>을 참조 바란다. 그 중에 <a href="https://docs.microsoft.com/ko-kr/azure/load-balancer/load-balancer-ipv6-overview">IPv6지원에 대한 내용</a>이 포함되어 있었는데 그 내용을 살펴보자.

<a href="https://ko.wikipedia.org/wiki/IPv6">위키백과</a>에 따르면 IPv6는 1994년에 국제인터넷표준화기구에서 채택되었다고 한다. 그리고 내 개인 기억으로는 10년도 전에 IPv4가 고갈될 것이라는 공포심을 자극하면서 잠시 회자가 되나 싶더니 이내 잘 들리지 않는 IT용어 였다. 최근에는 IoT 와 더불어 다시 얘기가 나오고 있지만 아직 낮설다. 그러나 최근 IPv6에 대한 이슈를 끌고 나온 것은 의외로 애플이다.

애플은 <a href="https://developer.apple.com/news/?id=05042016a">WWDC 2015 행사에서 앱 심사 항목에 "IPv6 Only Network 지원"을 2016년 6월 1일 부터 넣겠다고 발표를 했다</a>.  그리고 올해  6월이 지나면서 실제 앱스토어의 앱 심사에서 "IPv6 Only Network 미지원"으로 반려(Reject)된 사유가 나오면서 앱 개발자들 사이에서 이슈가 되고 있다.
<blockquote>
<h4>애플의 "IPv6 Only Network 지원" 요건은 서버측이 IPv6를 지원하는 것과는 상관없다.</h4>
</blockquote>
먼저 오해를 하지 말아야 할 것이 있다. "IPv6 Only Network" 지원은 iOS 기기가 IPv6만 지원하는 네트워크 환경에서도 앱이 정상적으로 작동하는지를 본다는 것이다. 서버측이 IPv6를 지원하고 말고는 상관이 없다. <a href="https://forums.developer.apple.com/message/136166#136166">애플 포럼의 FAQ를 정리해놓은 글</a>을 보면 이런 내용이 있다.
<blockquote>#3 — <em>Will I need to update my server?</em>

&nbsp;

That depends on where your server is running:
<ul>
 	<li>If you have a server running on the wider Internet, the answer is no.  Your server will be accessible to IPv6-only devices via DNS64/NAT64.You <em>should</em> update your server to support IPv6 as a matter of course, but that’s something you can do in your own time.</li>
</ul>
서버를 변경해야 하나요?

&nbsp;

그건 서버환경에 따라 다른데 서버가 인터넷 공간에 연결되어 있다면 대답은 "NO". 당신의 서버는 DNS64/NAT64를 통해 IPv6 only device와 통신이 가능할 것이다.

&nbsp;

당연히 서버가 IPv6를 지원하면 좋다. 하지만 시간 날 때 해라.</blockquote>
<a href="https://developer.apple.com/library/content/documentation/NetworkingInternetWeb/Conceptual/NetworkingOverview/UnderstandingandPreparingfortheIPv6Transition/UnderstandingandPreparingfortheIPv6Transition.html#//apple_ref/doc/uid/TP40010220-CH213-SW16">애플이 제시한 테스트 환경</a>을 보면 이해가 된다. iOS 기기들은 IPv6 주소를 받아서 IPv6 네트워크에 속하지만 DNS64/NAT64를 거치면서  IPv4로 변환된 주소로 서버와 연결된다. 즉, 서버측은 IPv4라도 상관이 없다. 구구절절 설명하는 이유는 앱이 반려 되었을 때 문제의 원인은 클라이언트(앱의 코드)에 있기 때문에 앱의 코드를 살펴봐야 한다는 것이다.
<h3>Azure의 IPv6 지원</h3>
<h4>현재 제약사항</h4>
Azure의 IPv6 지원은 아직 일부라고 말할 수 있다. 뭔가 해보기 전에 <strong>현재(2016년 12월 14일)</strong>의 제약사항을 먼저 살펴보는게 좋겠다.
<ol>
 	<li>Azure의 Iaas 리소스 중에 부하분산집합(LB, Load Balancer)와 그 밑에 붙어 있는 가상머신(VM, Virtual Machine) 에서만 IPv6가 지원된다.
<ul>
 	<li>인터넷에 직접 연결된 VM에서는 적용할 수 없다. 정확히 말하면 Public IPv6는 LB에만 만들 수 있다.</li>
 	<li>VMSS(Virtual Machine Scale Set)에 적용할 수 없다.</li>
 	<li>LB의 Probe는 IPv4 주소만 가능하다.</li>
</ul>
</li>
 	<li>신규로 생성하는 인프라에만 적용할 수 있다.
<ul>
 	<li>기존에 생성되어 있는 LB나 VM에는 적용할 수 없다.</li>
 	<li>방법이 없는 건 아니다. 서비스 점검 시간을 가지고 기존 VM에서 Disk 를 Detach하고  VM과 LB 그리고 그 주변기기(Network Interface Card, Network Security Group, IP Address)를 삭제하고 다시 만들면서 새로운 VM에 기존 Disk 를 Attach 시키는 방법이 있다. 결국 거의 모두 다시 만드는 상황.</li>
</ul>
</li>
 	<li>Portal에서 만들 수 없고 ARM(Azure Resource Manager Template)이나 PowerShell, Azure CLI를 통해서 생성할 수 있다.</li>
</ol>
<h4>Azure Load Balancer에 IPv6 적용</h4>
공식 문서가 제공 된다.
<ul>
 	<li><a href="https://docs.microsoft.com/ko-kr/azure/load-balancer/load-balancer-ipv6-overview">Azure Load Balancer의 IPv6에 대한 개요</a></li>
 	<li><a href="https://docs.microsoft.com/ko-kr/azure/load-balancer/load-balancer-ipv6-internet-template">템플릿을 사용하여 IPv6와 함께 부하 분산 장치 배포하기</a></li>
 	<li><a href="https://docs.microsoft.com/ko-kr/azure/load-balancer/load-balancer-ipv6-internet-ps">Azure PowerShell을 사용하여 IPv6와 함께 부하 분산 장치 배포하기</a></li>
 	<li><a href="https://docs.microsoft.com/ko-kr/azure/load-balancer/load-balancer-ipv6-internet-cli">Azure CLI를 사용하여 IPv6와 함께 부하 분산 장치 배포하기</a></li>
</ul>
<img class="aligncenter size-full wp-image-4161" src="/wp-content/uploads/2016/12/load-balancer-ipv6.png" alt="" width="663" height="355" />

기본 아이디어는 단순하다. LB에 IPv6용 IP Address를 만들어서 붙이고 VM에 붙어 있는 NIC(Network Interface Card)에도 IPv6용 IP Address를 붙여준다. 그리고 LB에서 Front End Address와 Back End Pool 설정을 해주고 Load Balancer Rule를 만들어 적용해준다.
<h4>ARM Template을 이용하여 IPv6 환경 만들기</h4>
가장 빨리 테스트 할 수 있는 방법은 이미 만들어져 있는 ARM Template을 활용하는 것이다. Sean Wheeler라는 분이 만들어 놓은 <a href="https://azure.microsoft.com/ko-kr/resources/templates/201-load-balancer-ipv6-create/">Create a Load-balancer with a Public IPv6 Address</a> 페이지에서 "Azure에 배포" 버튼을 누르면 Azure Portal로 이동하면서 4가지 속성만 정의해 주면 즉시 만들 수 있다. <a href="https://github.com/Azure/azure-quickstart-templates/tree/master/201-load-balancer-ipv6-create">템플릿의 소스코드는 GitHub</a>에 있다. Windows 서버 2대가 가용성 집합으로 묶여서 부하분산집합 아래에 놓이고 IPv4와 IPv6가 모두 설정된 인프라가 만들어진다.
<ul>
 	<li>Load Balancer의 Frontend IP Address가 IPv4 / IPv6 두개가 설정된다. (LoadBalancerFrontEndIPv4, LoadBalancerFrontEndIPv6) <img class="size-large wp-image-4191 alignnone" src="/wp-content/uploads/2016/12/ipv6-lb-frontend-ip-1024x331.png" alt="" width="640" height="207" /></li>
 	<li>Load Balancer의 Backend Pools 도 두가지가 설정된다. (BackendPoolIPv4, BackendPoolIPv6)<img class="size-large wp-image-4201 alignnone" src="/wp-content/uploads/2016/12/load-balancer-ipv6-backend-1024x511.png" alt="" width="640" height="319" /></li>
 	<li>Load Balancer의 Load Balancer Rule 도 두개로 설정된다. 이 중에서 IPv6에 대한 설정은 80 포트를 8080 포트로 보내는 설정이다. 따라서 VM에서 8080 접속에 대한 설정이 필요하다. 그리고 방화벽도 열어줘야 한다. 여기서는 IIS에 8080포트 바인딩 설정을 추가했다. <img class="alignnone size-large wp-image-4221" src="/wp-content/uploads/2016/12/ipv6-lb-rule-1024x564.png" alt="" width="640" height="353" /></li>
</ul>
<ul>
 	<li>VM에 붙어 있는 Network Interface Card는 2개의 내부 IPv4, IPv6 IP가 적용되어 있다. <img class="size-large wp-image-4211 alignnone" src="/wp-content/uploads/2016/12/ipv6-nic-address-1024x538.png" alt="" width="640" height="336" /></li>
 	<li>실제 머신에서도 네트워크 카드에 두개의 IP가 설정되어 있는 것이 확인된다. <!--?prettify linenums=true?-->
<pre class="prettyprint">Ethernet adapter Ethernet 2:

   IPv6 Address. . . . . . . . . . . : 2603:1090:d05:f9::644a:a83d
   Link-local IPv6 Address . . . . . : fe80::88cf:2aff:84b6:2cc8%13
   IPv4 Address. . . . . . . . . . . : 10.0.0.5
   Subnet Mask . . . . . . . . . . . : 255.255.255.0
   Default Gateway . . . . . . . . . : fe80::662:73ff:fef4:56f%13
                                       10.0.0.1
</pre>
</li>
</ul>
<h4>IPv6로 접속 테스트</h4>
Load Balancer에 연결된 IPv6 주소로 웹브라우저를 이용해서 테스트를 진행 해봤다. 테스트를 위해서는 나의 네트워크 환경이 IPv6를 지원하는지 확인해 봐야 하는데 <a href="https://www.test-ipv6.cz/index.html.ko_KR">IPv6 연결테스트 페이지</a>에서 확인 할 수 있다.
<h4>먼저 nslookup로 IPv6 주소 확인
<!--?prettify linenums=true?--></h4>
<pre class="prettyprint">$ nslookup -query=AAAA gameserver123.japanwest.cloudapp.azure.com
Server:		168.126.63.1
Address:	168.126.63.1#53

Non-authoritative answer:
gameserver123.japanwest.cloudapp.azure.com	has AAAA address <strong>2603:1040:601::154</strong>

$ nslookup gameserver123.japanwest.cloudapp.azure.com

Server: 168.126.63.1
Address: 168.126.63.1#53

Non-authoritative answer:
Name: gameserver123.japanwest.cloudapp.azure.com
Address: <strong>104.214.148.32</strong></pre>
<h4>웹브라우저에서 http://[2603:1040:601::154] 로 접속테스트</h4>
Windows 방화벽을 열지 않아서 문제가 있었지만 잘 접속이 된다.

<img class="alignnone size-large wp-image-4371" src="/wp-content/uploads/2016/12/ipv6-web-browser-1024x719.png" alt="" width="640" height="449" />
<h4>정리</h4>
다시한번 정리를 해야겠습니다.
<ul>
 	<li>Azure Load Balancer 와 그 아래 붙어있는 VM에서 IPv6 를 지원한다.</li>
 	<li>Load Balancer에 Auzre의 Public IP를 두개 붙이는데 IPv4와 IPv6를 생성한다.</li>
 	<li>VM에도 Azure IP Address를 IPv6로 만들어서 붙인다.</li>
 	<li>Load Balancer에서 Load Balancing Rule 이 두개가 필요하다. 웹 서비스의 경우 IPv4를 위해서는 80--&gt;80, IPv6에 대해서는 80 --&gt; 8080</li>
 	<li>VM의 OS 상에서도 방화벽 설정(80, 8080)이나 Application 설정(IIS 설정 같은), Linux의 경우 IPv6를 설정</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3911</wp:post_id>
		<wp:post_date><![CDATA[2016-12-16 18:48:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-12-16 09:48:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[azure-ipv6-%ec%a7%80%ec%9b%90%ea%b3%bc-%ec%95%a0%ed%94%8c-ipv6-only-network]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="apple"><![CDATA[Apple]]></category>
		<category domain="category" nicename="azure"><![CDATA[Azure]]></category>
		<category domain="post_tag" nicename="azure"><![CDATA[azure]]></category>
		<category domain="post_tag" nicename="ipv6"><![CDATA[ipv6]]></category>
		<category domain="post_tag" nicename="ipv6-only-device"><![CDATA[Ipv6 only device]]></category>
		<category domain="post_tag" nicename="ipv6-only-network"><![CDATA[IPv6 Only Network]]></category>
		<category domain="post_tag" nicename="network"><![CDATA[network]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_74462efa5aa8e739ddea9715bfa48b03]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1488170109;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2591;}i:1;a:1:{s:2:"id";i:3011;}i:2;a:1:{s:2:"id";i:2091;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[4241]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_dont_email_post_to_subs]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_74462efa5aa8e739ddea9715bfa48b03]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1488170109;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2591;}i:1;a:1:{s:2:"id";i:3011;}i:2;a:1:{s:2:"id";i:2091;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[4241]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_dont_email_post_to_subs]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Azure SQL Database 데이터 이전 (Full text Search 포함)</title>
		<link>http://ilseokoh.com/2016/12/16/azure-sql-database-%eb%8d%b0%ec%9d%b4%ed%84%b0-%ec%9d%b4%ec%a0%84-full-text-search-%ed%8f%ac%ed%95%a8/</link>
		<pubDate>Fri, 16 Dec 2016 09:43:59 +0000</pubDate>
		<dc:creator><![CDATA[ilseokoh]]></dc:creator>
		<guid isPermaLink="false">http://ilseokoh.com/?p=4281</guid>
		<description></description>
		<content:encoded><![CDATA[Microsoft SQL Server를 온프레미스 서버나 Azure VM에 설치해서 사용하다가 Azure SQL Database로 이전하는 경우가 있다. 이전 방법은 총 4가지가 있다.
<ol>
 	<li><a href="https://docs.microsoft.com/ko-kr/azure/sql-database/sql-database-cloud-migrate-fix-compatibility-issues-ssdt">Visual Studio용 SQL Server 데이터 도구("SSDT") </a>사용.</li>
 	<li><a href="https://docs.microsoft.com/ko-kr/azure/sql-database/sql-database-cloud-migrate-determine-compatibility-sqlpackage">SqlPackage.exe 를 이용하는 방법 </a></li>
 	<li><a href="https://docs.microsoft.com/ko-kr/azure/sql-database/sql-database-cloud-migrate-determine-compatibility-ssms">SQL Server Management Studio 를 사용하는 방법</a></li>
 	<li><a href="https://docs.microsoft.com/ko-kr/azure/sql-database/sql-database-cloud-migrate-fix-compatibility-issues">SQL Azure 마이그레이션 마법사("SAMW") 를 사용하는 방법</a></li>
</ol>
이중에서 SSMS(SQL Server Management Studio)를 사용해서 데이터 이전을 할 때 경험있어 공유 한다.

먼저 Before 환경은 Microsoft SQL Server 2014 Standard 버전이고 Full Text Search 를 사용하는 Database이다. 다행히 <a href="https://azure.microsoft.com/ko-kr/blog/full-text-search-is-now-available-for-preview-in-azure-sql-database/">Azure SQL Server는 최신 버전이 V12라고 하는데 V12에 Full Text Search 도 지원을 </a>하게 되었다.

데이터 이전의 순서와 관련 문서는 아래와 같다. 아래 내용은 Azure Portal / PowerShell / SQLPackage.exe 를 사용해서도 가능하다.
<h2>1. SSMS 업그레이드: 최신버전으로 받아야 한다.</h2>
<a href="https://msdn.microsoft.com/ko-kr/library/mt238290.aspx">다운로드 링크</a> (13.0.16100)

Azure SQL Database가 Full Text Search를 지원한 시점이 늦기 때문에 기존 SSMS 툴들이 Validation 과정에서 오류를 내고 작동하지 않는다. 최신버전에서는 이런 문제가 발생하지 않는다. SSMS 2014 (12.0.2548.0) 에서는 아래와 같은 오류를 발생시켰는데 툴을 업그레이드 하면 해결 된다.
<pre class="prettyprint">Error SQL71564: The element Full-text Catalog: [CAT_FOOTAGE] is not supported in Microsoft Azure SQL Database v12 (Preview).
Error SQL71564: The element Full-text Index on [dbo].[Keyword] is not supported in Microsoft Azure SQL Database v12 (Preview).
Error SQL71564: The element SqlFullTextIndexColumnSpecifier: &lt;unnamed&gt; has property LanguageId set to a value that is not supported in Microsoft Azure SQL Database v12 (Preview).
</pre>
<h2>2. <a href="https://docs.microsoft.com/en-us/azure/sql-database/sql-database-cloud-migrate-compatible-export-bacpac-ssms">BACKPAC 파일 만들기 </a></h2>
<a href="https://docs.microsoft.com/en-us/azure/sql-database/sql-database-cloud-migrate-compatible-export-bacpac-ssms">문서</a>를 따라서 진행하면 된다.

시작하면서  Validation Check를 하는데 흔히 발생하는 오류는 사용자에 관한 오류다. 로컬에 직접 설치된 SQL Server는 Windows 사용자 계정을 데이터베이스 관리자로 추가 하여 Windows 로그인으로 SQL Server로 접속이 가능하지만 Azure SQL은 SQL 사용자만 생성되고 로그인 가능하다. 따라서 Windows 사용자에 관련된 오류가 발 생할 수 있다.
<h2>3. Azure 포탈에서 SQL Server 만들기</h2>
Azure 포탈에서 SQL Server(Logical Server) 를 만들어 준비한다. Azure SQL Database를 만들면서 함께 SQL Server 가 만들어지지만 (여기서 용어가 헷갈리는데 SQL Server는 서버 인프라를 말하고 Azure SQL Database는 데이터베이스 자체를 말한다) SSMS를 사용해서 임포트를 할 때 새로운 DB를 만들면서 진행하기 때문에 이름이 겹치지 않게 Database는 만들어 놓지 않아도 된다.

<img class="alignnone size-full wp-image-4291" src="/wp-content/uploads/2016/12/azure-sql.png" alt="" width="890" height="764" />
<h2>4. <a href="https://docs.microsoft.com/ko-kr/azure/sql-database/sql-database-cloud-migrate-compatible-import-bacpac-ssms">BACKPAC 파일 임포트</a></h2>
임포트 과정도 <a href="https://docs.microsoft.com/ko-kr/azure/sql-database/sql-database-cloud-migrate-compatible-import-bacpac-ssms">문서</a>를 따라서 하면 된다.

<img class="alignnone size-large wp-image-4301" src="/wp-content/uploads/2016/12/import-1024x925.png" alt="" width="640" height="578" />

문서화도 잘 되어 있고 툴도 정비가 되어서 어렵지 않게 걱정했던 데이터 이전을 완료했다.

&nbsp;

&nbsp;

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4281</wp:post_id>
		<wp:post_date><![CDATA[2016-12-16 18:43:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-12-16 09:43:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[azure-sql-database-%eb%8d%b0%ec%9d%b4%ed%84%b0-%ec%9d%b4%ec%a0%84-full-text-search-%ed%8f%ac%ed%95%a8]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="auzre"><![CDATA[auzre]]></category>
		<category domain="category" nicename="azure"><![CDATA[Azure]]></category>
		<category domain="post_tag" nicename="migration"><![CDATA[migration]]></category>
		<category domain="post_tag" nicename="sql"><![CDATA[sql]]></category>
		<category domain="post_tag" nicename="sql-server"><![CDATA[sql server]]></category>
		<category domain="post_tag" nicename="v12"><![CDATA[v12]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1488170109;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:4951;}i:1;a:1:{s:2:"id";i:3171;}i:2;a:1:{s:2:"id";i:4791;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1488170109;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:4951;}i:1;a:1:{s:2:"id";i:3171;}i:2;a:1:{s:2:"id";i:4791;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Visual Studio Code 커맨드에서 바로 실행하는 방법</title>
		<link>http://ilseokoh.com/2017/01/04/visual-studio-code-%ec%bb%a4%eb%a7%a8%eb%93%9c%ec%97%90%ec%84%9c-%eb%b0%94%eb%a1%9c-%ec%8b%a4%ed%96%89%ed%95%98%eb%8a%94-%eb%b0%a9%eb%b2%95/</link>
		<pubDate>Wed, 04 Jan 2017 06:33:17 +0000</pubDate>
		<dc:creator><![CDATA[ilseokoh]]></dc:creator>
		<guid isPermaLink="false">http://ilseokoh.com/?p=4431</guid>
		<description></description>
		<content:encoded><![CDATA[쉘에서 커멘드라인에서 바로 VS Code 를 실행하고 싶은 때가 있다. 이렇게 ...
<pre class="prettyprint">$ code .</pre>
이렇게 하면 VS Code가 실행되고 현재 디렉토리가 바로 열리니 편리하다. 설정하는 방법은 결국 VS Code의 실행파일을 시스템 PATH에 넣어주는 것인데 쉽게 설정하는 방법이 있다.

VS Code를 실행하고 Command Palette ( 맥의 경우 Shift + Command + P, 윈도우/리눅스의 경우 Ctrl + Shift + P)를 열어서 'shell command'를 입력하면 <strong>Shell Command: Install 'code' command</strong> 를 찾아서 선택하면 된다.

<img class="aligncenter size-large" src="https://code.visualstudio.com/images/mac_shell-command.png" alt="shell command install code command in PATH" width="618" height="100" />]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4431</wp:post_id>
		<wp:post_date><![CDATA[2017-01-04 15:33:17]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-01-04 06:33:17]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[visual-studio-code-%ec%bb%a4%eb%a7%a8%eb%93%9c%ec%97%90%ec%84%9c-%eb%b0%94%eb%a1%9c-%ec%8b%a4%ed%96%89%ed%95%98%eb%8a%94-%eb%b0%a9%eb%b2%95]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="azure"><![CDATA[Azure]]></category>
		<category domain="post_tag" nicename="command-line"><![CDATA[command line]]></category>
		<category domain="post_tag" nicename="visual-studio"><![CDATA[visual studio]]></category>
		<category domain="post_tag" nicename="visual-studio-code"><![CDATA[visual studio code]]></category>
		<category domain="post_tag" nicename="vs-code"><![CDATA[vs code]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_25176ecfe8983c9b37e112a56bb3f459]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1488170108;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2291;}i:1;a:1:{s:2:"id";i:61;}i:2;a:1:{s:2:"id";i:2421;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_25176ecfe8983c9b37e112a56bb3f459]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1488170108;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:2291;}i:1;a:1:{s:2:"id";i:61;}i:2;a:1:{s:2:"id";i:2421;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Microsoft Conversation as a Platform 소개 - 발표영상 및 자료</title>
		<link>http://ilseokoh.com/2017/01/14/microsoft-conversation-as-a-platform-%ec%86%8c%ea%b0%9c-%eb%b0%9c%ed%91%9c%ec%98%81%ec%83%81-%eb%b0%8f-%ec%9e%90%eb%a3%8c/</link>
		<pubDate>Sat, 14 Jan 2017 13:09:03 +0000</pubDate>
		<dc:creator><![CDATA[ilseokoh]]></dc:creator>
		<guid isPermaLink="false">http://ilseokoh.com/?p=4471</guid>
		<description></description>
		<content:encoded><![CDATA[2017년 1월 14일에 있었던 Microsoft Azure Korea Group(http://krazure.club) <a href="http://onoffmix.com/event/86535">Saturday Azure Live, 1701 세미나</a>의 첫번째 세션이 었던 "Microsoft Conversation as a Platform 소개" 발표영상과 발표 자료 입니다.

<iframe src="https://www.youtube.com/embed/DWkwBpdoDf8" width="853" height="480" frameborder="0" allowfullscreen="allowfullscreen"></iframe>

&nbsp;

<iframe src="https://docs.com/d/embed/D25191790-3947-5851-4070-001268338186%7eMe2e6c445-2491-fc63-677c-d119e98c3ac9" width="853px" height="480px" frameborder="0" allowfullscreen="allowfullscreen"></iframe>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4471</wp:post_id>
		<wp:post_date><![CDATA[2017-01-14 22:09:03]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-01-14 13:09:03]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[microsoft-conversation-as-a-platform-%ec%86%8c%ea%b0%9c-%eb%b0%9c%ed%91%9c%ec%98%81%ec%83%81-%eb%b0%8f-%ec%9e%90%eb%a3%8c]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="azure"><![CDATA[azure]]></category>
		<category domain="post_tag" nicename="bot"><![CDATA[bot]]></category>
		<category domain="post_tag" nicename="bot-framework"><![CDATA[bot framework]]></category>
		<category domain="post_tag" nicename="caap"><![CDATA[CaaP]]></category>
		<category domain="post_tag" nicename="conversation-as-a-platform"><![CDATA[Conversation as a Platform]]></category>
		<category domain="post_tag" nicename="microsoft"><![CDATA[microsoft]]></category>
		<category domain="category" nicename="microsoft-bot-framework"><![CDATA[Microsoft Bot Framework]]></category>
		<category domain="post_tag" nicename="microsoft-bot-framework"><![CDATA[microsoft bot framework]]></category>
		<category domain="post_tag" nicename="%eb%b4%87"><![CDATA[봇]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_dont_email_post_to_subs]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1488170108;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3171;}i:1;a:1:{s:2:"id";i:3511;}i:2;a:1:{s:2:"id";i:3251;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[4521]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_dont_email_post_to_subs]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1488170108;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3171;}i:1;a:1:{s:2:"id";i:3511;}i:2;a:1:{s:2:"id";i:3251;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[4521]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Xamarin 자격증 취득 후기</title>
		<link>http://ilseokoh.com/2017/01/25/xamarin-%ec%9e%90%ea%b2%a9%ec%a6%9d-%ec%b7%a8%eb%93%9d-%ed%9b%84%ea%b8%b0/</link>
		<pubDate>Wed, 25 Jan 2017 07:04:28 +0000</pubDate>
		<dc:creator><![CDATA[ilseokoh]]></dc:creator>
		<guid isPermaLink="false">http://ilseokoh.com/?p=4611</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="https://www.xamarin.com/">Xamarin</a>은 C#, .NET Framework, Visual Studio를 활용해서 크로스플랫폼(iOS, Android, Windows 10 app)을 개발 할 수 있는 플랫폼이다. Xamarin을 익히는 방법은 여러가지가 있지만 <a href="https://university.xamarin.com/">Xamarin University</a>라는 사이트를 통해서 강의를 듣고 공부를 하는 방법이 있다. 물론 모든 강의가 영어로 진행되는 점은 아쉽지만 교육과정과 컨텐츠는 매우 훌륭하다. Xamarin University에서 관리하는 자격증이 하나 있는데 "<a href="https://university.xamarin.com/certification"><strong>Xamarin Certified Mobile Developer</strong></a>"가 그 자격증이다. 약 2개월 동안 Xamarin University에서 강의를 듣고 오늘 자격증을 취득했다.
<h2>1. IT 자격증을 대하는 자세</h2>
개발자로 10년도 넘게 일하는 동안 '국제 IT 자격증'(뭐라고 불러야 하는지 모르겠다)을 몇 개 가지고 있다. 하지만 대한민국에서 자격증이 내 일자리를 보장해 주지도 않고 어느 누구도 자격증이 있다고 개발을 잘 한다고 인정해주지 않는다. 따라서 가끔 이력서에 빈 공란을 채워주는 역할을 했을 뿐 아무도, 심지어는 나 조차도 자격증을 활용하는 것에는 관심이 없다. 정확히 말하자면 나는 자격증으로 덕을 보고자 하는 마음이 전혀 없다.

그런데 왜 또 자격증 얘기인가? 현재 프로젝트에서 쓰고 있지 않은 기술을 공부하려면 의지력이 중요한데 바쁜 일상에서 그 의지력은 쉽게 사라진다. 이 때 덜컥 돈을 지불하고 자격증 시험을 한두 달 후로 잡아 버린다. 그러면 없던 의지력이 샘솟고 특히 그 날짜가 다가올수록 그 의지력은 점점 올라간다. 그 힘으로 나를 다그쳐서 끝내는 새로운 기술을 익힌다. 세상을 참 피곤하게 사는 방법이다. 피곤해서 나이들고는 잘 안한다.

Xamarin 자격증도 "같은 이유 + 회사에서의 필요성" 때문에 시작하게 되었다.
<h2>2. Xamarin University 과정</h2>
Xamarin University 과정은 등록비가 1년에 $999이다. 부담스럽다.

클래스가 많다. Xamarin 자체도 내용이 있지만 iOS, Android, Window 10 app의 개발도 다뤄야 하기 때문에 내용이 여러가지다. 그 중에 Certification과정이 따로 있다. 총 20개의 클래스로 구성되어 있고 그 내용은 주로 Xamarin.Forms로 앱을 개발하기 위한 모든 내용이 들어 있다. 소개와 셋업, Xamarin.iOS 2클래스, Xamarin.Android 2클래스 그리고 나머지는 모두 Xamarin.Forms 내용이다.

내용은 정말 잘 만들었고 실제로 앱을 개발하기 위한 내용이 잘 정리되어 있다. 하지만 모든 강의는 영어로 진행된다. 아쉽다. 각 클래스에서는 실습도 잘 짜여서 들어가 있다. 강의와 실습이 번갈아 가면서 진행된다.

다른 인터넷 강의와는 다른 점이 있다. 내가 원하는 시간에 동영상을 보면서 스스로 학습하는 과정은 20개 중에 8개다. 나머지는 강사가 원격에서 실시간으로 직접 진행한다. 여러 강사가 같은 클래스를 강의하고 강의 시간을 미리 정해놓았고 나는 들어야 하는 강의를 수강신청하고 그 시간에 들어야 한다. 여기서 또 하나 힘든 점은 선택할 수 있는 강사가 한정되어 있다. 왜냐면 어떤 강사는 주로 새벽에 강의를 잡기 때문이다. 나의 경우 2개의 강의는 어쩔 수 없이 밤 11시에 시작하는 강의를 들어야 했다. 장점은 질문을 할 수 있다. 영어로 ... 어떤 강사는 각 학생들을 인사를 시킨다. 영어로 ...
<h2>3. Xamarin Certification</h2>
20개의 강의를 다 들으면 하나를 더 해야 시험을 볼 수 있다. 메인 강사와 1:1 원격 미팅을 잡아서 시험에 대한 사전 테스트 겸, 상담 겸 30분간 얘기를 나눠야 한다. 이 세션에서 질문을 하거나 예상문제를 몇가지만 알려달라고 요청할 수 있고 시험준비를 어떻게 하면 좋을지 얘기를 들을 수 있다. 물론 영어로 ...

1:1 세션까지 마치면 드디어 "시험보기" 버튼이 보인다. 시험은 총 150문제를 180분간 풀어야 하고 그 중 80% 이상을 맞춰야 통과가 된다. 웹 브라우저에서 그냥 시험이 치러지며 시간을 멈출수는 없다. 내 경우 3시간 동안 전화가 3번 와서 받느라고 시간을 낭비하고 거의 3시간을 다 썼다. 결과는 86% 맞춰서 턱걸이 했다.

시험에 통과 했으니 특별한 혜택이 있는지 궁금해서 봤다. Private LinkedIn Xamarin University 그룹에 가입 할 수 있다. 이상. 1년이면 만료가 되기 때문에 갱신 과정도 있다. 여러가지 면에서 공신력을 갖추기 위한 노력과 장치들이 보인다.

우리 사회도 편법이나 요령이 통하지 않게되면 이정도 노력으로 얻은 자격증은 어느정도 인정해주는 분위기가 생기겠지 ... 바램이다.

<img class="size-large wp-image-4621 aligncenter" src="/wp-content/uploads/2017/01/Xamarin-University_Certificate-1024x724.png" alt="" width="640" height="453" />]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4611</wp:post_id>
		<wp:post_date><![CDATA[2017-01-25 16:04:28]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-01-25 07:04:28]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[xamarin-%ec%9e%90%ea%b2%a9%ec%a6%9d-%ec%b7%a8%eb%93%9d-%ed%9b%84%ea%b8%b0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="xamarin"><![CDATA[xamarin]]></category>
		<category domain="post_tag" nicename="xamarin-certification"><![CDATA[xamarin certification]]></category>
		<category domain="post_tag" nicename="xamarin-university"><![CDATA[xamarin university]]></category>
		<category domain="category" nicename="%ec%9d%bc%ec%83%81"><![CDATA[일상]]></category>
		<category domain="post_tag" nicename="%ec%9e%90%eb%a7%88%eb%a6%b0"><![CDATA[자마린]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1488168201;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3171;}i:1;a:1:{s:2:"id";i:61;}i:2;a:1:{s:2:"id";i:4951;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[4651]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_dont_email_post_to_subs]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1488168201;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:3171;}i:1;a:1:{s:2:"id";i:61;}i:2;a:1:{s:2:"id";i:4951;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[4651]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_dont_email_post_to_subs]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Azure에 Elastic Stack을 빠르게 구축하는 방법</title>
		<link>http://ilseokoh.com/2017/02/11/azure%ec%97%90-elastic-stack%ec%9d%84-%eb%b9%a0%eb%a5%b4%ea%b2%8c-%ea%b5%ac%ec%b6%95%ed%95%98%eb%8a%94-%eb%b0%a9%eb%b2%95/</link>
		<pubDate>Sat, 11 Feb 2017 05:27:16 +0000</pubDate>
		<dc:creator><![CDATA[ilseokoh]]></dc:creator>
		<guid isPermaLink="false">http://ilseokoh.com/?p=4791</guid>
		<description></description>
		<content:encoded><![CDATA[요즘 분산형 검색엔진으로 큰 관심을 받고 많이 사용하고 있는 제품이 Elastic사의 <a href="https://www.elastic.co/kr/">Elasticsearch</a> 이다. 기본 검색엔진의 기능, 실시간으로 로그를 쌓고 분석하는 용도 등으로 사용되며 클러스터에 노드를 추가하는 것만으로도 확장이 가능해서 대용량의 시스템 구성에 적합하다. 검색엔진인 Elasticsearch, 데이터 시각화 제품인 Kibana, 데이터를 수집하는 Beats 와 Logstash 가 모여서 Elastic Stack이라는 오픈소스 패키지다. 여기에 구매를 해야하는 <a href="https://www.elastic.co/kr/products/x-pack">X-Pack</a> 제품이 있다.

Azure에서 Elasticsearch를 설치하려면 리눅스 가상머신을 만들면서 가상네트워크를 구성해야 한다. Elasticsearch의 데이터 노드, 클라이언트 노드, 마스터 노드를 설정하고 클러스터를 구성해야 하는데 이 과정이 2-3시간은 걸린다.  보단 쉽고 빠르게 구축하는 방법은 없을까?

<a href="https://azuremarketplace.microsoft.com/ko-kr/marketplace/">Azure에는 마켓플레이스</a>가 있다. 전세계 소프트웨어사, 솔루션사가 자신의 제품을 Azure 마켓플레이스에 올려서 Azure 사용자들이 몇 가지 설명만으로 해당 제품을 쉽게  사용하도록 할 수 있다. <a href="https://azuremarketplace.microsoft.com/ko-kr/marketplace/apps/elastic.elasticsearch?tab=Overview">Elasticsearch 도 Azure Maketplace</a>에 있으니 여기에서 시작하면 매우 빠르게 설치를 할 수 있다. 라이센스는 BYOL (Bring Your Own License)로 별도록 Elastic에서 구매를 하면 된다.

<img class="aligncenter size-large wp-image-4821" src="/wp-content/uploads/2017/02/elasticsearch-azure-marketplace-1024x707.png" alt="" width="640" height="442" />

지금 받기를 누르거나 Azure portal 마켓플레이스에서 검색 후 시작 할 수 있다. 지금 받기를 누르면 Azure Portal이 뜨고 로그인 하면 즉시 설정 화면으로 들어간다. 총 8단계를 거치는데 데이터 노드의 수, 클라이언트 노드의 수, VM 사이즈, 로그인 비밀번호 등의 설정을 해주면 된다. 설정값에 따라 다르겠지만 아래 그림과 같은 구성이 된다.  설정한 노드의 수 만큼 VM들이 만들어지고 가상네트워크와 부하분산기(Load Balancer)가 만들어 진다. 마스터 노드와 데이터노드를 같이 쓸 수 있고 클라이언트 노드는 만들지 않을 수 있다. 그럼 좀더 단순한 구성이 나온다.

&nbsp;

<img class="aligncenter size-full wp-image-4831" src="/wp-content/uploads/2017/02/elasticsearch-azure-diagram.png" alt="" width="974" height="802" />

&nbsp;

Jumpbox를 만들수 있다.  Jumpbox의 용도는 구성된 모든 VM들이 가상네트워크 안에 들어있고 Public IP를 가지지 않기 때문에 SSH 접속을 할 수 없는데 Public IP를 가지고 있는 Jumpbox를 통해서 접속해서 운영을 하는 것이다. Jumpbox를 두는 것이 각각 Public IP를 주는 것보다 보안상 안전하다. 비용을 아끼기 위해서 평소에는 꺼두는 것도 요령이다.

이 전체를 만드는 시간이 15분정도 걸린 것 같다. 이제 인프라가 만들어졌으니 Elasticsearch를 사용하면 된다. 개발만 신경쓰면 된다.

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4791</wp:post_id>
		<wp:post_date><![CDATA[2017-02-11 14:27:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-02-11 05:27:16]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[azure%ec%97%90-elastic-stack%ec%9d%84-%eb%b9%a0%eb%a5%b4%ea%b2%8c-%ea%b5%ac%ec%b6%95%ed%95%98%eb%8a%94-%eb%b0%a9%eb%b2%95]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="azure"><![CDATA[Azure]]></category>
		<category domain="post_tag" nicename="azure"><![CDATA[azure]]></category>
		<category domain="post_tag" nicename="azure-marketplace"><![CDATA[azure marketplace]]></category>
		<category domain="post_tag" nicename="beat"><![CDATA[beat]]></category>
		<category domain="post_tag" nicename="elastic"><![CDATA[elastic]]></category>
		<category domain="post_tag" nicename="elastic-stack"><![CDATA[elastic stack]]></category>
		<category domain="post_tag" nicename="elasticsearch"><![CDATA[elasticsearch]]></category>
		<category domain="post_tag" nicename="kibana"><![CDATA[kibana]]></category>
		<category domain="post_tag" nicename="microsoft"><![CDATA[microsoft]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[4851]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1488170108;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:4951;}i:1;a:1:{s:2:"id";i:2591;}i:2;a:1:{s:2:"id";i:3011;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_dont_email_post_to_subs]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[4851]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1488170108;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:4951;}i:1;a:1:{s:2:"id";i:2591;}i:2;a:1:{s:2:"id";i:3011;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_dont_email_post_to_subs]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Azure SQL Database의 백업과 복구</title>
		<link>http://ilseokoh.com/2017/02/16/azure-sql-database%ec%9d%98-%eb%b0%b1%ec%97%85%ea%b3%bc-%eb%b3%b5%ea%b5%ac/</link>
		<pubDate>Thu, 16 Feb 2017 01:11:10 +0000</pubDate>
		<dc:creator><![CDATA[ilseokoh]]></dc:creator>
		<guid isPermaLink="false">http://ilseokoh.com/?p=4951</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="https://azure.microsoft.com/ko-kr/services/sql-database/">Azure SQL database</a>는 <a href="https://ko.wikipedia.org/wiki/PaaS">PaaS(Platform as a service)</a> 형태의 데이터베이스로 기본 인프라는 Azure가 책임을 지고 사용자는 Database를 생성해서 바로 테이블을 만들고 데이터를 넣어 사용할 수 있다. 요즘은 Database as a Service 라고도 부른다.

아무리 인프라의 운영을 Azure가 책임지는 PaaS 라고 해도 장애가 없다고 장담할 수 없으며 사람의 실수로 인해 데이터가 망가지는 경우는 언제나 발생할 수 있다. 데이터가 문제가 발생하면 비즈니스에 치명적인 영향을 준다. 이런 상황에서 우리가 믿을 건 백업 밖에 없다. Azure SQL database는 PaaS 답게 추가비용 없이 자동으로 백업을 해준다. 자동 백업이 어떻게 진행되는지 그리고 복구는 어떻게 하는지 살펴보자.
<h2>백업</h2>
Azure SQL database의 백업 4가지에 대해서 살펴보자.
<h3><a href="https://docs.microsoft.com/ko-kr/azure/sql-database/sql-database-automated-backups">자동백업</a></h3>
Azure SQL database는 매주 전체 백업을 하고 매시간 증분백업과 5분간격으로 트랜젝션 로그 백업을 <a href="https://docs.microsoft.com/ko-kr/azure/sql-database/sql-database-automated-backups">자동으로 진행한다</a>. 그리고 가격 정책 계층에 따라서 백업의 보존기간이 다른데 기본(Basic)은 7일, 표준(Stadard)와 프리미엄(Premium)은 35일 동안 보존한다. 보존기간 내에는 모든 복원지점에서 복구를 할 수 있다. 보존을 하는 위치는 '쌍을 이루는 데이터센터'에 저장되는데 한국 중부의 데이터베이스라면 한국남부에 일본서버의 데이터베이스라면 일본동부에 저장된다.

Portal에서 백업 진행상황을 보려면 개요 블레이드의 상단에 "복원" 버튼을 누르면 된다. 가장 오래된 복원지점을 확인 할 수있다.

<img class="aligncenter size-large wp-image-4961" src="/wp-content/uploads/2017/02/azure-sql-server-backup-1024x760.jpg" alt="" width="640" height="475" />
<h3><a href="https://docs.microsoft.com/ko-kr/azure/sql-database/sql-database-long-term-retention">장기 백업 보존</a></h3>
대부분의 경우 자동 백업에 7일 또는 35일 보존기간은 적절하지만 상황에 따라서 백업 기간을 더 연장해야하는 경우가 있을 것이다. 이 경우 <a href="https://docs.microsoft.com/ko-kr/azure/sql-database/sql-database-long-term-retention">장기 백업 보존 기능</a>을 활용하면 최대 10년 동안 백업을 보관 할 수 있다. Azure SQL database를 만들때 '데이터베이스 서버'도 만들게 되어 있는데 (아이콘이 조금 다름) 장기 백업 보존은 데이터베이스 서버에 메뉴가 있다. 미리보기 조건에 동의를 먼저하고 <a href="https://docs.microsoft.com/ko-kr/azure/backup/backup-azure-arm-vms">Recovery service vault</a> 자격 증명 모음을 만든 후 데이터 베이스를 선택하고 구성 버튼을 누르면 설정 블레이드가 나온다. 아래 그림은 일본 동부에 1년 동안 보관하는 설정이다.

<img class="aligncenter size-large wp-image-4981" src="/wp-content/uploads/2017/02/azure-sql-long-term-backup-1024x648.jpg" alt="" width="640" height="405" />
<h3><a href="https://docs.microsoft.com/ko-kr/azure/sql-database/sql-database-geo-replication-overview">활성 지역 복제</a></h3>
<a href="https://docs.microsoft.com/ko-kr/azure/sql-database/sql-database-geo-replication-overview">활성지역 복제(Active Geo-Replication)</a>는 사실 백업이 아니라 Replication이다. 즉 다른 데이터센터에 똑같은 보조 데이터베이스를 만들고 지속적으로 싱크를 한다. 만약 원본 데이터베이스에 문제가 생기면 5초 이내에 복제된 데이터베이스로 마스터가 이전되어 빠르게 복구(Fail over) 된다.

Azure SQL database에서 "지역에서 복제"를 누르면 설정 할 수 있고 역시 '쌍으로 연결된 데이터센터'가 보라색으로 추천된다. 지역을 선택하고 해당 지역에 데이터베이스 서버를 만들어주면 자동으로 보조 데이터베이스를 만들어 싱크한다. 보조 데이터베이스를 읽기가능으로 설정해놓으면 데이터 읽기를 분산해줄 수도 있다.

<img class="aligncenter size-large wp-image-4971" src="/wp-content/uploads/2017/02/azure-sql-geo-dr-1024x922.jpg" alt="" width="640" height="576" />
<h3>수동으로 백업</h3>
<a href="https://docs.microsoft.com/ko-kr/azure/sql-database/sql-database-export">데이터베이스 내보내기 기능을 이용하여 BACPAC 파일로 수동 백업</a>이 가능하다. 백업된 파일은 스토리지에 저장된다. 이 방법은 데이터 마이그레이션 직전이나 대량으로 데이터가 생성되는 등 큰 변화의 전후 시점에 수행해 놓으면 좋다. 라이브 데이터베이스에서 내보내기를 하기가 부담스럽다면 복사를 하고 내보내기를 하면된다. 복사는 빠르게 이뤄진다. 내보내기는 크기에 따라서 오래걸릴 수 있다. 가끔 복사를 하지 않고 만든 BACPAC 파일이 복구 과정에서 오류를 발생하는 경우가 있으므로 복사 후 내보내기를 하는게 좋겠다. 이 기능은 포탈에서도 가능하고, SSMS(SQL Server Management Server), PowerShell로도 가능하다.

기존 구포탈에서 제공되었던 Azure SQL Database Automated Export 기능은 2017년 3월 1일로 서비스가 종료되므로 사용하지 않는 것이 좋다.

&nbsp;
<h2>복구</h2>
3가지 시나리오로 백업된 데이터베이스를 복구해보자.

자세한 내용은 관련문서 <a href="https://docs.microsoft.com/ko-kr/azure/sql-database/sql-database-get-started-backup-recovery">SQL Database 백업 및 복원시작 문서</a>를 참조 바란다.
<h3>1. 실수로 Azure SQL database를 삭제했을 때</h3>
멀쩡한 데이터베이스를 삭제하는 일이 있을 수 없는 상황이지만 이런일이 실제로 일어난다. 데이터베이스만 삭제 했다면 금방 복구 할 수 있다. '데이터베이스 서버'의 개요 블레이드에 보면 삭제된 데이터베이스라는 메뉴가 보이는데 이 메뉴를 열어보면 삭제된 데이터베이스를 볼 수 있다. 이 백업을 선택하고 이름을 다시 정해준 후 복원하면 된다. 데이터베이스 서버를 삭제하면 이 방법을 쓸 수 없다. 만약 데이터베이스를 삭제한 상황이라면 최대한 빨리 Azure의 기술지원 티켓을 끊어서 서비스를 요청해야 한다.

<img class="aligncenter size-large wp-image-4991" src="/wp-content/uploads/2017/02/azure-sql-deleted-db-1024x907.jpg" alt="" width="640" height="567" />

&nbsp;
<h3>2. 데이터가 깨져서 이전 백업으로 돌아가야 할 때</h3>
어떤 이유에 의해서 또는 실수로 데이터 자체에 문제가 생길 수 있다. User 테이블을 지워버린 상황이 그런 예다. 데이터베이스를 선택하고 '개요' 블레이드에서 복원 버튼을 누르면 복원 메뉴가 나온다. 가장 오래된 복원 지점을 확인하고 원하는 날짜와 시각을 정해준 다음 데이터베이스 이름을 지정한 후 확인을 누르면 새로운 데이터베이스가 생성되면서 복원된다. 장기 백업 보존을 설정했다면 Azure 자격 증명 모음 백업에서 원하는 백업을 선택한 후에 확인을 누른다.
<h3>3. 데이터센터의 데이터베이스 서비스에 장애가 발생하면</h3>
활성지역 복제를 설정해 놨다면 보조 지역을 선택하고 '페일오버' 버튼을 누르면 5초 이내에 보조 데이터베이스가 주 데이터베이스로 변경되어 서비스된다. 그런 후에 애플리케이션에서 Connection String을 변경해서 Fail over된 데이터베이스에 연결되도록 설정해서 마무리한다.

<img class="aligncenter size-large wp-image-5001" src="/wp-content/uploads/2017/02/azure-sql-fail-over-1024x673.jpg" alt="" width="640" height="421" />

활성지역 복제가 아니라면 복원의 시점을 잘 생각해야 한다. 장애가 금방 복구될 예정이거나 문제를 금방 해결 할 수 있다면 기다리는게 더 좋은 선택일 수 있다.

백업이 있다면 데이터베이스를 새로 만들면서 복원을 할 수 있다. 데이터베이스 만들기 블레이드에서 소스선택을 '백업'으로 지정하고 백업을 찾아서 만들 수 있다.

<img class="aligncenter size-large wp-image-5021" src="/wp-content/uploads/2017/02/azure-sql-new-db-from-backup-1024x627.jpg" alt="" width="640" height="392" />
<h3>4. <a href="https://docs.microsoft.com/ko-kr/azure/sql-database/sql-database-disaster-recovery-drills">재해복구 훈련</a></h3>
운영중인 서비스에 데이터가 문제가 생겨 장애가 발생하면 마음이 급해지고 힘든 상황이 닥치게 된다. 마음을 가다듬고 복구에 임하려면 평소에 <a href="https://docs.microsoft.com/ko-kr/azure/sql-database/sql-database-disaster-recovery-drills">복구훈련</a>이 필요하다. 일분 일초가 급한상황에서 구글에서 문서를 찾는다면 그게 눈에 들어올리도 없고 정확한 판단이 어려울 수 있다. 프로덕션 환경의 데이터베이스를 복사해서 테스트 환경을 꾸밀 수 있다.

관련문서: <a href="https://docs.microsoft.com/ko-kr/azure/sql-database/sql-database-business-continuity">Azure SQL 데이터베이스의 비즈니스 연속성 개요</a>

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4951</wp:post_id>
		<wp:post_date><![CDATA[2017-02-16 10:11:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-02-16 01:11:10]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[azure-sql-database%ec%9d%98-%eb%b0%b1%ec%97%85%ea%b3%bc-%eb%b3%b5%ea%b5%ac]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="azure"><![CDATA[Azure]]></category>
		<category domain="post_tag" nicename="azure"><![CDATA[azure]]></category>
		<category domain="post_tag" nicename="azure-sql-server"><![CDATA[azure sql server]]></category>
		<category domain="post_tag" nicename="cloud"><![CDATA[cloud]]></category>
		<category domain="post_tag" nicename="database"><![CDATA[database]]></category>
		<category domain="post_tag" nicename="sql-database"><![CDATA[sql database]]></category>
		<category domain="post_tag" nicename="sql-server"><![CDATA[sql server]]></category>
		<category domain="post_tag" nicename="%eb%8d%b0%ec%9d%b4%ed%84%b0%eb%b2%a0%ec%9d%b4%ec%8a%a4"><![CDATA[데이터베이스]]></category>
		<category domain="post_tag" nicename="%eb%94%94%eb%b9%84"><![CDATA[디비]]></category>
		<category domain="post_tag" nicename="%eb%a7%88%ec%9d%b4%ed%81%ac%eb%a1%9c%ec%86%8c%ed%94%84%ed%8a%b8"><![CDATA[마이크로소프트]]></category>
		<category domain="post_tag" nicename="%ec%95%a0%ec%a0%80"><![CDATA[애저]]></category>
		<category domain="post_tag" nicename="%ed%81%b4%eb%9d%bc%ec%9a%b0%eb%93%9c"><![CDATA[클라우드]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1488170107;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:4281;}i:1;a:1:{s:2:"id";i:3911;}i:2;a:1:{s:2:"id";i:4791;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[5091]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_dont_email_post_to_subs]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1488170107;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:4281;}i:1;a:1:{s:2:"id";i:3911;}i:2;a:1:{s:2:"id";i:4791;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[5091]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_dont_email_post_to_subs]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>GPU가 탑재된 Azure 가상컴퓨터 N 시리즈</title>
		<link>http://ilseokoh.com/2017/03/10/gpu%ea%b0%80-%ed%83%91%ec%9e%ac%eb%90%9c-azure-%ea%b0%80%ec%83%81%ec%bb%b4%ed%93%a8%ed%84%b0-n-%ec%8b%9c%eb%a6%ac%ec%a6%88/</link>
		<pubDate>Fri, 10 Mar 2017 08:18:08 +0000</pubDate>
		<dc:creator><![CDATA[ilseokoh]]></dc:creator>
		<guid isPermaLink="false">http://ilseokoh.com/?p=5104</guid>
		<description></description>
		<content:encoded><![CDATA[Azure의 가상컴퓨터 중에 NVIDIA GPU가 탑재된 N 시리즈 가상컴퓨터가 있다. 비주얼 시뮬레이션, 다이나믹 랜더링, 요즘 많이 얘기되고 있는 딥러닝 등 GPU가 많이 쓰이는 작업에 사용할 수 있는 가상컴퓨터다. NC 시리즈는 NVIDIA Tesla K80 GPU가 달려있고 NV 시리즈는 NVIDIA Tesla M60 GPU가 달려있다. 각 시리즈의 용도와 사용사례는 <a href="https://azure.microsoft.com/en-us/blog/azure-n-series-general-availability-on-december-1/">Azure N-Series: General availability on December 1</a> 글을 참조 바란다.

이 글에서는 실제로 N 시리즈 가상컴퓨터를 만들면서 얻은 정보에 대한 것이다.
<h2>사용 가능한 지역</h2>
아직은 모든 Azure 데이터 센터에서 사용 가능하지 않다.
<ul>
 	<li>NC 시리즈 사용 가능 지역 - East US, North Central US, South Central US, Southeast Asia, West Europe, South Central US</li>
 	<li>NV 시리즈 사용 가능지역 - South Central US, East US</li>
</ul>
<h2>HDD 만 지원</h2>
아직 Premium(SSD) 디스크 지원을 하지 않는다. 따라서 Azure Portal에서 N시리즈 가상컴퓨터를 생성할때 <em>디스크 타입을 HDD로 설정해야 N시리즈 타입이 보이고 선택할 수 있다</em>.
데이터 디스크도 SSD를 지원하지 않아서 HDD를 붙여야 한다.
<h2>현재 지원하는 OS</h2>
<ul>
 	<li>Windows Server 2012 R2</li>
 	<li>Windows Server 2016</li>
 	<li>Ubuntu 16.04 LTS - NC 시리즈만 지원</li>
</ul>
<h2>NVIDA 디바이스 드라이버를 별도로 설치</h2>
가상컴퓨터를 만들 때 사용하는 이미지는 NVIDIA 디바이스 드라이버가 설치가 안된 이미지이기 때문에 N시리즈 가상컴퓨터를 생성 후에 별도로 드라이버를 설치해야 한다. 설치는 아래 문서에 다운로드 링크와 설치방법이 자세히 나와 있다. 참고로 NC / NV 시리즈를 헷갈려서 잘 못 설치했더니 부팅이 안된다.
<ul>
 	<li><a href="https://docs.microsoft.com/ko-kr/azure/virtual-machines/virtual-machines-windows-n-series-driver-setup">윈도우 드라이버 셋업</a></li>
 	<li><a href="https://docs.microsoft.com/ko-kr/azure/virtual-machines/virtual-machines-linux-n-series-driver-setup">리눅스 드라이버 셋업</a></li>
</ul>
<img class="alignnone size-full wp-image-5105" src="/wp-content/uploads/2017/03/azure-n-series-driver.png" alt="" width="1442" height="753" />

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5104</wp:post_id>
		<wp:post_date><![CDATA[2017-03-10 17:18:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-03-10 08:18:08]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[gpu%ea%b0%80-%ed%83%91%ec%9e%ac%eb%90%9c-azure-%ea%b0%80%ec%83%81%ec%bb%b4%ed%93%a8%ed%84%b0-n-%ec%8b%9c%eb%a6%ac%ec%a6%88]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="azure"><![CDATA[Azure]]></category>
		<category domain="post_tag" nicename="gpu"><![CDATA[GPU]]></category>
		<category domain="post_tag" nicename="n-series"><![CDATA[N series]]></category>
		<category domain="post_tag" nicename="vm"><![CDATA[VM]]></category>
		<category domain="post_tag" nicename="%ea%b0%80%ec%83%81%ec%bb%b4%ed%93%a8%ed%84%b0"><![CDATA[가상컴퓨터]]></category>
		<category domain="post_tag" nicename="%ec%95%a0%ec%a0%80"><![CDATA[애저]]></category>
		<category domain="post_tag" nicename="%ed%81%b4%eb%9d%bc%ec%9a%b0%eb%93%9c"><![CDATA[클라우드]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[5106]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>56</wp:comment_id>
			<wp:comment_author><![CDATA[harry]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[kjun0909@naver.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[203.226.207.213]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2017-10-24 11:05:14]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2017-10-24 02:05:14]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[안녕하세요?
텐서 플로우로 가상컴프터상에서 딥러닝을 구현하고 싶은데,기존 깃허브의 오픈소스를 가져와서  에져 가상컴퓨터에서 돌릴수가 있나요?
혹여 비용은 어떻게 되는지 궁금합니다.
감사합니다.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Azure Automation으로 퇴근시간에 자동으로 가상컴퓨터 끄기</title>
		<link>http://ilseokoh.com/2017/04/06/azure-automation-turn-off-vm/</link>
		<pubDate>Thu, 06 Apr 2017 10:16:12 +0000</pubDate>
		<dc:creator><![CDATA[ilseokoh]]></dc:creator>
		<guid isPermaLink="false">http://ilseokoh.com/?p=5118</guid>
		<description></description>
		<content:encoded><![CDATA[클라우드 컴퓨팅 환경에서는 비용을 최소화 하기 위한 노력이 필요하다. 가끔 스토리지에 쓰지 않는 파일이나 백업이 들어 있다던지 테스트로 만든 가상머신들이 삭제되지 않고 쌓여 있는 걸 볼 수 있다. 신경써서 관리 하지 않으면 어느 순간 "그냥 서버사서 쓰는게 더 싼거 아니야"라는 의견이 나올 수도 있다. 클라우드 서비스 비용을 아끼려는 노력이 몸에 베인 팀에서는 가끔 밤에 테스트용 서버는 자동으로 끌 수 없는지 문의가 오기도 한다. 이 글에서 Azure Automation을 이용해서 저녁 7시에 특정 Resource Group에 들어 있는 테스트용 가상 컴퓨터들을 Stop 시켜 밤새 쓸데없이 나가는 비용을 줄이는 방법에 대해서 알아보자.
<h3>Azure Automation</h3>
Azure Automation은 Azure를 관리할 때 자주 그리고 수동으로 해야하는 일을 자동화 시키는데 유용하다. 예를들어 밤시간에는 방문자가 적은 웹 애플리케이션이라면 새벽시간에 낮은 가격대로 내렸다가 다시 아침에는 원래 가격으로 올린다던지 특정 리소스에서 발생하는 로그를 모으거나 Azure SQL 데이터베이스의 쿼리를 수행해서 데이터를 정리하는 등 반복적인 관리작업들이 있다. Azure Automation은 이런 작업들을 Powershell을 이용하여 수행하며 그래픽 툴을 제공하기 때문에 PowerShell 코드 작성을 최소화해서 구현해 낼 수 있다. Runbook이라는 작업들의 집합 단위로 수행되는데 Runbook 갤러리가 있어서 이미 만들어져 있는 Runbook을 가져다 쓸 수 있다. Runbook을 어떻게 만들고 실행하는지는 "<a href="https://docs.microsoft.com/ko-kr/azure/automation/automation-first-runbook-graphical">내 첫 번째 그래픽 Runbook</a>" 문서를 천천히 따라하면 전체 내용을 파악할 수 있다.
<h3>Azure Automation 만들기</h3>
리소스그룹(Resource Group)을 하나 만들어서 Azure Automation 계정을 하나 만들자. Automation 계정과 Runbook을 모두 하나의 리소스그룹에 관리하면 깔끔하다. 현재(2017-04-06)은 Korea Central이나 Korea South 지역에는 없다. 다른 지역에 만들자. 트래픽이 오가는 리소스는 아니기 때문에 다른 지역이라도 비용이 크게 발생하지는 않을 것이다. 만들때 꼭 "Azure 실행 계정 만들기"를 예로 선택해야 한다. 실행 계정은 PowerShell이 Azure에서 일을 하기 위해서 로그인을 자동으로 해주는 역할을 한다.

<a href="/wp-content/uploads/2017/04/create-automation.png"><img class="size-large wp-image-5119 aligncenter" src="/wp-content/uploads/2017/04/create-automation-1024x552.png" alt="" width="640" height="345" /></a>

&nbsp;
<h3>갤러리에서 "StopAzureV2Vm" Runbook 가져오기</h3>
Automation이 만들어 졌다. VM을 특정 시간에 자동으로 Stop 시키는 Runbook을 갤러리에서 찾아서 가져오자. 새로만든 Automation에서 Runbook을 선택한 후 "갤러리 찾아보기"를 눌러 "Stop Azure V2 VMs"를 선택해서 "가져오기"를 눌러 가져온다. 이 Runbook은 그래픽 타입이다. 이렇게 가져오면 작성상태가 "새로 만들기"로 표시되고 아직 게시되지 않은 상태다.

<a href="/wp-content/uploads/2017/04/automation-gallery.png"><img class="size-large wp-image-5120 aligncenter" src="/wp-content/uploads/2017/04/automation-gallery-1024x384.png" alt="" width="640" height="240" /></a>
<h3>StopAzureV2Vm 설정</h3>
가져온 Runbook을 눌러서 상세정보를 표시하고 "편집" 버튼을 누른다. 이 화면은 Runbook을 편집하는 화면이고 오른쪽에 순서도 처럼 생긴 프로세스가 표시되고 왼쪽에 사용할 수 있는 PowerShell Cmdlet 등이 표시된다. 왼쪽의 라이브러리의 항목을 그래픽화면에 추가하고 화살표를 연결한 후 파라미터를 지정하는 식으로 편집 할 수 있다. 지금은 잘 만들어진 StopAzureV2Vm Runbook을 그대로 사용할 것이기 때문에 편집하지 않고 바로 "게시" 버튼을 눌러 게시한다.

<a href="/wp-content/uploads/2017/04/publish-automation.png"><img class="size-large wp-image-5121 aligncenter" src="/wp-content/uploads/2017/04/publish-automation-1024x598.png" alt="" width="640" height="374" /></a>
<h3>Runbook 테스트</h3>
게시된 화면에서 시작을 누르면 바로 실행이 된다. 테스트로 시작버튼을 눌러 실행해보자. 매개변수를 입력하게 되어 있다. 특정 리소스 그룹에 들어있는 모든 VM을 끄고 싶으면 RESOURCEGROUPNAME에 입력하고 특정 VM을 끄고 싶으면 VM이름을 입력한다. AZURECONNECTIONASSETNAME 은 기본값으로 남겨둡니다. 기본값으로 Azure에 로그인 됩니다. "확인"을 누르면 큐에서 대기하다가 실행이 된다. 완료되면 출력을 눌러 로그를 확인해본다. 문제없이 잘 작동한다면 이제 특정 시간에 실행 되도록 스케줄링만 해주면 된다.

<a href="/wp-content/uploads/2017/04/start-automation.png"><img class="size-large wp-image-5122 aligncenter" src="/wp-content/uploads/2017/04/start-automation-1024x566.png" alt="" width="640" height="354" /></a>
<h3>Runbook 실행 일정 설정</h3>
"일정"버튼을 눌르고 "일정추가"버튼을 누른다. 매일 오후 7시에 실행이 되도록 그림과 같이 설정한다. 그리고 매개 변수에 리소스그룹이름이나 가상컴퓨터 이름을 입력한다. 모든 설정이 끝났다. 내일 아침에 잘 실행되었는지 확인 하면 된다. 모든 개발자와 시스템 엔지니어들이 6시에 퇴근하고 이렇게 설정된 Automation이 혼자 실행되길 바래본다.

<a href="/wp-content/uploads/2017/04/scheduling-atomatoin.png"><img class="size-large wp-image-5123 aligncenter" src="/wp-content/uploads/2017/04/scheduling-atomatoin-1024x514.png" alt="" width="640" height="321" /></a>

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5118</wp:post_id>
		<wp:post_date><![CDATA[2017-04-06 19:16:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-04-06 10:16:12]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[azure-automation-turn-off-vm]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="automation"><![CDATA[automation]]></category>
		<category domain="category" nicename="azure"><![CDATA[Azure]]></category>
		<category domain="post_tag" nicename="azure"><![CDATA[azure]]></category>
		<category domain="post_tag" nicename="vm-%eb%81%84%ea%b8%b0"><![CDATA[VM 끄기]]></category>
		<category domain="post_tag" nicename="%eb%b9%84%ec%9a%a9"><![CDATA[비용]]></category>
		<category domain="post_tag" nicename="%eb%b9%84%ec%9a%a9-%ec%95%84%eb%81%bc%ea%b8%b0"><![CDATA[비용 아끼기]]></category>
		<category domain="post_tag" nicename="%ec%95%a0%ec%a0%80"><![CDATA[애저]]></category>
		<category domain="post_tag" nicename="%ed%81%b4%eb%9d%bc%ec%9a%b0%eb%93%9c-%ec%bb%b4%ed%93%a8%ed%8c%85"><![CDATA[클라우드 컴퓨팅]]></category>
		<category domain="post_tag" nicename="%ed%87%b4%ea%b7%bc-%ed%9b%84-vm-%ec%9e%90%eb%8f%99%ec%9c%bc%eb%a1%9c-%eb%81%84%ea%b8%b0"><![CDATA[퇴근 후 VM 자동으로 끄기]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[5125]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[azure-automation%ec%9c%bc%eb%a1%9c-%ed%87%b4%ea%b7%bc%ec%8b%9c%ea%b0%84%ec%97%90-%ec%9e%90%eb%8f%99%ec%9c%bc%eb%a1%9c-%ea%b0%80%ec%83%81%ec%bb%b4%ed%93%a8%ed%84%b0-%eb%81%84%ea%b8%b0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>퇴근시간에 자동으로 가상컴퓨터 끄기 2</title>
		<link>http://ilseokoh.com/2017/04/08/%ed%87%b4%ea%b7%bc%ec%8b%9c%ea%b0%84%ec%97%90-%ec%9e%90%eb%8f%99%ec%9c%bc%eb%a1%9c-%ea%b0%80%ec%83%81%ec%bb%b4%ed%93%a8%ed%84%b0-%eb%81%84%ea%b8%b0-2/</link>
		<pubDate>Fri, 07 Apr 2017 16:48:37 +0000</pubDate>
		<dc:creator><![CDATA[ilseokoh]]></dc:creator>
		<guid isPermaLink="false">http://ilseokoh.com/?p=5134</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://ilseokoh.com/2017/04/06/azure-automation%ec%9c%bc%eb%a1%9c-%ed%87%b4%ea%b7%bc%ec%8b%9c%ea%b0%84%ec%97%90-%ec%9e%90%eb%8f%99%ec%9c%bc%eb%a1%9c-%ea%b0%80%ec%83%81%ec%bb%b4%ed%93%a8%ed%84%b0-%eb%81%84%ea%b8%b0/">Azure Atomation으로 가상컴퓨터 자동으로 종료할 수 있다는 포스트</a>를 작성한 후 신고가 들어왔다. 이미 VM에 그런 기능이 있었다. 포탈에서 너무 쉽게 제공이 되고 있었다. 괜히 Automation으로 어렵게 풀지 말고 이 메뉴를 이용하면 되겠다.

<a href="/wp-content/uploads/2017/04/azure-vm-auto-shutdown.png"><img class="size-large wp-image-5135 aligncenter" src="/wp-content/uploads/2017/04/azure-vm-auto-shutdown-1024x611.png" alt="" width="640" height="382" /></a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5134</wp:post_id>
		<wp:post_date><![CDATA[2017-04-08 01:48:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-04-07 16:48:37]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%ed%87%b4%ea%b7%bc%ec%8b%9c%ea%b0%84%ec%97%90-%ec%9e%90%eb%8f%99%ec%9c%bc%eb%a1%9c-%ea%b0%80%ec%83%81%ec%bb%b4%ed%93%a8%ed%84%b0-%eb%81%84%ea%b8%b0-2]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="auto-shutdown"><![CDATA[auto shutdown]]></category>
		<category domain="category" nicename="azure"><![CDATA[Azure]]></category>
		<category domain="post_tag" nicename="azure"><![CDATA[azure]]></category>
		<category domain="post_tag" nicename="azure-vm-shutdown"><![CDATA[azure vm shutdown]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>넙적 사슴벌레 산란</title>
		<link>http://ilseokoh.com/2017/04/22/%eb%84%99%ec%a0%81-%ec%82%ac%ec%8a%b4%eb%b2%8c%eb%a0%88-%ec%82%b0%eb%9e%80/</link>
		<pubDate>Sat, 22 Apr 2017 05:53:58 +0000</pubDate>
		<dc:creator><![CDATA[ilseokoh]]></dc:creator>
		<guid isPermaLink="false">http://ilseokoh.com/?p=5138</guid>
		<description></description>
		<content:encoded><![CDATA[집에서 키우는 넙적 사슴벌레가 산란을 했습니다. 무려 18개의 알을 낳았어요. 그 중에 이미 4 마리는 부화를 해서 1령 애벌레가 되었습니다. 둘째 동현이가 지난 크리스마스 선물로 받은 사슴벌레입니다. 새로운 생명에 대한 경이로움에 제가 더 신났어요.

오늘 집근처 <a href="http://www.stagbeetles.com/">충우 박물관</a>에서 본격적으로 알을 키우기 위한 재료들을 사와서 관리를 시작했습니다. 사슴벌레 애벌레는 균사에서 키울 수도 있고 톱밥에서 키울 수도 있어요. 이미 부화한 첫째, 둘째 애벌레는 균사에서 키우고 나머지 알들은 톱밥으로 키우기로 했습니다.

[caption id="attachment_5141" align="aligncenter" width="640"]<a href="/wp-content/uploads/2017/04/IMG_8606.jpg"><img class="size-large wp-image-5141" src="/wp-content/uploads/2017/04/IMG_8606-1024x710.jpg" alt="" width="640" height="444" /></a> 넙적사슴벌레 알[/caption]

[caption id="attachment_5142" align="aligncenter" width="640"]<a href="/wp-content/uploads/2017/04/IMG_8597-2.jpg"><img class="wp-image-5142 size-large" src="/wp-content/uploads/2017/04/IMG_8597-2-1024x734.jpg" alt="" width="640" height="459" /></a> 첫번째 두번째 애벌레[/caption]

[caption id="attachment_5143" align="aligncenter" width="640"]<a href="/wp-content/uploads/2017/04/IMG_8599.jpg"><img class="size-large wp-image-5143" src="/wp-content/uploads/2017/04/IMG_8599-1024x636.jpg" alt="" width="640" height="398" /></a> 첫번째 애벌레를 균사통에[/caption]

[caption id="attachment_5144" align="aligncenter" width="640"]<a href="/wp-content/uploads/2017/04/IMG_8604.jpg"><img class="wp-image-5144 size-large" src="/wp-content/uploads/2017/04/IMG_8604-1024x871.jpg" alt="" width="640" height="544" /></a> 톱밥으로 사육할 애벌레[/caption]

[caption id="attachment_5145" align="aligncenter" width="640"]<a href="/wp-content/uploads/2017/04/IMG_8602.jpg"><img class="size-large wp-image-5145" src="/wp-content/uploads/2017/04/IMG_8602-1024x873.jpg" alt="" width="640" height="546" /></a> 세번째로 부화한 애벌레[/caption]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5138</wp:post_id>
		<wp:post_date><![CDATA[2017-04-22 14:53:58]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-04-22 05:53:58]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%eb%84%99%ec%a0%81-%ec%82%ac%ec%8a%b4%eb%b2%8c%eb%a0%88-%ec%82%b0%eb%9e%80]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="%eb%84%99%ec%a0%81%ec%82%ac%ec%8a%b4%eb%b2%8c%eb%a0%88"><![CDATA[넙적사슴벌레]]></category>
		<category domain="post_tag" nicename="%ec%82%ac%ec%8a%b4%eb%b2%8c%eb%a0%88"><![CDATA[사슴벌레]]></category>
		<category domain="category" nicename="%ec%9d%bc%ec%83%81"><![CDATA[일상]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[5140]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Xamarin.iOS 빌드 오류 - The root assembly conflicts with another assembly</title>
		<link>http://ilseokoh.com/2017/04/25/xamarin-ios-build-error-the-root-assembly-conflicts-with-another-assembly/</link>
		<pubDate>Tue, 25 Apr 2017 11:10:31 +0000</pubDate>
		<dc:creator><![CDATA[ilseokoh]]></dc:creator>
		<guid isPermaLink="false">http://ilseokoh.com/?p=5156</guid>
		<description></description>
		<content:encoded><![CDATA[4시간을 고생했기 때문에 공유를 안할 수가 없다. 이 오류는 단지 2017년 4월 25일 경에 발생한 내용이고 시간이 가면 자연스럽게 사라질 오류다. 보다 상세한 내용은 <a href="https://bugzilla.xamarin.com/show_bug.cgi?id=54993">Xamarin 버그 54993</a> 을 참조 바란다. 여기에서 사용한 방법외에 다른 한가지 방법이 더 나온다.

Visual Studio 2017를 최신으로 업데이트하고 Visual Studio for Mac을 다시 최신버전으로 업데이트 하니 Xamarin iOS 빌드가 안된다. 캡쳐를 해놓지는 못했는데 대충 이런 에러다.
<blockquote> The root assembly conflicts...  with another assembly</blockquote>
좀 더 자세히 살펴보면 Windows 의 Visual Studio 2017에는 Xamarin.iOS 10.8.0.175 가 설치되어 있고 Mac의 Visual Studio for Mac에는 Xamarin.iOS 10.10.0 이 설치되어 있다. 그럼 결론은 두개의 버전을 맞춰주면 해결이 된다.

그런데 이게 불가능하다.  Xamarin 업데이트를 할때  Alpha, Beta, Stable 이렇게 3가지 채널로 배포한다.  10.8.0.175는 Stable 채널에 있고 10.10.0 은 Alpha 채널에 있다. 그런데 하필이며 지금 Visual Studio 2017은 Stable 버전만 업데이트 가능하고 Alpha 버전을 업데이트 못한다. 반대로 Visual Studio for Mac은 현재 Alpah버전만 업데이트 가능하고 Stable 버전은 업데이트 못한다.

해결 방법
<ol>
 	<li>Mac에 10.8.0.175 버전을 별도로 설치한다. <a href="https://dl.xamarin.com/MonoTouch/Mac/xamarin.ios-10.8.0.175.pkg">10.8.0.175 다운로드</a></li>
 	<li>Visual Studio for Mac 의 업데이트에서 10.10.0을 설치하려고 할 텐데 설치하지 않는다.</li>
</ol>
알고보면 아무것도 아닌데, 검색 열심히 하면 찾을 수 있었는데 다급한 마음에 Mac을 초기화 했다.

<img class="size-full wp-image-5158 aligncenter" src="/wp-content/uploads/2017/04/vs-2017-xamarin-version.png" alt="" width="1343" height="983" />

[caption id="attachment_5161" align="aligncenter" width="2528"]<img class="size-full wp-image-5161" src="/wp-content/uploads/2017/04/vs-mac-xamarin-update.png" alt="" width="2528" height="1544" /> Visual Studio for Mac의 Xamarin.iOS 업데이트가 있어도 참아야 한다.[/caption]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5156</wp:post_id>
		<wp:post_date><![CDATA[2017-04-25 20:10:31]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-04-25 11:10:31]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[xamarin-ios-build-error-the-root-assembly-conflicts-with-another-assembly]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="build-error"><![CDATA[build error]]></category>
		<category domain="post_tag" nicename="xamarin"><![CDATA[xamarin]]></category>
		<category domain="post_tag" nicename="xamarin-error"><![CDATA[xamarin error]]></category>
		<category domain="post_tag" nicename="xamarin-ios"><![CDATA[xamarin.ios]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[미분류]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[Cognitive Service] Bing Image Search 사용법</title>
		<link>http://ilseokoh.com/2017/04/26/cognitive-service-bing-image-search/</link>
		<pubDate>Wed, 26 Apr 2017 04:22:14 +0000</pubDate>
		<dc:creator><![CDATA[ilseokoh]]></dc:creator>
		<guid isPermaLink="false">http://ilseokoh.com/?p=5164</guid>
		<description></description>
		<content:encoded><![CDATA[마이크로소프트 Cognitive Services 중에 Bing Image Search 사용법에 대한 내용이고 상세한 내용은 <a href="https://msdn.microsoft.com/en-us/library/dn760784.aspx">가이드 문서</a>를 참고하면 된다.
<h3>키 발급 절차</h3>
<ol>
 	<li>Cognitive Service API 사이트에 접속</li>
 	<li>마이크로소프트 계정으로 로그인</li>
 	<li>로그인하면 Subscription 페이지가 보이는데 여기서 키를 발급 받는다.</li>
 	<li>(무료로 제공되는 범위를 넘어서면 <a href="https://portal.azure.com">Azure Portal</a> 에서 키를 만들어서 사용하면 Azure 구독과 계정으로 과금된다.)</li>
</ol>
<img class="size-large wp-image-5165 aligncenter" src="/wp-content/uploads/2017/04/bing-search-key-1024x695.png" alt="" width="640" height="434" />
<h3>사용법</h3>
HTTP Get 요청을 보내면 바로 결과를 받을 수 있다.
<ul>
 	<li>Base URL: https://api.cognitive.microsoft.com/bing/v5.0/images/search</li>
 	<li>HTTP Method: GET</li>
 	<li>Query String
<ul>
 	<li>q : {검색어}</li>
 	<li>mkt: ko-kr, en-us</li>
 	<li>count: {요청개수}</li>
 	<li>offset: {시작번호}</li>
 	<li>이외 상세 내용은 <a href="https://msdn.microsoft.com/en-us/library/dn760784.aspx">문서 </a>참조</li>
</ul>
</li>
 	<li>Header: Ocp-Apim-Subscription-Key / {발급받은 Key}</li>
</ul>
샘플 URL: https://api.cognitive.microsoft.com/bing/v5.0/images/search?q=2017+대선후보&amp;count=20&amp;offset=0&amp;mkt=ko-kr
<h3>테스트 및 결과</h3>
테스트는 PostMan 같은 툴을 사용하면 된다. 결과는 Json으로 나온다.

<a href="/wp-content/uploads/2017/04/bing-search-postman-test.png"><img class="size-large wp-image-5167 aligncenter" src="/wp-content/uploads/2017/04/bing-search-postman-test-1024x628.png" alt="" width="640" height="393" /></a>

복잡한 Json 결과 샘플을 보는 것 보다 <a href="http://ilseokoh.com/2017/04/26/json-xml-to-cshap-class/">Json을 C# 클래스로 변환하는 방법</a>을 사용하여 구조를 살펴보면 다음과 같다.
<pre class="prettyprint">public class Instrumentation
{
    public string pageLoadPingUrl { get; set; }
}

public class Thumbnail
{
    public int width { get; set; }
    public int height { get; set; }
}

public class Image
{
    public string name { get; set; }
    public string webSearchUrl { get; set; }
    public string thumbnailUrl { get; set; }
    public string datePublished { get; set; }
    public string contentUrl { get; set; }
    public string hostPageUrl { get; set; }
    public string contentSize { get; set; }
    public string encodingFormat { get; set; }
    public string hostPageDisplayUrl { get; set; }
    public int width { get; set; }
    public int height { get; set; }
    public Thumbnail thumbnail { get; set; }
    public string imageInsightsToken { get; set; }
    public string imageId { get; set; }
    public string accentColor { get; set; }
}

public class RootObject
{
    public string _type { get; set; }
    public Instrumentation instrumentation { get; set; }
    public string webSearchUrl { get; set; }
    public int totalEstimatedMatches { get; set; }
    public List&lt;Image&gt; Images{ get; set; }
    public int nextOffsetAddCount { get; set; }
    public bool displayShoppingSourcesBadges { get; set; }
    public bool displayRecipeSourcesBadges { get; set; }
}</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5164</wp:post_id>
		<wp:post_date><![CDATA[2017-04-26 13:22:14]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-04-26 04:22:14]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[cognitive-service-bing-image-search]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="azure"><![CDATA[Azure]]></category>
		<category domain="post_tag" nicename="bing-api"><![CDATA[bing api]]></category>
		<category domain="post_tag" nicename="bing-image-search"><![CDATA[bing image search]]></category>
		<category domain="post_tag" nicename="bing-search-api"><![CDATA[bing search api]]></category>
		<category domain="post_tag" nicename="cognitive-services"><![CDATA[cognitive services]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_907a385a294f334162bbc54705c29a04]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[5170]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Microsoft Bot Framework에 카카오톡 붙이기</title>
		<link>http://ilseokoh.com/2017/06/22/microsoft-bot-framework-kakao-talk/</link>
		<pubDate>Thu, 22 Jun 2017 03:28:19 +0000</pubDate>
		<dc:creator><![CDATA[ilseokoh]]></dc:creator>
		<guid isPermaLink="false">http://ilseokoh.com/?p=5186</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="https://dev.botframework.com/">마이크로소프트 Bot Framework</a> 는 현재 15개의 채널을 지원하고 있다 (2017-06-22 현재) 페이스북 메신저, Skype, Skype for business, Slack 등 다양한 메신저를 지원하고 동시에 Direct Line REST API를 제공하기 때문에 원한다면 내가 만든 앱에 채팅 UI를 붙여서 만들수도 있다. 하지만 한국의 사정은 조금 다르다. 현재 모바일 메신저 시장의 95%의 점유율을 가지고 있는 카카오톡이 지원되어야 챗봇 서비스가 완성된다고 해도 과언이 아니다. 하지만 카카오톡은 현재 마이크로소프트 Bot Framework의 공식 채널이 아니다. 이런 상황에서 카카오톡에 Microsoft Bot Framework를 붙여서 챗봇을 구현하는 방법을 알아보자.
<h3>카카오 플러스 친구</h3>
카카오는 최근에 봇 개발을 위한 프레임워크를 개발중이라고 밝히기도 했다. 그 전까지는 다른 방법을 써야 하는데 한가지 가능한 방법이 있다. <a href="https://center-pf.kakao.com">카카오 플러스 친구</a>는 원래 쇼핑몰 운영자 등이 고객들과 카카오톡을 통해서 소통할 수 있는 방법을 제공한다. 고객과 운영자가 직접 메시지를 주고 받는 대신 "자동 응답 API" 도 제공을 하는데 이 API와 마이크로소프트 봇 프레임워크의 Direct Line REST API를 연결해주면 카카오 톡을 통해서 봇과 사용자가 메시지를 주고 받을 수 있다.

<img class="size-large wp-image-5189 aligncenter" src="/wp-content/uploads/2017/06/kakao-plus-friend-1024x354.jpg" alt="" width="640" height="221" />

챗봇 애플리케이션과 별도의 웹 애플리케이션이 필요하고 "플러스 친구 자동응답 API"와 "Direct Line 3.0 REST API"를 연결해주는 기능만 해주면 된다. 즉, 카카오 톡에서 입력된 사용자의 메시지를 받고 이 메시지를 다시 Bot Framework 에서 알아 들을 수 있는 포멧으로 변경하여 Direct Line API로 전달하고 반대로 챗봇의 메시지를 다시 카카오 톡까지 전달하면 된다. 단순한 애플리케이션이라고 생각했지만 고려할 사항이 몇가지 있다.

여기에서는 ASP.NET MVC를 이용해서 웹앱을 만들어서 구현한 내용으로 설명을 하고 <a href="https://github.com/ilseokoh/ohilseokbot">전체 코드는 GitHub에 공개</a>되어 있다. '오일석 봇'이라는 샘플이다. 카카오톡으로 메시지를 입력하면 Bot 으로 전달되고 LUIS(Language Understanding Intelligent Service)를 통해 '의도(Intent)'를 알아내고 의도에 적합한 답변을 텍스트 또는 이미지로 응답하는 간단한 봇이다. 웹 앱 2개와 LUIS 앱, 대화의 세션을 저장하기 위한 Azure Cosmos DB로 구성되어 있다.

<img class="aligncenter wp-image-5209 size-large" src="/wp-content/uploads/2017/06/kakao-diagram-1024x633.jpg" alt="" width="640" height="396" />

&nbsp;
<h3>카카오 플러스 친구 가입 및 설정</h3>
<a href="https://center-pf.kakao.com/">카카오 플러스 친구</a>를 가입하고 심사를 거쳐서 승인이된다. 관리자 센터로 가서 배경이미지, 아이콘 설명 등을 설정하고 "스마트 채팅 &gt; API 형" 메뉴에 들어가서 "앱 URL"을 설정하고 API 테스트를 하고 저장하면 된다. 알림을 받을 전화번호를 입력해 놓으면 오류가 발생할 때 알림이 온다.

<img class="aligncenter wp-image-5210 size-full" src="/wp-content/uploads/2017/06/kakao-plus-config.jpg" alt="" width="1237" height="844" />

&nbsp;
<h3>카카오 플러스 친구 API</h3>
상세한 API 스펙은 <a href="https://github.com/plusfriend/auto_reply">Github 카카오톡 플러스친구 API v. 2.0 개요</a> 페이지에서 확인할 수 있다.  4가지 API(Keyboard, message, friend, chat_room)가 있는데 이중에 message API가 대화를 주고 받을 때 사용한다. 그리고 keyboard는 반드시 구현을 해줘야 한다. 나머지는 필요에 따라서 구현을 해주면 되는데 이 샘플에서는 message와 keyboard를 구현했다.
<ul>
 	<li>keyboard: 사용자가 접속하면 호출되어서 카카오톡 키보드 자리에 설정된 버튼을 표시해준다. 카카오 플러스 친구는 처음 시작을 버튼을 보여주면서 시작한다.</li>
 	<li>friend: 친구가 추가되거나 (POST) 차단(DELETE)될 때 호출된다.</li>
 	<li>chat_room: 사용자가 채팅방에서 나가면 호출된다.</li>
 	<li>message: 사용자가 메시지를 입력하면 호출 된다.</li>
</ul>
<h4>카카오톡에서 봇으로 메시지 전송</h4>
사용자가 메시지를 입력하면 message API가 호출되고 user_key, type, content 값이 POST로 전달된다. 여기서 type은 string으로 두가지 "text", "photo" 이다. 이걸 받아서 Bot Framework가 알아 들을 수 있는 Activity 타입으로 전환을 해서 Direct Line REST API를 통해 보내면 된다.  C# 코드로 구현한다면 아래 코드를 참조하면 된다. 여기에서 보내는 채널에 대한 정보를 ChannelAccount 를 만들때 "kakao"라는 이름을 전달하는 코드가 들어 있는데 이는 봇에서 이 메시지가 카카오톡에서 왔음을 구별할 수 있는 방법이 된다.
<pre class="prettyprint">[AcceptVerbs(HttpVerbs.Post)]
public async Task&lt;ActionResult&gt; Index(string user_key, string type, string content)
{
 try
 {
    // covert from Kakao talk message to Bot Builder Activity
    Activity activity = new Activity
    {
       // Bot 에서 메시지가 kakao로 부터 요청되었음을 알수 있도록 name에 kakao를 써준다. 
       From = new ChannelAccount(id:user_key,name:"kakao"),
       Type = ActivityTypes.Message
    };
    if (type == "text")
    {
       activity.Text = content;
    }
    else if (type == "photo")
    {
       activity.Attachments = new List&lt;Attachment&gt;();
       activity.Attachments.Add(new Attachment
       {
       ContentUrl = content
       });
    }
    var response = await conversationService.SendAndReceiveMessageAsync(user_key, activity);
    // 발견된 복수의 Activity를 넘겨서 처리
    var msg = MessageConvertor.DirectLineToKakao(response);
    return Json(msg);
    }
    catch (Exception ex)
    {
       throw new InvalidOperationException("Direct Line 연결오류", ex);
    }
}

</pre>
<h4>봇에서 카카오톡으로 메시지 응답</h4>
반대로 챗봇이 사용자에게 보내는 메시지의 내용은 아래 Json 데이터처럼 메시지에 text, photo, message_button으로 메시지가 표현되고 키보드 영역에 표시가 되도록 button 도 전달 할 수 있다. C#에서는 이 메시지 JSON타입을 모델로 정의해서 사용하면 된다.
<pre class="prettyprint">{
  "message": {
    "text": "안녕하세요",
    "photo": {
      "url": "https://photo.jpg",
      "width": 640,
      "height": 480
    },
    "message_button": {
      "label": "인사하기",
      "url": "https://coupon/url"
    }
  },
  "keyboard": {
    "type": "buttons",
    "buttons": [
      "처음으로",
      "다시 인사하기",
      "취소하기"
    ]
  }
}</pre>
<h3>메시지 전송과 대화의 유지</h3>
챗봇에 메시지를 전송하려면 DirectLine REST API를 이용해서 Activity 타입을 만들어서 전송한다. 처음 대화를 시작할 때 Authentication을 거치고 Conversation을 시작해서 ConversationID를 만드는 과정이 필요하다.  상세한 API 스펙은 <a href="https://docs.microsoft.com/en-us/bot-framework/rest-api/bot-framework-rest-direct-line-3-0-concepts">Direct Line REST API 3.0 스펙</a>에 나와있다. C#에서는 <a href="https://www.nuget.org/packages/Microsoft.Bot.Connector.DirectLine/3.0.2/">Microsoft.Bot.Connector.DirectLine</a> 를 사용하면 쉽게 코드를 작성할 수 있다.

원래 채팅은 지금 대화를 나누다가도 내일 다시 대화를 이어나갈 수 있다. 즉, Conversation이라는 채널이 계속 유지되어야 한참 후에도 그 대화를 계속 이어나갈 수 있다. 따라서  생성된 ConversationID를 저장하고 있다가 다시 메시지가 오면 원래 ConversationID를 사용하여 메시지를 전송해야만 대화가 새로 시작되지 않고 이어진다. 마치 웹 애플리케이션에서 세션을 유지하듯이 별도의 저장공간에 CoversationID를 저장하고 있다가 꺼내써야 한다. 이를 위해서 샘플에서는 Azure Cosmos DB를 사용했고 여기에 카카오톡이 전달해준 user_key, Conversation 정도, 타임아웃을 체크하기 위한 시간, 최신 응답 메시지만 가져오기 위한 watermark 정보를 저장했다. 카카오 플러스 친구 API가 전송해준 user_key 는 대화방을 나가기 전까지 유효한 아이디 역할을 하고 Bot Framework 쪽에서는 ConversationID가 대화를 유지하는데 키가 되는 값이기 때문에 카카오 톡에서 대화를 종료하기 전까지 이 두가지를 같이 저장해야 한다. 또한 Bot Framework의 Conversation은 30분의 Timeout이 있기 때문에 30분이 지났다면 다시 연결을 해주는 로직도 필요하다.
<pre class="prettyprint">// 메시지를 Direct Line API를 사용하여 Bot에 전송
public async Task SendMessageAsync(string userkey, Activity activity)
{
   DirectLineClient client;
   client = new DirectLineClient(ConfigurationManager.AppSettings["DirectLineSecret"]);
   client.SetUserAgent("kakao");

   await ConnectAsync(userkey);
   await client.Conversations.PostActivityAsync(conversation.ConversationId, activity);
}

// Direct Line API에 메시지를 보내기 전에 연결
// userkey를 기준으로 Database에 저장된 정보를 가져와서 Conversation을 새로 만들거나 기존 ID를 사용하여 연결
public async Task ConnectAsync(string userkey)
{
    if (conversation != null) return;

    // database 에서 ConversationInfo 가져옴 
    conversationinfo = await sessionService.GetInfoAsync(userkey);
    if (conversationinfo == null)
    {
        conversation = await client.Conversations.StartConversationAsync();
        await SaveConversationInfoAsync(conversation, userkey, "", DateTimeOffset.Now);
    }
    else
    {
        if (!conversationinfo.coversation.ExpiresIn.HasValue || !conversationinfo.timestamp.HasValue)
        {
            conversation = await client.Conversations.ReconnectToConversationAsync(conversationinfo.coversation.ConversationId);
            await SaveConversationInfoAsync(conversation, userkey, conversationinfo.watermark, DateTimeOffset.Now);
        }
        // timeout 체크. 30분
        var now = DateTimeOffset.Now;
        var timeoutdate = conversationinfo.timestamp.Value.AddSeconds(conversationinfo.coversation.ExpiresIn.Value - 300);
        var diff = timeoutdate - now;
        if (diff &gt; TimeSpan.MinValue)
        {
            conversation = conversationinfo.coversation;
        }
        else
        {
            // 타임아웃이며 다시 커넥트를 해야 한다.
            conversation = await client.Conversations.ReconnectToConversationAsync(conversationinfo.coversation.ConversationId);
            await SaveConversationInfoAsync(conversation, userkey, conversationinfo.watermark, DateTimeOffset.Now);
        }
    }
}</pre>
<h3>챗봇에서 메시지 응답 받기</h3>
메시지를 응답받는 코드의 핵심은 GetActivityAsync 메서드로 ConversationId 와 watermark를 전달한다. watermark의 용도는 마지막으로 전달 받은 메시지만 가져오기 위함이다. 메시지 하나가 전송될 때마다 watermark 값이 단순 증가하는데 카카오톡에서 받은 메시지를 전송하고 받은 watermark를 저장하고 있다가 GetActivityAsync() 를 호출할때 사용하면 그 이후의 watermark 값을 가지고 있는 응답 메시지만 가져온다. 이 때 여러개의 Activity가 한꺼번에 응답될 수 있으므로 코드에서는 여러개의 activity를 처리할 수 있도록 코딩을 해 놓는게 좋겠다.
<pre class="prettyprint">public async Task&lt;IList&lt;Activity&gt;&gt; ReceiveMessageAsync(string userkey)
{
    await ConnectAsync(userkey);
    
    // 응답 메시지를가져온다. 
    var activitySet = await client.Conversations.GetActivitiesAsync(conversationinfo.coversation.ConversationId, conversationinfo.watermark);
    conversationinfo.watermark = activitySet?.Watermark;
    // Conversation 저장
    await SaveConversationInfoAsync(conversation, userkey, conversationinfo.watermark, conversationinfo.timestamp.Value);

    // appSettings 에 설정한 BotId 는 bot을 등록할 때 사용한 Bot handler 와 같아야 한다. 
    var activities = from x in activitySet.Activities
                            where x.From.Id == botId
                            select x;

    return activities.ToList();
}</pre>
<h3>챗봇에서 전달 받은 메시지의 변환</h3>
챗봇이 카카오톡으로 메시지를 보낼때는 몇가지 문제가 있다. Bot Framework에서는 단순 메시지나 이미지 전달 말고도 다양한 포멧으로 메시지를 전달할 수 있도록 여러가지 Attachment를 지원한다. <a href="https://docs.microsoft.com/ko-kr/bot-framework/dotnet/bot-builder-dotnet-add-rich-card-attachments">"Add rich card attachments to message"</a> 문서를 보면 AdaptiveCard, HeroCard, ThumbnailCard 등 다양한 카드타입을 지원하는 걸 알 수 있다. Bot Framework의 공식 채널(메신저)들은 각자 표현은 조금씩 다르지만 이런 카드들을 사용할 수 있다. 하지만 카카오톡은 그렇지 못하다. 따라서 카카오톡으로만 챗봇 서비스를 하는게 아니라면 사용자에게 전달할 컨텐츠를 어떤 방식을 통해 전달할지에 대해서 기획을 하고 그 내용을 카카오톡에서는 어떻게 표현할지 생각해 봐야 한다.

또한 챗봇은 여러개의 메시지로 응답을 나눠 보낼 수도 있다. 예를들어 안내 텍스트를 하나의 Activity로 보내고 그 다음에 이미지를 한장 보내고 마지막으로 사용자가 선택할 수있는 버튼이 달린 카드를 보낼 수 있다. 즉 3번을 응답할 수 있고 채널에서는 각각의 메시지를 사용자에게 보여준다. 하지만 카카오톡의 API는 message API가 요청되면 그 응답으로 한번의 메시지만 전달 할 수 있다. Request 당 하나의 메시지만 전달 해야한다.

따라서 이런 특성을 이해하고 코드를 작성하는게 중요하다. 여러 고민을 해봤지만 제일 바람직한 방법은 챗봇 코드에서 카카오톡에서 온 요청을 인식하고, 하나의 Activity에 메시지와 이미지 하나를 만들어서 응답하는게 제일 좋은 방법으로 생각된다.
<pre class="prettyprint">public static Models.MessageResponse DirectLineToKakao(IList&lt;Activity&gt; activities)
{
    if (activities == null || activities.Count &lt;= 0) return null;

    var msg = new Models.MessageResponse();
    // 여러개의 Activity
    foreach (var activity in activities)
    {
        if (activity.Type != ActivityTypes.Message) continue;

        if (msg.message == null) msg.message = new Message();
        // 텍스트 메시지를 누적 시킴
        msg.message.text += "\n" + activity.Text;

        if (activity.Attachments != null &amp;&amp; activity.Attachments.Count &gt; 0)
        {
            foreach (Attachment attachment in activity.Attachments)
            {
                switch (attachment.ContentType)
                {
                    case "image/png":
                    case "image/jpeg":
                        // activity는 attachment가 배열로 여러개가 오지만 Kakao는 한개만 가능.
                        // 따라서 처음 하나만 보여지는 걸로 ... 
                        if (msg.message.photo == null)
                        {
                            msg.message.photo = new Photo
                            {
                                url = attachment.ContentUrl
                            };
                        }
                        break;
                }
            }
        }
    }
    return msg;
}</pre>
여러개의 Activity를 받아서 카카오톡이 표현할 수 있는 메시지 형태로 변환해주는 코드는 위와 같다. 텍스트를 붙여서 하나로 만든다거나 Attachment 중에 이미지 타입만 처리하고 그것도 한개만 처리하도록 했다. 데이터가 누락되는 것이다. 여기에서는 이렇게 방어코드를 넣어놓고 챗봇에서 카카오톡으로 보낼 때만 특별히 하나의 Activity 응답으로 만들어서 보내도록 분기를 해주는 방법이 적당할 것 같다. 그 방법은 카카오톡에서 전송된 Activity의 내용중에 From 을 살펴보고 분기하는 방법이다.
<pre class="prettyprint">[LuisIntent("인사")]
public async Task Greeting(IDialogContext context, LuisResult result)
{
    if (context.Activity.From.Name == "kakao")
    {
        string message = $"안녕하세요. 저는 오일석 봇입니다. 저를 만든 오일석을 대신해서 제가 도움을 드릴 수 있으면 좋겠네요.  저는 이런걸 할 수 있어요.\n 제 소개를 해드릴 수 있어요.\n 제 인사를 할수도 있죠.";
        await context.PostAsync(message);
    }
    else
    {
        string message = $"안녕하세요. 저는 오일석 봇입니다. 저를 만든 오일석을 대신해서 제가 도움을 드릴 수 있으면 좋겠네요.  ";
        await context.PostAsync(message);

        string message2 = $"저는 이런걸 할 수 있어요.\n 제 소개를 해드릴 수 있어요.\n 제 인사를 할수도 있죠.";
        await context.PostAsync(message2);
        context.Wait(MessageReceived);
    }
}
</pre>
&nbsp;
<h3>해결하지 못한 두가지 문제점</h3>
<ul>
 	<li>카카오톡으로 이미지를 전달할 때 width와 height를 같이 주도록 되어 있고 값을 넘기지 않으면 이미지를 표시하지 않는다. 하지만 전체 흐름에서 보면 width와 height를 알아내서 전달해주기 위해서는 이미지를 다운받아서 width/height를 직접 알아내는 방법 뿐이다. (굳이 왜 w / h를 받으려고 해쓰가...)</li>
 	<li>타임아웃 문제 : 카카오톡 API는 5초안에 응답이 안오면 오류를 발생시킨다. 채팅인데 5초 타임아웃은 가혹하다.  봇 커넥터를 통해서 봇까지 가서 LUIS 서비스를 다녀오고 혹여나 백엔드 서비스까지 있다면 타임아웃이 걸릴 수도 있다. 실제로 관리자에게 오류 메시지가 오는데 타임아웃이 원인인 것 같다. 그리고 그 원인을 살펴볼 방법이 없다.</li>
</ul>
<h3>마무리</h3>
두개의 웹앱을 모두 테스트 해야하는데 두개를 모두 로컬 머신에서 테스트하는게 불가능했다. 모두 배포를 한 후에 테스트를 하거나 반쪽씩 테스트를 진행해야 했다. Postman과 fiddler를 모두 동원해서 오고가는 메시지를 확인하면서 테스트를 해야한다. 따라서 별도의 개발환경을 Azure에 구축하고 배포 후 테스트를 하는 방법이 가장 적당할 것이다.

여기까지 주요 코드를 살펴보면서 카카오톡과 Microsoft Bot Framework를 붙여서 챗봇을 서비스하는 방법을 살펴봤다. 카카오에서 좀 더 멋진 챗봇 프레임워크를 만들어서 공개할 것으로 믿고 그 방법이 Microsoft Bot Framework와 잘 연동이 되었으면 하는 바램이다.

<img class="size-large wp-image-5222 aligncenter" src="/wp-content/uploads/2017/06/kakao-screen-1024x599.png" alt="" width="640" height="374" />
<h3>추가 자료</h3>
<ul>
 	<li>전체 소스: <a href="https://github.com/ilseokoh/ohilseokbot">https://github.com/ilseokoh/ohilseokbot</a></li>
 	<li>Direct Line 사용 샘플: <a href="https://github.com/Microsoft/BotBuilder-Samples/tree/master/CSharp/core-DirectLine">https://github.com/Microsoft/BotBuilder-Samples/tree/master/CSharp/core-DirectLine </a></li>
 	<li><a href="http://ilseokoh.com/2016/12/05/microsoft-bot-framework-dialog/">[Microsoft Bot Framework] Dialog를 사용하여 대화의 흐름 만들기</a></li>
 	<li><a href="http://ilseokoh.com/2016/12/10/microsoft-bot-framework-%ec%83%81%ed%83%9c%ec%a0%80%ec%9e%a5%ec%9d%84-%ec%9c%84%ed%95%9c-bot-state-service/">[Microsoft Bot Framework] 상태저장을 위한 Bot State Service</a></li>
 	<li><a href="http://ilseokoh.com/2016/12/02/microsoft-bot-framework-direct-line-rest-api-3-0/">[Microsoft Bot Framework] Direct Line REST API 3.0</a></li>
 	<li><a href="http://ilseokoh.com/2016/12/03/%ED%95%80%EC%BC%93-cs-chatbot-%EB%A7%8C%EB%93%A4%EA%B8%B0-hackfest-%EC%82%AC%EB%A1%80/">핀켓 CS ChatBot 만들기 HackFest 사례</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5186</wp:post_id>
		<wp:post_date><![CDATA[2017-06-22 12:28:19]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-06-22 03:28:19]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[microsoft-bot-framework-kakao-talk]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="bot"><![CDATA[bot]]></category>
		<category domain="post_tag" nicename="chatbot"><![CDATA[chatbot]]></category>
		<category domain="post_tag" nicename="kakao"><![CDATA[kakao]]></category>
		<category domain="post_tag" nicename="kakao-talk"><![CDATA[kakao talk]]></category>
		<category domain="category" nicename="microsoft-bot-framework"><![CDATA[Microsoft Bot Framework]]></category>
		<category domain="post_tag" nicename="microsoft-bot-framework"><![CDATA[microsoft bot framework]]></category>
		<category domain="post_tag" nicename="%eb%a7%88%ec%9d%b4%ed%81%ac%eb%a1%9c%ec%86%8c%ed%94%84%ed%8a%b8"><![CDATA[마이크로소프트]]></category>
		<category domain="post_tag" nicename="%eb%b4%87"><![CDATA[봇]]></category>
		<category domain="post_tag" nicename="%ec%b1%97%eb%b4%87"><![CDATA[챗봇]]></category>
		<category domain="post_tag" nicename="%ec%b9%b4%ec%b9%b4%ec%98%a4%ed%86%a1"><![CDATA[카카오톡]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[5216]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>32</wp:comment_id>
			<wp:comment_author><![CDATA[ㅇㅇ]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[rp20323@naver.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[1.244.146.153]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2017-07-16 21:57:38]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2017-07-16 12:57:38]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[MS가 카카오톡을 지원해야할 것 같네요. 그래도 예전에 기사를 보니 MS가 국내 기업들 의뢰를 받아 50여개 챗봇을 개발하고 있다고 합니다 나쁘진 않은 것 같아요 한국어도 신경 쓰고 있다니...]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>149</wp:comment_id>
			<wp:comment_author><![CDATA[ㅠㅠ]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[calmnature@naver.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[115.94.33.124]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2018-02-02 17:18:34]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2018-02-02 08:18:34]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[혹시 nodeJS로 봇 프레임워크 구현도 해보셨나요??]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>150</wp:comment_id>
			<wp:comment_author><![CDATA[ilseokoh]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[onestone11.oh@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[110.70.55.208]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2018-02-02 17:24:14]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2018-02-02 08:24:14]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[네 해봤습니다. 제 느낌에는 nodejs sdj가 c#보다 정갈하게 되어 있던데요.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>149</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>151</wp:comment_id>
			<wp:comment_author><![CDATA[ㅠㅠ]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[calmnature@naver.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[115.94.33.124]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2018-02-05 09:46:08]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2018-02-05 00:46:08]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[지금 NodeJS로 봇 프레임워크 연결하려 하고 있는데 정보가 너무 없어서 구현에 어려움이 있더라구요 ㅠㅠ...
혹시 실례가 안된다면 소스코드 좀 보내주실 수 있을까요??
calmnature@naver.com 입니다]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>150</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>152</wp:comment_id>
			<wp:comment_author><![CDATA[C# 코드 질문]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[calmnature@naver.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[115.94.33.124]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2018-02-05 17:43:37]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2018-02-05 08:43:37]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[배포해주신 Source에서 Database 부분만 지우고 앱 배포를 하여 해당 URL을 갔을 때,
--------------------------------------------------------------------------------------
오일석 봇 for 카카오톡
카카오톡에서 오일석 봇 플러스 친구를 찾아서 대화를 인사를 해보세요.

오일석
--------------------------------------------------------------------------------------
라고는 나옵니다.
카카오 플러스 친구에 API테스트도 정상적으로 되구요.

그런데 카카오 친구를 맺고 인사 or 소개를 눌렀을 때
--------------------------------------------------------------------------------------
해당 프로필의 자동응답 시스템이 응답을 하지 않습니다. 문제가 보고되어 처리 예정입니다. 다음에 다시 시도해주세요.
--------------------------------------------------------------------------------------
라고 나오는데 혹시 어떤 설정을 더 해줘야 하나요?
Web.config에서 BotID와 Direct Line Secret Key를 채워줘도 안 되서 질문 드립니다!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>156</wp:comment_id>
			<wp:comment_author><![CDATA[Zeettalure]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[mattcol19xl@gmx.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://insuinsrtopusa.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[46.161.9.69]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2018-02-17 07:00:33]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2018-02-16 22:00:33]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Spill dette supre 3D mahjong spillet Samme +-7500 % - Shanghai Mahjong Her har du hele Tren dine Blackjack kunnskaper i dette gratis online spillet. 
http://maxbetspinz.co/kortspillet-casino-online/2096 - kortspillet casino online  http://slotbox24.co/free-slot-tally-ho/2859 - free slot tally ho   Velg Casino Tropez sa far du markedets beste velkomstbonus pa hele 22mt en haug med andre fordeler.   http://turbogames.co/vennesla-nettcasino/881 - Vennesla nettcasino  http://rocketslots.co/betsson-20-gratis-spinn/4460 - betsson 20 gratis spinn   Spilleautomat Jackpot6000 gratis Norges mest populre spilleautomat Du kan vinne inntil €6000,- pa ett spinn.  http://turbogames.co/casino-bonus-uten-omsetningskrav/4010 - casino bonus uten omsetningskrav  http://greenbets.co/kasino-online-no/790 - kasino online no   Hva Bor Du Gjore Med Den Beste Casino Bonus Du Kan Finne? 
http://greenslots2017.co/roulette-bonus-kingdom-hearts/2383 - roulette bonus kingdom hearts  http://portableslots.co/betway-casino-flash/2002 - betway casino flash   Spill Gold Rally pa Winner casino Bonus: 5,500kr 6 Spill na Jan 6,orre Nyttarstilbud i Mr Green Casino Dec 9,orre Store gevinster i.   http://maxrollspins.co/spillselskaper-norge/2724 - spillselskaper norge  Nettauksjon for kjop og salg, stort utvalg i antikviteter og samleobjeter GRATIS annonser, kun Her far man garantert valuta for pengene Kan anbefales varmt.   Se Odegaard, Fossum og Celina spille sammen MOBIL-APPEN SOM HOLDER DEG OPPDATERT: Ansvarlig redaktor Kristin Monstad og digitalredaktor.  http://maxbetspinz.co/spilleautomat-big-kahuna-snakes-and-ladders/3835 - spilleautomat Big Kahuna Snakes and Ladders  http://slotmachines24.co/spilleautomat-space-wars/620 - spilleautomat Space Wars   http://rocketslotsnow.co/casino-fredrikstad/411 - casino Fredrikstad 
http://northernbets.co/video-roulette-tips/666 - video roulette tips  http://maxshotslots.co/norsk-online-kurs/3226 - norsk online kurs   Anmeldelse, gratis bonus og informasjon om Casino Action hos Norsk Betting Falt gratis hos oss pa Norsk Betting.   http://turboslots.co/casino-european/2016 - casino european  http://maxbetspinz.co/prime-casino-bonus-codes/393 - prime casino bonus codes   I kamper der vi styrer spillet og motstanderen sa klarer a legge om til et mer offensivt spill, Edited by Hulken, 01:40 PM.  http://rocketgamez.co/norsk-mobil-casino/2123 - norsk mobil casino  http://rocketgamez.co/blackjack-casino/4188 - blackjack casino   Forden Medjen a spille tok hjemmelaget pa ny ledelsen, og like for slutt ble den endelige spikeren satt i den svart-hvita kista Dermed blir. 
http://northernbets.co/sparks-spilleautomat/3396 - Sparks Spilleautomat  http://rocketslotsnow.co/casinoeuro-bonus/4487 - casinoeuro bonus   Ny iPhone 6 Bli eier av den nylanserte iPhone 6 akkurat na kan du vinne Apples nyeste teknologi, den nye iPhone 6 Denne unike telefonen har blitt.   http://portablespins.co/spilleautomater-mo-i-rana/2490 - spilleautomater Mo i Rana  Av Rune Fjeld Olsen:00 Kilde: VG NETT VG Nett Playstation 3, Xboxntendo Wii kriger om plassen ved siden av TV-en din.   Casino online Her pa Casino6000com er det casino og spill som star i fokus Alle norske casinoer i listen ovenfor er lette og trygge a spille hos Du kan enkelt.  http://nothernspinz.co/casumo-com/1721 - casumo com  http://portableslots.co/gowild-casino-bonus-codes/1816 - gowild casino bonus codes   http://portableslots.co/narvik-nettcasino/175 - Narvik nettcasino 
http://northernbets.co/spilleautomat-flowers/48 - spilleautomat Flowers  http://rocketspinz.co/spilleautomater-time-machine/4323 - spilleautomater Time Machine   Du kan begrense antall treff ved a velge hvor du vil reise fra og/eller hvilke Oslo, sondag 120715, Tallinn, 3, Economy Hotel ex Skane , Dobbeltrom 1 - 2.   http://turbogames.co/riga-casino/1665 - riga casino  http://slotsnetwork24.co/spin-palace-casino-no-deposit-bonus/4780 - spin palace casino no deposit bonus   Spill pa nettcasino er populrt i Norge, og nordmenn vinner for mange millioner kroner hver eneste maned i casino pa nett Her er en oversikt over norske.  http://localspinz.co/tornado-farm-escape-spilleautomater/2016 - tornado farm escape spilleautomater  http://webbyspinz.co/all-slots-casino-download-android/1478 - all slots casino download android   Se Maradona grisetakle Agero junior 27837 Se fotballjentenes offisielle VM-video. 
http://slotbox24.co/casino-games-gratis-spielen/230 - casino games gratis spielen  http://slotscampus.co/spilleautomater-slots/2415 - spilleautomater slots   Andre land har enklere regelverk Flere nyheter om radio: Nyhetsbloggen.   http://portablespins.co/spilleautomater-danskebaten/575 - spilleautomater danskebaten  Du setter alltid kunden i fokus og har en svrt god forstaelse for at nettopp du er You will be hired through StudentConsulting on a 1-year contract casino och poker och hjlpa dem att komma igang pa var kunds hemsida igen.   De forskjellige online casinoene har sine unike kampanjer Noen tilbyr bonus dersom du bruker en viss innskuddsmetode, ofte en e-lommebok Andre vil gi deg.  http://greenbets.co/slots-mobile-download/1811 - slots mobile download  http://slotscampus.co/creature-from-the-black-lagoon-video-slot/4142 - creature from the black lagoon video slot   http://turboslots.co/odds-norsk-tipping/1455 - odds norsk tipping 
http://slotscampus.co/odds-p-nett/1892 - odds pa nett  http://slotscampus.co/live-roulette-spins/463 - live roulette spins   Instaspill og Norsk Tipping har i fellesskap fatt en trang fodsel og langt i fra alle er et online casino eller underholdningsspill pa nett, som de kaller det for.   http://maxshotslots.co/spilleautomater-octopuss-garden/1675 - spilleautomater Octopuss Garden  http://nothernspinz.co/slot-iron-man-2/703 - slot iron man 2   Spilleautomat More Sharing ServicesDel Share on facebook Share on twitter Share on print Share on email Kontakt oss Gausdal kommune Vestringsvegen.  http://maxrollspins.co/violet-bingo-norge/3594 - violet bingo norge  http://slotscampus.co/mariabingo-norge/3099 - mariabingo norge   Solgt til Stena Cargo Line Ltd, Nassau, Bahamas Stockholm, Sverige Brot ut brann i maskinrommet pa reise mellom Cozumel - St Petersburg Florida. 
http://turbogames.co/norge-spiller-som-barcelona/1122 - norge spiller som barcelona  http://maxshotslots.co/sloth/4415 - sloth   Norske Casinoer Det er ikke noen hemmelighet at vi nordmenn elsker a gamble og denne interessen kan spores helt tilbake til middelalderen For de fleste av.   http://northernroll.co/casino-war-odds/1066 - casino war odds  Det finnes et godt utvalg av bookmakere pa nett med norsk sprak og tilpasset spillere fra Norge Her far du full oversikt over de.   Online poker - fa forkunnskap om poker generelt og forstaelse for uttrykkene enkelte med profesjonelle pokerspillere, avhengig av siden du benytter deg av.  http://turbogames.co/eurogrand-casino-gratis/1922 - eurogrand casino gratis  http://webbyslots.co/casino-club-uk/3386 - casino club uk   http://pocketslotz.co/european-blackjack-vs-american-blackjack/5038 - european blackjack vs american blackjack 
http://slotscampus.co/spilleautomat-avalon-ii/3658 - spilleautomat Avalon II  http://slotsnetwork24.co/play-slot-machines-online-for-free/2454 - play slot machines online for free   En ny versjon av din nettleser ser ut til a vre tilgjengelig Oppdater til den nyeste versjonen og gjor din opplevelse pa nett, enklere, raskere og tryggere.   http://rocketspinz.co/best-casinos-online-usa-players/4340 - best casinos online usa players  http://webbyslots.co/mossel-bay-casino-employment/4519 - mossel bay casino employment   Visa Business kredittkort hjelper deg a skilje mellom private kjop og jobbrelaterte utlegg Spesielt gunstig for deg som reiser mykje.  http://maxrollspins.co/slot-machine-random-runner-slotplaza/3789 - slot machine random runner slotplaza  http://slotbox24.co/spilleautomater-p-ipad/4164 - spilleautomater pa ipad   Finest casino kortspill real money England sitenovotenapcombr casino kortspill real money greektown casino reviews. 
http://webbyslots.co/slots-bonus-no-deposit-required/534 - slots bonus no deposit required  http://webbyslots.co/casino-slots-vegas/2519 - casino slots vegas   Treff: ut for a fa litt penger til velforeningen, forteller Elin Thorsen som ogsa FestbordetSjekk loppemarked og nettet for a finne ting som feks vaser og pynt til.   http://slotmachines24.co/casinos-in-las-vegas/1579 - casinos in las vegas  Online bingo skiller seg ut fra tradisjonell bingo, blant annet kan du spille gratis, du kan kjempe om jackpotter, motta belonninger og sosialisere deg online.   Hei, Mitt navn var en gang Vincent, men na, etter en lang periode med uhell og store tap, synes jeg at jeg har tapt retten til navnet Vincent Forbokstaven i.  http://slotmachines24.co/spilleautomat-fantasy-realm/500 - spilleautomat Fantasy Realm  http://turboslots.co/online-bingo-generator/768 - online bingo generator   http://rocketspinz.co/spilleautomater-lillestrom/759 - spilleautomater Lillestrom 
http://pocketslotz.co/godteri-nettbutikk/5129 - godteri nettbutikk  http://portableslots.co/norges-spilleautomaten/3038 - norges spilleautomaten   Mens du bruker i dybden internet casino tjeneste CasinoBrain som vr tutorial vi skal konstruere i denne artikkelen Du finner du br forvente fra a to.   http://localslots.co/kjpe-gamle-spilleautomater/2024 - kjope gamle spilleautomater  http://webbyslotbox.co/uk-online-casino-guide/1339 - uk online casino guide   Forst velger minstp til Keno bord ved a klikke pa dem Hvis du spiller fem-runde serien, kan du se dine siste resultater i resultatene tabellen.  http://maxshotslots.co/casino-red/2569 - casino red  http://rocketslotsnow.co/norsk-salmebok-p-nett/3664 - norsk salmebok pa nett   Her kan du lese hvordan du far maksimalt utbytte av gratis casinospill. 
http://turbogames.co/spill-p-nett/1538 - spill pa nett  http://northernbets.co/mr-green-casino/4710 - mr green casino   Norges beste casinoguide for deg som vil spille casino pa nett Hos oss finner du de norske spillselskapene for casino online.   http://rocketslotsnow.co/beste-mobiltelefon/4615 - beste mobiltelefon  Bonushoring pa casino - Bonushoring pa casino, SMsino Cosmopol - officiell diskussionstrad valterego - Pokerforum: site profile valterego.   Crecent kabal : Flytt alle kortene fra ytre hauger inn mot de sentrale grofter.  http://maxshotslots.co/tipping-oddstips/1189 - tipping oddstips  http://turbospinz.co/slot-machine-games-for-fun/1050 - slot machine games for fun   http://rocketgamez.co/caribbean-stud-progressive-jackpot/1139 - caribbean stud progressive jackpot 
http://portableslots.co/spilleautomater-wild-rockets/1304 - spilleautomater Wild Rockets  http://localslots.co/casino-rooms-in-atlantic-city/4426 - casino rooms in atlantic city   Spill Roulette Royal hos Winningscom na Spinn og vinn opp til Kr2,000,0000 Du vinner pa hvert tredje spinn, sa spinn na.   http://turbospinz.co/betsafe-casino-bonus-code/2911 - betsafe casino bonus code  http://slotmachines24.co/backgammon-hvordan-spille/1392 - backgammon hvordan spille   Sett inn spill for 800 Mega Joker har jackpot pa flere 100% bonus pa inntil €500 hos Unibet, som gir deg €1000 a spille for.  http://rocketslotsnow.co/spilleautomater-elektra/1353 - spilleautomater Elektra  http://turbospinz.co/casino-room-erfaringer/4427 - casino room erfaringer   Oversikt over norske aviser pa internett Alfabetisk og geografisk. 
http://portableslots.co/slot-frankenstein-j-trucchi/4441 - slot frankenstein j trucchi  http://northernroll.co/easter-eggs-spilleautomat/891 - Easter Eggs Spilleautomat   Advent-Kalender NO - Norsk oversikt over julekalendere / adventskalendere pa nett.   http://nothernspinz.co/come-on-casino-android/607 - come on casino android  Cryptologic har slitt med et darlig rykte, men har na trappet opp sitt spill og fatt en posisjon blant de beste casino software utviklere Titler som Spiderman, King.   OFP er verdens NEST beste spill Det beste er definitivt IL-2 Sturmovik FInnes ikke maken til WW2 kampflysimulator Skal lure pa hvor mange nye prosessorer.  http://portableslots.co/nye-norske-casino-2017/4800 - nye norske casino 2017  http://slotscampus.co/spilleautomater-hammerfest/1959 - spilleautomater Hammerfest   http://portableslots.co/free-spinns-casino/1221 - free spinns casino 
http://turboslots.co/spilleautomater-the-osbournes/468 - spilleautomater The Osbournes  http://greenslots2017.co/casino-tropez-review/562 - casino tropez review   Du vil oppdage hvordan slik at du kan gjore penger pa en bestemt Internett hvis deg stilling med engasjement, innsats tjen penger pa nett i tillegg, gode.   http://localspinz.co/online-casino-bonus-bez-vkladu/3025 - online casino bonus bez vkladu  http://webbyslotbox.co/blackjack-flash-cards/3145 - blackjack flash cards   Definisjon av rulett i Online Dictionary Betydningen av rulett Norsk oversettelse av rulett Oversettelser av rulett rulett synonymer, rulett antonymer Informasjon.  http://slotbox24.co/slot-machines-reddit/2189 - slot machines reddit  http://greenbets.co/slot-machine-throne-of-egypt/2180 - slot machine throne of egypt   Informasjon om casino pa nett, poker og bingo Vi har testet overrlig casino og bingo Alt med norsk tekst VIOLET CASINO violetcasino.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[trash]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[_wp_trash_meta_status]]></wp:meta_key>
				<wp:meta_value><![CDATA[0]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[_wp_trash_meta_time]]></wp:meta_key>
				<wp:meta_value><![CDATA[1523785069]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Azure Blob Storage를 사용해서 정적인 웹 사이트 배포</title>
		<link>http://ilseokoh.com/2017/07/04/azure-blob-storage-web-site/</link>
		<pubDate>Mon, 03 Jul 2017 15:15:05 +0000</pubDate>
		<dc:creator><![CDATA[ilseokoh]]></dc:creator>
		<guid isPermaLink="false">http://ilseokoh.com/?p=5229</guid>
		<description></description>
		<content:encoded><![CDATA[아주 간단한 웹사이트가 필요할 때가 있다.

로그인도 필요없고 복잡한 기능이 없는, 문서를 공유하자던 웹의 본질에 가까운 그런 사이트가 필요할 때가 있다. 회사소개 홈페이지, 정식 서비스 오픈전에 공사중임을 표시하는 랜딩 페이지,  웹에서 작동되는 게임이 올라간 웹 페이지 등 그런 사례는 많다. 이런 웹사이트의 대걔 html, js, css, 이미지 파일 몇 개로  구성되고 서버측 개발이 필요없다. 이 사이트를 운영하기 위해서 가상컴퓨터나 Azure 웹앱도 부담스럽다. 이럴 때 Azure blob storage에 컨텐츠를 복사해서 쉽게 웹 사이트를 운영할 수 있다. Azure Blob Storage에 http 서버가 내장되어 있기 때문이다.

이 글은 Azure blob storage 정적인 웹사이트를 운영하는 방법과 수정이 되었을 때 배포, 성능향상을 위한 최적화에 대한 내용이다.
<ul>
 	<li>gulp 와 여러 gulp 플러그인을 이용해서 html / js/ css를 minify 하고 gzip으로 압축하여 최적화</li>
 	<li>html / js / css / image 를 Azure Blob Storage에 Dev 환경과 Production 환경에 각각 배포</li>
</ul>
이글과 관련된 소스코드는 <a href="https://github.com/ilseokoh/jwplayertest">Github ilseokoh/jwplayertest에 공개</a>되어 있다.
<h3>사전준비</h3>
<ul>
 	<li>Node.js 환경을 이용하지만 잘 알아야 하는 건 아니다.</li>
 	<li>Gulp 에 대한 학습 - <a href="http://programmingsummaries.tistory.com/356">감성프로그램님이 번역해놓은 글</a> 참조</li>
 	<li>Node.js 설치 - <a href="https://nodejs.org/ko/download/package-manager/">패키지 매니저로 Node.js 설치하기</a>. 윈도우라면 <a href="https://nodejs.org/en/#download">윈도우 인스톨러</a>로 설치. 맥이라면 <a href="https://nodejs.org/en/download/">맥용 인스톨러</a>로 설치</li>
 	<li>웹사이트 컨텐츠 준비 - 샘플코드에서는 src 라는 폴더에 html, src/js 폴더에 javascript, src/css 에 CSS 파일, src/img 에 이미지 파일을 준비했다.</li>
</ul>
<a href="/wp-content/uploads/2017/07/vscode-tree.jpg"><img class="size-full wp-image-5237 aligncenter" src="/wp-content/uploads/2017/07/vscode-tree.jpg" alt="" width="2850" height="1706" /></a>
<ul>
 	<li>package.json 파일을 만들고 Gulp 및 Gulp 플러그인 설치</li>
</ul>
<pre class="prettyprint">&gt; npm --version
3.10.10

&gt; npm init

name: (oproject)
version: (1.0.0)
description:
entry point: (index.js)
test command:
git repository:
keywords:
author:
license: (ISC)
About to write to C:\src\oproject\package.json:
{
  "name": "oproject",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" &amp;&amp; exit 1"
  },
  "author": "",
  "license": "ISC"
}

&gt; npm install gulp -g</pre>
<ul>
 	<li>필요한 gulp 플러그인을 아래 명령으로 설치한다. 개발환경에서만 필요하기 때문에 --save-dev 옵션을 붙여준다.</li>
</ul>
<pre class="prettyprint">&gt; npm install gulp-clean-css gulp-concat gulp-deploy-azure-cdn gulp-livereload gulp-minify-html gulp-uglify gulp-util gulp-webserver --save-dev</pre>
<table>
<tbody>
<tr>
<td><a href="https://www.npmjs.com/package/gulp-deploy-azure-cdn">gulp-deploy-azure-cdn</a></td>
<td>Azure Blob 스토리지로 컨텐츠를 업로드. gzip 압축과 http header 설정 기능도 포함되어 있다.</td>
</tr>
<tr>
<td><a href="https://www.npmjs.com/package/gulp-clean-css">gulp-clean-css</a></td>
<td>CSS를 minify(공백,코멘트를 제거하여 용량을 줄임)</td>
</tr>
<tr>
<td><a href="https://www.npmjs.com/package/gulp-minify-html">gulp-minify-html</a></td>
<td>HTML을 minify(공백, 코멘트를 제거해서 용량을 줄이는 방법)해준다.</td>
</tr>
<tr>
<td><a href="https://www.npmjs.com/package/gulp-uglify">gulp-uglify</a></td>
<td>javascript 파일을 uglify(공백, 코멘트등을 제거해서 용량을 줄이는 방법)해준다.</td>
</tr>
<tr>
<td><a href="https://www.npmjs.com/package/gulp-util">gulp-util</a></td>
<td>gulp util 여기서는 dev / production 환경을 스위치 하는데 썼다.</td>
</tr>
<tr>
<td><a href="https://www.npmjs.com/package/gulp-concat">gulp-concat</a></td>
<td>string 붙이는 플러그인</td>
</tr>
<tr>
<td><a href="https://www.npmjs.com/package/gulp-webserver">gulp-webserver</a></td>
<td>로컬 테스트용 웹서버. http://localhost:8000으로 접근해서 디버깅 용도</td>
</tr>
<tr>
<td><a href="https://www.npmjs.com/package/gulp-livereload">gulp-livereload</a></td>
<td>로컬에서 테스트할 때 파일이 변경되면 다시 빌드해주는 플러그인</td>
</tr>
</tbody>
</table>
&nbsp;

최종 package.json 파일
<pre class="prettyprint">{
  "name": "o-project",
  "version": "1.0.0",
  "description": "O Project",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" &amp;&amp; exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/ilseokoh/jwplayertest.git"
  },
  "author": "kevin",
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/ilseokoh/jwplayertest/issues"
  },
  "homepage": "https://github.com/ilseokoh/jwplayertest#readme",
  "devDependencies": {
    "gulp": "^3.9.1",
    "gulp-clean-css": "^3.5.0",
    "gulp-concat": "^2.6.1",
    "gulp-deploy-azure-cdn": "^2.0.0",
    "gulp-livereload": "^3.8.1",
    "gulp-minify-html": "^1.0.6",
    "gulp-uglify": "^3.0.0",
    "gulp-util": "^3.0.8",
    "gulp-webserver": "^0.9.1"
  }
}</pre>
<h3>Gulp 파일 만들기</h3>
이제 gulpfile.js 파일을 만들어서 gulp를 이용해서 하나씩 작업을 이어 나가보자. 먼저 텍스트 에디터를 사용해서 gulpfile.js 파일을 만든다.
<h3>1. 플러그인 로드와 설정</h3>
gulpfile.js 상단에 플러그인을 require 문을 이용해서 로딩하고 config 오브젝트에 필요한 설정값들을 준비한다. config에는 소스파일들의 종류에 따른 위치, 결과물이 담길 dist 폴더 그리고 Azure Blob 스토리지의 이름과 키를 설정해준다.
<pre class="prettyprint">var gulp = require('gulp');
var concat = require('gulp-concat');
var uglify = require('gulp-uglify');
var minifyhtml = require('gulp-minify-html');
var cleanCSS = require('gulp-clean-css');
var webserver = require('gulp-webserver');
var livereload = require('gulp-livereload');
var util = require('gulp-util');
var deployCdn = require('gulp-deploy-azure-cdn');

console.log('Production build? : ' + util.env.production);

var config = {
	js: 'src/js/**/*.js',
	css: 'src/css/**/*.css',
	img: 'src/img/*.*',
	html: 'src/*.html',
	dist: 'dist/',
	production: !!util.env.production,
	azureStorageAccountName: 'blobwebapp1',
	azureStorageKey: 'uS7lkWaTb+515uR6MsruXWDPJJ4UNxoNJ4Wu8oPZ8O+w4V0CffnsxEW0RhKQ=='
};
</pre>
<h3>2. HTML, Javascript, css 최적화 및 이미지 복사</h3>
Cloud 서비스는 대부분 outbound 트래픽에 과금을 한다. CDN도 마찬가지로 전송된 만큼 과금한다. 따라서 전송 용량을 줄이면 비용이 줄어든다. 아주 작은 용량이라도 오랫동안 절약하면 절약된 비용은 생각보다 크다. 클라우드는 항상 아껴서 사용해야 한다. 또한 용량이 작으면 빠르다. 사용자가 조금이라도 쾌적하게 사이트를 사용할 수 있도록 최적화 해줘야 한다. 그 첫번째 방법이 minify 다.텍스트 기반의 파일들은 모두 minify를 할 수 있다. minify는 공백, 주석 등을 제거하고 js 파일의 경우 긴 변수 이름도 짧게 변경하는 방법등으로 용량을 줄이는 방법이다.

또한 이미지나 동영상에 비해 작은 javascript, CSS 파일의 경우 여러개로 구성되어 있을 경우 여러 번의 HTTP connection을 맺고 끊는 시간 때문에 속도가 느려진다. 따라서 가능하다면 javascript 파일을 하나로 합쳐서 효과를 볼 수 있다.

이 작업을 gulp의 몇 가지 플러그인을 이용해서 할 수 있다. gulp의 태스크를 만들고 pipe로 이어서 명령을 만들어준다.

여기서 config.production 가 true 일때만 minify 최적화를 실행하는데 이건 gulp 명령어의 옵션으로 production과 dev를 구분해준다. &gt; gulp --production 명령은 config.production을 true로 만들어서 minify를 수행한다. 이렇게 하는 이유는 dev 환경에서는 디버깅을 쉽게 하기 위해서 minify를 하지 않는 소스를 사용하는 것이 유리하기 때문이다.
<pre class="prettyprint">// js 파일을 합치고 uglify, gzip
// 소스 폴더의 모든 js 파일을 main.js 하나로 합치고 uglify()로 최적화 한다. 
gulp.task('combine-js', function () {
	return gulp.src(config.js)
		.pipe(concat('main.js'))
		.pipe(config.production ? uglify() : util.noop())  // production 일때만
		.pipe(gulp.dest(config.dist + 'js/'));
});

// HTML 파일 압축 , gzip
gulp.task('compress-html', function () {
	return gulp.src(config.html)
		.pipe(config.production ? minifyhtml() : util.noop())
		.pipe(gulp.dest(config.dist));
});

// css minify, gzip
gulp.task('minify-css', () =&gt; {
  return gulp.src(config.css)
    .pipe(config.production ? cleanCSS({compatibility: 'ie8'}) : util.noop())
    .pipe(gulp.dest(config.dist + 'css/'));
});

// img 폴더 복사. 단순히 복사만 한다. 
gulp.task('copy-img', function () {
	return gulp.src(config.img)
		.pipe(gulp.dest(config.dist + 'img/'));
});

// jwplayer 폴더 복사. 외부에서 가져온 소스와 관련 파일은 만지지 않고 그냥 복사만 했다. 
gulp.task('copy-jwplayer', function () {
	return gulp.src('src/jwplayer/**/*')
		.pipe(gulp.dest(config.dist + 'jwplayer/'));
});

gulp.task('build', ['combine-js','compress-html','copy-img','minify-css', 'copy-jwplayer']);</pre>
&nbsp;

마지막 라인에서는 build 라는 태스크를 만들고 위에서 정의한 4가지 태스크를 한번에 수행하는 명령을 만들었다. 이 build 태스크로 지금까지 만든 최적화 코드를 실행할 수 있다. command line 에서 다음과 같이 명령하면 4가지 작업이 수행된다. 결과는 dist 폴더에 생성된다. --production 옵션을 붙였다 떼었다 하면서 minify가 수행되는지도 확인해본다.
<pre class="prettyprint">&gt; gulp build
&gt; gulp build --production</pre>
<h3>3. 로컬 개발환경 설정</h3>
아무리 간단하고 정적인 코드라고 해도 디버깅이 필요하고 테스트가 필요하기 때문에 gulp-webserver를 사용해서 환경을 만들어준다. 그리고 default 작업을 만들어서 gulp 명령으로 실행되도록 한다. &gt; gulp 명령을 실행하면 build 가 실행되고 watch와 server도 실행된다. 웹 브라우저에서 http://localhost:8000 으로 접속한다. 그러면 index.html이 표시된다. 이 상태에서 소스를 수정하고 웹 브라우저에서 확인하면서 개발을 진행하면 된다.
<pre class="prettyprint">// 개발용 웹서버 실행 localhost:8000 
gulp.task('server', function () {
	return gulp.src(config.dist)
		.pipe(webserver());
});

// 변경 감지 및 업데이트 
gulp.task('watch', function () {
	livereload.listen();
	gulp.watch(config.js, ['combine-js']);
	gulp.watch(config.html, ['compress-html']);
	gulp.watch(config.img, ['copy-img']);
	gulp.watch(config.css, ['minify-css']);
	gulp.watch('dist/**').on('change', livereload.changed);
});

gulp.task('default', ['build','watch','server']);</pre>
<h3>4. Azure Blob 스토리지로 업로드</h3>
Azure Blob 스토리지로 배포를 할 때 Dev 사이트와 Prod(production) 사이트를 구분해서 진행하고 Prod 사이트에는 CDN을 붙여서 라이브 서비스에 활용하고 Dev 사이트는 개발 및 테스트용도록 사용하도록 해보자. 간단한 사이트지만 나름 DevOps 환경을 만들고 향후에 Visual Studio Team Services 같은 협업 툴을 이용하여 CI (Continuous Integration), CD (Continuous Deployment) 까지 설정 가능하다. Azure Storage Account를 만들고 Blob에 dev와 prod라는 이름으로 Container 두 개를 만든다.  두 개 모두 액세스 형식을 Blob 으로 오픈해준다.

<a href="/wp-content/uploads/2017/07/azure-blob-container.png"><img class="size-full wp-image-5241 aligncenter" src="/wp-content/uploads/2017/07/azure-blob-container.png" alt="" width="2560" height="1600" /></a>

업로드 중에 한가지 더 최적화를 해줄 수 있다. HTTP 압축을 이용해서 용량을 더 줄여보자. Azure Blob 스토리지로 올릴 때 텍스트 기반의 파일들 (HTML, Javascript, CSS)은 gzip으로 압축을 해주고 이미지나 동영상 같은 파일들은 이미 압축이 되어 있기 때문에 그냥 업로드 하는 방법을 쓰면된다. 다행히 gulp-deploy-azure-cdn 플러그인에 그 기능이 들어있다.  zip: true 옵션을 사용하면 컨텐츠를 gzip으로 압축하고 contentEncoding 값을 gzip으로 설정해서 업로드 한다. 이렇게 되면 HTTP 헤더에 contentEncoding: gzip 값이 설정되어 웹브라우저에서 올바로 컨텐츠를 표시할 수 있다. 전송용량이 또 한번 줄어들기 때문에 비용과 속도 면에서 효과를 볼 수 있다.
<pre class="prettyprint">// css, js, html파일을 제외한 파일들을 gzip하지 않고 Azure blog에 업로드
gulp.task('dev-without-gzip', function () { 
	return gulp.src(config.dist + "**/!(*.css|*.js|*.html)")
			.pipe(deployCdn({
                containerName: 'dev',
                serviceOptions: [config.azureStorageAccountName, config.azureStorageKey],
                folder:  '',
                zip: false,
				concurrentUploadThreads: 10,
			}));
});

// css, js, html 파일은 gzip으로 압축하고 contentEncoding을 gzip으로 설정하고 업로드
gulp.task('dev-gzip', function () { 
	return gulp.src(config.dist + "**/*.{css,js,html}")
			.pipe(deployCdn({
                containerName: 'dev',
                serviceOptions: [config.azureStorageAccountName, config.azureStorageKey],
                folder:  '',
                zip: true,
				concurrentUploadThreads: 10,
			}));
});

gulp.task('prod-without-gzip', function () { 
	return gulp.src(config.dist + '**/!(*.css|*.js|*.html)')
			.pipe(deployCdn({
                containerName: 'prod',
                serviceOptions: [config.azureStorageAccountName, config.azureStorageKey],
                folder:  '',
                zip: false,
				concurrentUploadThreads: 10,
			}));
});

gulp.task('prod-gzip', function () { 
	return gulp.src(config.dist + '**/*.{css,js,html}')
			.pipe(deployCdn({
                containerName: 'prod',
                serviceOptions: [config.azureStorageAccountName, config.azureStorageKey],
                folder:  '',
                zip: true,
				concurrentUploadThreads: 10,
			}));
});

gulp.task('deploy-dev', ['build','dev-gzip', 'dev-without-gzip']);
gulp.task('deploy-prod', ['build','prod-gzip', 'prod-without-gzip']);</pre>
이제 아래 명령으로 배포를 실행한다. prod 배포는 --production 스위치를 붙여준다.
<pre class="prettyprint">&gt; gulp deploy-dev
&gt; gulp deploy-prod --production</pre>
<a href="/wp-content/uploads/2017/07/deploy-prod.png"><img class="size-full wp-image-5244 aligncenter" src="/wp-content/uploads/2017/07/deploy-prod.png" alt="" width="2402" height="1760" /></a>

여기까지 gulpfile.js에 대한 설명이고 <a href="https://github.com/ilseokoh/jwplayertest/blob/master/gulpfile.js">전체 소스코드는 github</a>에서 살펴볼 수 있다.

최종 결과물을 보려면 Blob URL (예를들어 https://blobwebapp1.blob.core.windows.net/prod/index.html) 로 접속해서 결과물을 확인할 수 있다.

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5229</wp:post_id>
		<wp:post_date><![CDATA[2017-07-04 00:15:05]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-07-03 15:15:05]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[azure-blob-storage-web-site]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="azure"><![CDATA[Azure]]></category>
		<category domain="post_tag" nicename="azure"><![CDATA[azure]]></category>
		<category domain="post_tag" nicename="azure-blob-storage"><![CDATA[azure blob storage]]></category>
		<category domain="post_tag" nicename="azure-cdn"><![CDATA[azure cdn]]></category>
		<category domain="post_tag" nicename="azure-storage"><![CDATA[azure storage]]></category>
		<category domain="post_tag" nicename="blob"><![CDATA[blob]]></category>
		<category domain="post_tag" nicename="gulp"><![CDATA[gulp]]></category>
		<category domain="post_tag" nicename="minify"><![CDATA[minify]]></category>
		<category domain="post_tag" nicename="node-js"><![CDATA[node.js]]></category>
		<category domain="post_tag" nicename="uglify"><![CDATA[uglify]]></category>
		<category domain="post_tag" nicename="website"><![CDATA[website]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[azure-blob-storage-web-site__trashed]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[5252]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>사슴벌레 애벌레 횽뭉이</title>
		<link>http://ilseokoh.com/2017/08/23/stag-beetle/</link>
		<pubDate>Wed, 23 Aug 2017 12:22:37 +0000</pubDate>
		<dc:creator><![CDATA[ilseokoh]]></dc:creator>
		<guid isPermaLink="false">http://ilseokoh.com/?p=5258</guid>
		<description></description>
		<content:encoded><![CDATA[<ul>
 	<li>넙적사슴벌레 애벌레 횽뭉이</li>
 	<li>4.22일 부화, 현재 3령, 수컷</li>
 	<li>균사통에서 사육중</li>
</ul>
균사통 뚜껑쪽으로 올라 왔길래 잠시 놀아줌.

<a href="/wp-content/uploads/2017/08/IMG_9955.jpg"><img class="alignnone size-large wp-image-5260" src="/wp-content/uploads/2017/08/IMG_9955-1024x768.jpg" alt="" width="640" height="480" /></a>

<a href="/wp-content/uploads/2017/08/IMG_9953.jpg"><img class="alignnone size-large wp-image-5259" src="/wp-content/uploads/2017/08/IMG_9953-1024x768.jpg" alt="" width="640" height="480" /></a>

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5258</wp:post_id>
		<wp:post_date><![CDATA[2017-08-23 21:22:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-08-23 12:22:37]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[stag-beetle]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="%ec%82%ac%ec%8a%b4%eb%b2%8c%eb%a0%88"><![CDATA[사슴벌레]]></category>
		<category domain="category" nicename="%ec%9d%bc%ec%83%81"><![CDATA[일상]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[5261]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Managed Disk로 만든 Azure VM을 다른 지역/구독으로 이동</title>
		<link>http://ilseokoh.com/2017/09/27/azure-vm-image-copy/</link>
		<pubDate>Wed, 27 Sep 2017 09:08:34 +0000</pubDate>
		<dc:creator><![CDATA[ilseokoh]]></dc:creator>
		<guid isPermaLink="false">http://ilseokoh.com/?p=5292</guid>
		<description></description>
		<content:encoded><![CDATA[<h3>Managed 이미지</h3>
Managed Disk로 생성된 VM은 Azure 포탈에서 이미지로 만들고 그 이미지에서 새로운 VM을 생성할 수 있다. 이렇게 하면 원본 VM에 설치되어 있던 미들웨어, 애플리케이션이 설치된 그대로 새로운 VM이 생성되기 때문에 여러 곳에 같은 VM을 배포해야 하는 상황에 적용할 수 있다. 하지만 2017년 9월 현재 Managed 이미지에 제약사항이 있다. 다른 지역, 다른 구독으로는 이미지를 복사할 수 없다. 즉 다른 지역/구독으로 새로운 VM을 만들 수 없다. 현재 개발중.
<h3>Azure VM 이미지를 다른 지역과 구독으로 이전</h3>
조금 단계가 추가되지만 다른 방법을 쓰면 할 수 있다. 순서는 아래와 같다.
<div role="main">
<div id="js-repo-pjax-container" data-pjax-container="">
<div class="container new-discussion-timeline experiment-repo-nav">
<div class="repository-content">
<div id="readme" class="readme boxed-group clearfix announce instapaper_body md"><article class="markdown-body entry-content">
<ol>
 	<li>(옵션) 포탈에서 대상이 되는 VM의 디스크를 Snapshot으로 백업한다. (<a href="https://docs.microsoft.com/ko-kr/azure/virtual-machines/windows/snapshot-copy-managed-disk">참조문서</a>)</li>
 	<li>VM을 일반화 (Generalize)한다. (참조문서 <a href="https://docs.microsoft.com/ko-kr/azure/virtual-machines/windows/capture-image-resource">윈도우 서버</a>, <a href="https://docs.microsoft.com/ko-kr/azure/virtual-machines/linux/capture-image">리눅스</a>)</li>
 	<li>(옵션) 포탈에서 VM에서 이미지를 만들고 VM으로 잘 생성되는지 테스트한다.</li>
 	<li>포탈에서 디스크를 찾아 Export 메뉴로 스토리지 SAS URL 생성</li>
 	<li>타겟이 되는 지역에 리소스그룹과 스토리지를 하나 만들어준다.</li>
 	<li>Powershell 또는 Azure CLI 2.0을 이용하여 스크립트 실행. 스크립트 상단에 변수를 설정해야 한다.</li>
</ol>
PowerShell과 Azure CLI 2.0을 사용한 쉘 스크립트는 Github에 공개했다.

<a href="https://github.com/ilseokoh/azure-managed-image-copy">https://github.com/ilseokoh/azure-managed-image-copy</a>

스크립트를 적용하기 전후에 Azure 포탈에서 할 수 있는 작업들이 있다. 아래 동영상을 보면 전체 과정에 대한 데모를 볼 수 있다.

[embed]https://www.youtube.com/watch?v=5n4256-z16o[/embed]

</article></div>
</div>
</div>
</div>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5292</wp:post_id>
		<wp:post_date><![CDATA[2017-09-27 18:08:34]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-09-27 09:08:34]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[azure-vm-image-copy]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="azure"><![CDATA[Azure]]></category>
		<category domain="post_tag" nicename="azure"><![CDATA[azure]]></category>
		<category domain="post_tag" nicename="copy"><![CDATA[copy]]></category>
		<category domain="post_tag" nicename="image"><![CDATA[image]]></category>
		<category domain="post_tag" nicename="managed-disk"><![CDATA[managed disk]]></category>
		<category domain="post_tag" nicename="managed-image"><![CDATA[managed image]]></category>
		<category domain="post_tag" nicename="%ec%95%a0%ec%a0%80"><![CDATA[애저]]></category>
		<category domain="post_tag" nicename="%ed%81%b4%eb%9d%bc%ec%9a%b0%eb%93%9c"><![CDATA[클라우드]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_731154a929d4161809d389cc7887bb6b]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_7155425707082bac6f4913acc3cbeac2]]></wp:meta_key>
			<wp:meta_value><![CDATA[<iframe width="640" height="360" src="https://www.youtube.com/embed/5n4256-z16o?feature=oembed" frameborder="0" allowfullscreen></iframe>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_time_7155425707082bac6f4913acc3cbeac2]]></wp:meta_key>
			<wp:meta_value><![CDATA[1506502772]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[5296]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Potable Lamp #1 - Idea sketch</title>
		<link>http://ilseokoh.com/2017/10/13/lamp-1-sketch/</link>
		<pubDate>Thu, 12 Oct 2017 21:59:44 +0000</pubDate>
		<dc:creator><![CDATA[ilseokoh]]></dc:creator>
		<guid isPermaLink="false">http://ilseokoh.com/?p=5301</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="/wp-content/uploads/2017/10/sketch-v1.jpeg"><img class="size-full wp-image-5303 aligncenter" src="/wp-content/uploads/2017/10/sketch-v1.jpeg" alt="" width="626" height="606" /></a>
<h3>Portable Lamp</h3>
Maker Academy Project - Fab lab SEOUL
<h4>기능</h4>
<ul>
 	<li>Rechargeable: Micro USB, Charging Indicator : Red / Green</li>
 	<li>Soft Latch Power Button</li>
 	<li>Touch based dimmer controller</li>
</ul>
<h4>외관</h4>
<ul>
 	<li>가죽끈 손잡이</li>
 	<li>흰색 플라스틱 바디 - 3D Printed</li>
 	<li>나무 베이스</li>
</ul>
<h4>목표</h4>
<ul>
 	<li>Simple and minimal design</li>
 	<li>Low Cost</li>
 	<li>Long lighting time</li>
</ul>
&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5301</wp:post_id>
		<wp:post_date><![CDATA[2017-10-13 06:59:44]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-10-12 21:59:44]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[lamp-1-sketch]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="diy"><![CDATA[diy]]></category>
		<category domain="post_tag" nicename="fab-lab"><![CDATA[fab lab]]></category>
		<category domain="category" nicename="maker"><![CDATA[I'm Maker]]></category>
		<category domain="post_tag" nicename="lamp"><![CDATA[lamp]]></category>
		<category domain="post_tag" nicename="maker"><![CDATA[maker]]></category>
		<category domain="post_tag" nicename="portable-lamp"><![CDATA[portable lamp]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>54</wp:comment_id>
			<wp:comment_author><![CDATA[Portable Lamp #2 &#8211; Concept Design &#8211; 오일석의 블로그]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://ilseokoh.com/2017/10/16/portable-lamp-2-concept-design/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[52.231.32.124]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2017-10-16 10:53:59]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2017-10-16 01:53:59]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] 아이디어에서 제품까지 가는 과정에서 생각도 바뀌고, 문제도 생기고, 내가 가진 기술과 경험으로 할 수 없는 것 들이 생기게 마련이다. [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Fusion 360 스터디</title>
		<link>http://ilseokoh.com/2017/10/13/fusion-360-study/</link>
		<pubDate>Thu, 12 Oct 2017 22:57:36 +0000</pubDate>
		<dc:creator><![CDATA[ilseokoh]]></dc:creator>
		<guid isPermaLink="false">http://ilseokoh.com/?p=5305</guid>
		<description></description>
		<content:encoded><![CDATA[물건을 만들기 위한 3D 모델링에 적합한 툴은 따로 있었다. Autodesk 사의 Fusion 360. 그 외 Solidworks 같은 툴이 원조격 인가보다. 그 동안 애니메이션 제작에 최적화 되었다고 보이는 Foundry사의 Modo에 시간과 돈을 투자했지만 정확한 치수가 필요한 모델링에는 적합하지 않았다.

기초 과정은 Lynda.com에서 <a href="https://www.lynda.com/Fusion-360-tutorials/Fusion-360-Essential-Training/614292-2.html">"Fusion 360 Essential" 강좌</a>를 들었다. 더 찾아보니 <a href="https://www.autodesk.co.kr/products/fusion-360/learn-training-tutorials">Autodesk 홈페이지에 기초 강좌</a>가 많이 있었다.

그리고 연휴를 이용해서 유투브 강좌를 몇 가지 따라했다.

1. 경첩 : <a href="https://www.youtube.com/watch?v=iMXEjyda9rk&amp;index=12&amp;list=PLjyiWW2QlmFwUgSxZJONo1uoyN23CksZ4">Fusion 360 3D Sketch Hinges | Tutorial Beginner | Exercise 5</a>

<a href="/wp-content/uploads/2017/10/hinge.png"><img class="alignnone size-full wp-image-5309" src="/wp-content/uploads/2017/10/hinge.png" alt="" width="1273" height="742" /></a>

2. 기어: <a href="https://www.youtube.com/watch?v=VKJjzdWjZ4U&amp;list=PLjyiWW2QlmFwUgSxZJONo1uoyN23CksZ4&amp;index=16">Fusion 360 3D Sketch Gear Tutorial | Beginner Practice 1</a>

<a href="/wp-content/uploads/2017/10/gear.png"><img class="alignnone size-full wp-image-5307" src="/wp-content/uploads/2017/10/gear.png" alt="" width="1679" height="746" /></a>

3. 너트 : <a href="https://www.youtube.com/watch?v=UN4mUJWckS0&amp;index=15&amp;list=PLjyiWW2QlmFwUgSxZJONo1uoyN23CksZ4">Fusion 360 3D Sketch Nuts Tutorial | Beginner Practice 2</a>

<a href="/wp-content/uploads/2017/10/nut.png"><img class="alignnone size-full wp-image-5308" src="/wp-content/uploads/2017/10/nut.png" alt="" width="1679" height="746" /></a>

4. 볼트: <a href="https://www.youtube.com/watch?v=lsoEUDIFoNI&amp;list=PLjyiWW2QlmFwUgSxZJONo1uoyN23CksZ4&amp;index=14">Fusion 360 3D Sketch Cap Screw Tutorial | Beginner Practice 3</a>

<a href="/wp-content/uploads/2017/10/bolt-v1.png"><img class="alignnone size-full wp-image-5312" src="/wp-content/uploads/2017/10/bolt-v1.png" alt="" width="1273" height="742" /></a>

5. 베어링: <a href="https://www.youtube.com/watch?v=IWFT1fOpYMo&amp;list=PLjyiWW2QlmFwUgSxZJONo1uoyN23CksZ4&amp;index=8">Fusion 360 3D Bearing Tutorial Beginner Practice 9</a>

<a href="/wp-content/uploads/2017/10/bearing.png"><img class="alignnone size-full wp-image-5310" src="/wp-content/uploads/2017/10/bearing.png" alt="" width="1678" height="745" /></a>

6. Drive Flange: <a href="https://www.youtube.com/watch?v=vmMlyQseBRE&amp;index=7&amp;list=PLjyiWW2QlmFwUgSxZJONo1uoyN23CksZ4">Fusion 360 3D Drive Flange Tutorial Beginner Practice 10</a>

<a href="/wp-content/uploads/2017/10/drive-flange-v2.png"><img class="alignnone size-full wp-image-5311" src="/wp-content/uploads/2017/10/drive-flange-v2.png" alt="" width="1678" height="745" /></a>

7. 쓰레받이: <a href="https://www.youtube.com/watch?v=_1PzvFyLQpk&amp;index=9&amp;list=PLjyiWW2QlmFwUgSxZJONo1uoyN23CksZ4">Fusion 360 3D Garbage Shovel Tutorial Beginner Practice 8</a>

<a href="/wp-content/uploads/2017/10/gabage-shovel-v6.png"><img class="alignnone size-full wp-image-5314" src="/wp-content/uploads/2017/10/gabage-shovel-v6.png" alt="" width="1273" height="742" /></a>

8. 나무상자: <a href="https://www.youtube.com/watch?v=ao27Hac5Uk4&amp;index=11&amp;list=PLjyiWW2QlmFwUgSxZJONo1uoyN23CksZ4">Fusion 360 3D Wooden Toolbox | Tutorial Beginner | Practice 6</a>

<a href="/wp-content/uploads/2017/10/wooden-box-v3.png"><img class="alignnone size-full wp-image-5313" src="/wp-content/uploads/2017/10/wooden-box-v3.png" alt="" width="1679" height="746" /></a>

9. 전등갓 : <a href="https://www.youtube.com/watch?v=3PnKBSOulwo">Fusion 360: Design a 3D Printed Lampshade</a>

<a href="/wp-content/uploads/2017/10/lamp.png"><img class="alignnone size-full wp-image-5317" src="/wp-content/uploads/2017/10/lamp.png" alt="" width="1677" height="744" /></a>

10. 손잡이 : <a href="https://www.youtube.com/watch?v=NypRE2aFhh4">Surface Modeling with Fusion 360</a>

<a href="/wp-content/uploads/2017/10/handle-v5.png"><img class="alignnone size-full wp-image-5315" src="/wp-content/uploads/2017/10/handle-v5.png" alt="" width="1707" height="675" /></a>

11. 피젯스피너 : 메이커 아카데미 과제

<a href="/wp-content/uploads/2017/10/spinner.png"><img class="alignnone size-full wp-image-5318" src="/wp-content/uploads/2017/10/spinner.png" alt="" width="1273" height="742" /></a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5305</wp:post_id>
		<wp:post_date><![CDATA[2017-10-13 07:57:36]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-10-12 22:57:36]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[fusion-360-study]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="3d"><![CDATA[3d]]></category>
		<category domain="post_tag" nicename="3d-model"><![CDATA[3d model]]></category>
		<category domain="post_tag" nicename="3d-modeling"><![CDATA[3d modeling]]></category>
		<category domain="post_tag" nicename="fusion-360"><![CDATA[fusion 360]]></category>
		<category domain="category" nicename="maker"><![CDATA[I'm Maker]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[5306]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Portable Lamp #2 - Concept Design</title>
		<link>http://ilseokoh.com/2017/10/16/portable-lamp-2-concept-design/</link>
		<pubDate>Mon, 16 Oct 2017 01:53:53 +0000</pubDate>
		<dc:creator><![CDATA[ilseokoh]]></dc:creator>
		<guid isPermaLink="false">http://ilseokoh.com/?p=5320</guid>
		<description></description>
		<content:encoded><![CDATA[<h3>포터블 램프 컨셉 디자인</h3>
<a href="http://ilseokoh.com/2017/10/13/lamp-1-sketch/">아이디어</a>에서 제품까지 가는 과정에서 생각도 바뀌고, 문제도 생기고, 내가 가진 기술과 경험으로 할 수 없는 것 들이 생기게 마련이다.
<ul>
 	<li>이 제품에 디머(Dimmer)가 무슨 필요가 있을까? 삭제</li>
 	<li>곡면에 디자인을 적용하고 뭔가 배치하는게 쉬운일이 아니었다.</li>
 	<li>디머가 빠지니까 더 심플해지고 좋아졌다.</li>
 	<li>컨셉은 잡기 쉬운데 내부 부품의 배치와 지지대, 결합 등을 생각하면 내부 모델링이 쉽지는 않아 보인다.</li>
</ul>
<a href="/wp-content/uploads/2017/10/portable-lamp-concept-design.jpg"><img class="alignnone size-full wp-image-5321" src="/wp-content/uploads/2017/10/portable-lamp-concept-design.jpg" alt="" width="1280" height="720" /></a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5320</wp:post_id>
		<wp:post_date><![CDATA[2017-10-16 10:53:53]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-10-16 01:53:53]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[portable-lamp-2-concept-design]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="concept-design"><![CDATA[concept design]]></category>
		<category domain="post_tag" nicename="design"><![CDATA[design]]></category>
		<category domain="category" nicename="maker"><![CDATA[I'm Maker]]></category>
		<category domain="post_tag" nicename="portable-lamp"><![CDATA[portable lamp]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[5324]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Portable Lamp #3 - 회로 및 부품</title>
		<link>http://ilseokoh.com/2017/10/22/portable-lamp-3-circuit/</link>
		<pubDate>Sun, 22 Oct 2017 12:41:25 +0000</pubDate>
		<dc:creator><![CDATA[ilseokoh]]></dc:creator>
		<guid isPermaLink="false">http://ilseokoh.com/?p=5326</guid>
		<description></description>
		<content:encoded><![CDATA[LED를 켜는 단순한 구조의 램프지만 필요한 회로들이 여러가지가 필요하다. 리튬이온 전지를 충전도 해야하고, 전원 스위치도 필요하고, LED를 켜야한다. 여기에 충전을 무선충전 기능을 넣기로 했으므로 USB와 Qi Charging Receiver로 부터 받는 전원 두 가지를 자연스럽게 스위칭 해줘야 한다.
<ul>
 	<li>두 개의 전원(Qi Receiver, USB)이 들어왔을 때 USB가 우선순위로 공급되도록 스위칭하는 회로</li>
 	<li>3.7v 리튬이온 배터리 (3.7v, 2600mAh x 3개) 충전회로</li>
 	<li>전원 스위치. 기계적인 토글 스위치가 아닌 Soft Latch 전원 스위치</li>
 	<li>LED 회로</li>
</ul>
짧은 시간에 이런 회로들을 설계하고 테스트하기에는 시간이 너무 부족해서 모듈화 되어 있는 제품들을 구매해서 조합하는 방법을 사용하기로 했다. 세 가지 회로를 찾아서 구매 했다.
<ol>
 	<li>리튬이온 배터리 충전 회로 :<a href="https://www.adafruit.com/product/259">USB LiIon/LiPoly charger - v1.2</a></li>
 	<li>Soft Latch 전원 스위치 : <a href="https://www.adafruit.com/product/1400">Adafruit Push-button Power Switch Breakout</a></li>
 	<li>무선충전 리시버: Universal Qi Wireless Receiver Module</li>
 	<li>리튬이온 배터리 팩: 3개 병렬 연결</li>
</ol>
Afdfuit 라는 사이트는 필요한 회로들을 어떻게 이렇게 꼭 집어서 다 준비해놓았고 관련 동영상, 응용 방법 등 너무 편리하게 되어 있는지 감동적이다. 배송비가 약 2만원이 들었다.

배터리는 세운상가를 돌아다니면서 배터리 전문점에서 3개의 팩을 병렬로 패키징해서 만들었다. 구매하고 보니 LG 배터리였다.  <span class="ma-title-text" title="Original LG 18650B4 battery LGABB41865 li ion battery 3.7v 2600mAh LG B4 18650 battery">LGABB41865 li ion battery 3.7v 2600mAh 3개를 병렬로 묶었으니 3.7v 7400mAh 의 용량을 가진다. </span>

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5326</wp:post_id>
		<wp:post_date><![CDATA[2017-10-22 21:41:25]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-10-22 12:41:25]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[portable-lamp-3-circuit]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="fab-lab-seoul"><![CDATA[fab lab seoul]]></category>
		<category domain="category" nicename="maker"><![CDATA[I'm Maker]]></category>
		<category domain="post_tag" nicename="maker"><![CDATA[maker]]></category>
		<category domain="post_tag" nicename="portable-lamp"><![CDATA[portable lamp]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[5328]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>55</wp:comment_id>
			<wp:comment_author><![CDATA[Portable Lamp #4 &#8211; 회로 테스트 &#8211; 오일석의 블로그]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://ilseokoh.com/2017/10/22/portable-lamp-4-circuit-test/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[52.231.32.124]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2017-10-22 22:09:24]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2017-10-22 13:09:24]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] 부품을 구입 했으니 회로 테스트가 필요하다. 직접 회로를 그리고 PCB를 만들어야 할 두개의 전원 소스 입력 부분과 LED  부분을 제외하고 나머지 부분을 테스트 해봤다. 대부분 모듈 형태의 검증된 회로를 단순히 서로 연결하는 것이기 때문에 큰 어려움은 없었다. 테스트는 &#8220;전원(USB 또는 Qi Wireless Receiver) &#8211; 배터리 충전 회로 &#8211; 배터리 &#8211; 전원버튼&#8221; 이 회로를 연결하고 배터리가 충전이 되면서 3.7v 전원이 공급되는 걸 보는 것이다. 테스트 환경에 오실로스코프가 없어서 전압을 잴 수 있는 멀티 미터(일명 테스터기)를 사용했고 회로의 연결은 Bread Board(일명 빵판)을 사용했다. [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Portable Lamp #4 - 회로 테스트</title>
		<link>http://ilseokoh.com/2017/10/22/portable-lamp-4-circuit-test/</link>
		<pubDate>Sun, 22 Oct 2017 13:09:19 +0000</pubDate>
		<dc:creator><![CDATA[ilseokoh]]></dc:creator>
		<guid isPermaLink="false">http://ilseokoh.com/?p=5330</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://ilseokoh.com/2017/10/22/portable-lamp-3-circuit/">부품을 구입 했으니</a> 회로 테스트가 필요하다. 직접 회로를 그리고 PCB를 만들어야 할 두개의 전원 소스 입력 부분과 LED  부분을 제외하고 나머지 부분을 테스트 해봤다. 대부분 모듈 형태의 검증된 회로를 단순히 서로 연결하는 것이기 때문에 큰 어려움은 없었다. 테스트는 "전원(USB 또는 Qi Wireless Receiver) - 배터리 충전 회로 - 배터리 - 전원버튼" 이 회로를 연결하고 배터리가 충전이 되면서 3.7v 전원이 공급되는 걸 보는 것이다. 테스트 환경에 오실로스코프가 없어서 전압을 잴 수 있는 멀티 미터(일명 테스터기)를 사용했고 회로의 연결은 Bread Board(일명 빵판)을 사용했다.

스펙으로 확인하고 머리속에서만 작동하던 회로가 서로 연결되고 작동이 확인되는 순간이다.
<h3>무선 충전 리시버의 확인</h3>
무선충전은 대표적으로 갤럭시 시리즈가 가능하기 시작해서 이제는 아이폰 8까지 가능하게 되었다. 사실 무선 충전이라는 말이 어색할 정도로 충전기와 폰이 딱 붙어야 만 충전이 가능하다. 내가 구입한 리시버는 어떤 특성을 가지고 있을까? 이걸 아는 건 중요한데 램프의 가장 밑바닥은 나무고 그 나무를 통과해서 충전이 되기 때문에 테스트가 필요했다. 나무라는 재질을 사이에 두고 어떤 거리에서 전원 공급이 가능할까?

결론은 최대 2.7mm까지 가능하다. 즉, 바닥의 두께를 그 이하로 만들면서 동시에 너무 얇아져서 나무가 깨지는 일이 없도록 조정을 해야한다. 2.5mm로 만들면 되겠다. 테스트는 합판으로 했지만 원목을 사용할 예정이므로 한번 더 테스트가 필요하다.

&nbsp;

<a href="/wp-content/uploads/2017/10/qi-reciever.jpg"><img class="alignnone size-full wp-image-5335" src="/wp-content/uploads/2017/10/qi-reciever.jpg" alt="" width="3291" height="2231" /></a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5330</wp:post_id>
		<wp:post_date><![CDATA[2017-10-22 22:09:19]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-10-22 13:09:19]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[portable-lamp-4-circuit-test]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="fab-lab-seoul"><![CDATA[fab lab seoul]]></category>
		<category domain="category" nicename="maker"><![CDATA[I'm Maker]]></category>
		<category domain="post_tag" nicename="maker"><![CDATA[maker]]></category>
		<category domain="post_tag" nicename="maker-academy"><![CDATA[maker academy]]></category>
		<category domain="post_tag" nicename="portable-lamp"><![CDATA[portable lamp]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[5331]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Portable Lamp #5 - LED 테스트</title>
		<link>http://ilseokoh.com/2017/11/08/portable-lamp-5-led-test/</link>
		<pubDate>Wed, 08 Nov 2017 02:28:29 +0000</pubDate>
		<dc:creator><![CDATA[ilseokoh]]></dc:creator>
		<guid isPermaLink="false">http://ilseokoh.com/?p=5340</guid>
		<description></description>
		<content:encoded><![CDATA[조명을 만들기 때문에 결국 LED를 켜야한다. 보통 회로에서 상태를 보여주는 용도로 많이 사용해봤지만 요즘 조명에서 사용하는 LED는 조금 달랐다. 스터디가 필요하다. 알고싶은 것들은 이런 것들이다.
<ul>
 	<li>사용할 배터리의 용량과 전체 회로에서 사용하는 전류를 측정해서 충전된 상태에서 몇 시간 사용할 수 있을지 계산</li>
 	<li>3.7v 배터리로 켤 수 있는 LED</li>
 	<li>LED와 같이 사용할 정확한 저항값 계산</li>
 	<li>밝은 흰색</li>
 	<li>밝기</li>
 	<li>부품의 패키지는 SMD 형태로 조명에서 사용하는 LED 사용</li>
</ul>
<h3><strong>LED 관련 이론</strong></h3>
<h4><strong>순방향 전압(Forward Voltage)</strong></h4>
LED도 다이오드기 때문에 다이오드의 특성을 그대로 가지고 있다. 순방향 전압은 LED에 순방향으로 전류가 흐를때 강하되는 전압을 말한다. 반대로 최소한 순방향 강하전압 이상의 전압을 가해야만 전류가 흐를 수 있다. 즉, 순방향 전압 이상으로 전압을 걸어줘야 LED가 켜진다. Portable Lamp의 경우 3.7v를 사용할 것이기 때문에 LED를 선택할 때 순방향 전압이 3.7v 이상인 LED를 선택해야 한다.
<h4><strong>순방향 허용 전류 (Forward Continuous Current)</strong></h4>
순방향으로 전압을 걸었을 때 허용되는 최대 전류를 말한다.  이 값으로 저항값을 대략 계산할 수 있다.
<h4><strong>LED 저항값 계산법</strong></h4>
<blockquote>(입력전압 - LED전압) / LED전류=저항값</blockquote>
<h4><strong>색온도 (Color temperature)</strong></h4>
<a href="http://ilseokoh.com/wp-content/uploads/2017/11/color-temp.png"><img class="size-full wp-image-5342 aligncenter" src="http://ilseokoh.com/wp-content/uploads/2017/11/color-temp.png" alt="" width="700" height="240" /></a>

<a href="https://ko.wikipedia.org/wiki/색온도">색온도</a>는 색을 절대온도(K, 캘빈)를 사용해서 숫자로 표현한 것이다. 그림에서 보면 색온도에 따른 색을 볼 수 있다. Portable Lamp는 6000K 부근에서 선택을 해서 밝은 흰색이 전등갓에 은은하게 퍼지게 할 생각이다.

실제 LED 스펙을 살펴보면 이제 이해가 좀 되기 시작한다.

<a href="/wp-content/uploads/2017/11/led-spec-sample.jpg"><img class=" wp-image-5344 aligncenter" src="/wp-content/uploads/2017/11/led-spec-sample.jpg" alt="" width="858" height="348" /></a>

이 LED는 흰색을 표현하고 3.05v 만 걸어주면 켤 수 있다. 대략 60mA의 전류가 흐른다. 나는 3.7v를 사용할 것이다. (전원 - LED전원) / LED전류 = (3.7-3.05)/0.06=10.8333 10옴 정도의 저항을 사용하면 적당한 밝기로 켜진다.
<h4>조명용 LED 사이즈</h4>
조명 LED는 아래와 같은 종류가 있다. 숫자는 크기를 의미한다.

<a href="/wp-content/uploads/2017/11/led-size.jpg"><img class="size-full wp-image-5345 aligncenter" src="/wp-content/uploads/2017/11/led-size.jpg" alt="" width="776" height="279" /></a>

LED는 여러가지 모양이 있지만 요즘 조명에서 사용하는 LED를 보면 기반이나 줄에 납짝 붙어있고 밝은 빛을 낸다. 아무래도 조명용 LED를 사용하는 게 좋을 것 같아서 살펴봤더니 여러가지 모양과 패키지가 있다. 더불어서 방열판도 있고 렌즈가 붙어 있는 것도 있고 스트립 타입으로 잘라서 쓰는 것도 있고 구동 드라이버까지 LED 조명의 세계도 깊었다. 대걔 12V 어댑터를 사용해서 LED 스트립을 잘라서 이어 붙여서 쉽게 사용할 수 있도록 잘 모듈화 되어 있다.

<a href="/wp-content/uploads/2017/11/plcc6-5050-smd-led-schematics-dimensions-plcc-6_6.jpg"><img class=" wp-image-5346 aligncenter" src="/wp-content/uploads/2017/11/plcc6-5050-smd-led-schematics-dimensions-plcc-6_6.jpg" alt="" width="583" height="583" /></a>

Portable Lamp의 경우 12V도 없고 잘 만들어진 스트립을 사용할 공간도 없어서 LED 만 사용하기로 했다. 세운상가 LED 가게에서 5050 LED 20개를 샘플로 구매해서 켜봤다. 다리가 총 6개고 구조는 3개의 LED가 별도로 들어있는 것 처럼 표현되어 있는데 다리 3개를 붙여서 하나의 LED 처럼 연결하니까 켜진다. 밝은 희색 빛이 표현되었다. 이걸 이제 PCB에 올려야 한다.

<a href="/wp-content/uploads/2017/11/IMG-0426.jpg"><img class="aligncenter wp-image-5349" src="/wp-content/uploads/2017/11/IMG-0426.jpg" alt="" width="616" height="533" /></a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5340</wp:post_id>
		<wp:post_date><![CDATA[2017-11-08 11:28:29]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-11-08 02:28:29]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[portable-lamp-5-led-test]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="how-to-use-led"><![CDATA[how to use led]]></category>
		<category domain="category" nicename="maker"><![CDATA[I'm Maker]]></category>
		<category domain="post_tag" nicename="led"><![CDATA[led]]></category>
		<category domain="post_tag" nicename="led-%ec%9d%b4%eb%a1%a0"><![CDATA[led 이론]]></category>
		<category domain="post_tag" nicename="maker"><![CDATA[maker]]></category>
		<category domain="post_tag" nicename="maker-academy"><![CDATA[maker academy]]></category>
		<category domain="post_tag" nicename="portable-lamp"><![CDATA[portable lamp]]></category>
		<category domain="post_tag" nicename="%ec%a1%b0%eb%aa%85-led"><![CDATA[조명 led]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[5348]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Portable Lamp #8 - 3D 모델 상세 설계</title>
		<link>http://ilseokoh.com/2017/11/12/portable-lamp-detail-modeling/</link>
		<pubDate>Sun, 12 Nov 2017 10:50:49 +0000</pubDate>
		<dc:creator><![CDATA[ilseokoh]]></dc:creator>
		<guid isPermaLink="false">http://ilseokoh.com/?p=5339</guid>
		<description></description>
		<content:encoded><![CDATA[Fusion 360으로 모델링을 해서 렌더링까지 해보고 자를 들고 대략의 크기나 느낌을 머리속에서 생각하다 보니 어떤 느낌인지 도저히 감을 잡을 수 없다. 100mm 지름에 50mm높이의 원통은 실제 어떤 느낌일까? 우선 종이로 만들어봤다. 덩치가 좀 커보이긴 했지만 나쁘지 않았다.

<a href="/wp-content/uploads/2017/11/IMG_0465.jpg"><img class="size-large wp-image-5370 aligncenter" src="/wp-content/uploads/2017/11/IMG_0465-1024x778.jpg" alt="" width="640" height="486" /></a>

이제 컨셉 디자인에서 벗어나서 상세 제품 디자인을 해야겠다. 실제 일하시는 분들은 어떤 용어를 쓰는지 모르겠지만 내부에 부품들도 들어가야 하고 조립도 되어야 하니 상세한 크기를 정해서 내부 디자인과 외부 디자인을 모두 해야 제품이 나올 것 같다. 아무리 프로토타입이지만 그럴듯한 제품의 형태를 띄고 싶다. 대충 모양을 만드는 것과 제품 설계는 차원이 다른 일이었다. 치수 하나하나 적당한 간격을 줘야하고 내부 부품들의 위치와 크기를 총체적으로 고려해야 했다. 특히 제일 어려운 부분이 버튼 부분이었다. Fusion 360을 다시 펼쳤다.
<h4>전체 구성</h4>
손잡이와 전자 부품을 제외한 나머지 부분은 총 4 부품으로 구성된다. 가장 아래는 나무로 CNC 가공을 통해서 만들 예정이고 나머지는 3D 프린터로 구성할 예정이다.

<a href="/wp-content/uploads/2017/11/config.jpg"><img class="size-large wp-image-5376 aligncenter" src="/wp-content/uploads/2017/11/config-1024x698.jpg" alt="" width="640" height="436" /></a>

&nbsp;
<h4>전등갓과 서포터의 연결</h4>
윗부분과 아랫부분을 연결하는 방법이 필요하다. 서포터라는 부품에 전등갓을 끼우는 형식으로 설계하고 서포터에는 전자 부품들이 들어가도록 했다. 서포터와 나무는 작은 피스로 고정하는 방법이 적당할 것 같다.

<a href="/wp-content/uploads/2017/11/suporter-lampshape.jpg"><img class="size-large wp-image-5373 aligncenter" src="/wp-content/uploads/2017/11/suporter-lampshape-1024x698.jpg" alt="" width="640" height="436" /></a>
<h4>베이스와 서포터의 결합</h4>
나무로 만들 베이스에 플라스틱 서포터가 쏙 들어가야 한다. 여유간격을 0.5mm로 잡았다.

<a href="/wp-content/uploads/2017/11/base-supporter.jpg"><img class="size-large wp-image-5374 aligncenter" src="/wp-content/uploads/2017/11/base-supporter-1024x698.jpg" alt="" width="640" height="436" /></a>
<h4>버튼</h4>
버튼은 별도 부품을 빼고 푸시버튼 부품에 끼울 수 있도록 설계했다. 버튼 부품은 서포터와 베이스를 관통해서 약 1mm만 튀어나오도록 했고 0.5mm 간격을 줬다.

<a href="/wp-content/uploads/2017/11/button.jpg"><img class="size-large wp-image-5375 aligncenter" src="/wp-content/uploads/2017/11/button-1024x698.jpg" alt="" width="640" height="436" /></a>
<h4>Parameterized Design</h4>
설계할 때 변수를 써서 치수를 만드는게 좋다고 배웠다. 한번에 디자인을 성공할 수는 없기 때문에 수정할 때 사용할 수 있도록 변수를 써서 디자인했다. 실제 적용해보니 시간도 많이 걸리고 생각도 많이 해야한다. 변수의 치수 하나를 변경하면 전체가 문제없이 수정되면 좋겠는데 그게 쉬운일은 아닌것 같다.

<a href="/wp-content/uploads/2017/11/parameterized.jpg"><img class="size-large wp-image-5378 aligncenter" src="/wp-content/uploads/2017/11/parameterized-1024x715.jpg" alt="" width="640" height="447" /></a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5339</wp:post_id>
		<wp:post_date><![CDATA[2017-11-12 19:50:49]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-11-12 10:50:49]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[portable-lamp-detail-modeling]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="maker"><![CDATA[I'm Maker]]></category>
		<category domain="post_tag" nicename="maker"><![CDATA[maker]]></category>
		<category domain="post_tag" nicename="maker-academy"><![CDATA[maker academy]]></category>
		<category domain="post_tag" nicename="portable-lamp"><![CDATA[portable lamp]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[5377]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Portable Lamp #6 - 외부전원 공급 회로</title>
		<link>http://ilseokoh.com/2017/11/11/portable-lamp-6-external-power-supply-circuit/</link>
		<pubDate>Sat, 11 Nov 2017 02:40:13 +0000</pubDate>
		<dc:creator><![CDATA[ilseokoh]]></dc:creator>
		<guid isPermaLink="false">http://ilseokoh.com/?p=5352</guid>
		<description></description>
		<content:encoded><![CDATA[Portable Lamp는 외부전원 2가지를 이용해서 충전을 하는 기능이 있다. Micro USB 포트(안드로이드 휴대폰 충전 단자)로 5V 입력을 받거나 <a href="http://shopping.naver.com/search/all.nhn?query=%EB%AC%B4%EC%84%A0%EC%B6%A9%EC%A0%84%EA%B8%B0&amp;cat_id=&amp;frm=NVSHATC">무선충전기(Qi Charger)</a>를 통해서 5V를 입력 받아서 배터리를 충전하는 회로로 연결된다. 소스가 2개이기 때문에 스위칭을 해줘야 한다. 2개의 소스에서 동시에 전원이 공급될수도 있고 한쪽에서만 들어오기도 한다. 이런 경우가 많은지 'ORing' 이라는 용어가 있다.
<blockquote>ORing 이란 두 개 이상의 전원을 이용해서 가용성을 높일 때 두 개 이상의 전원을 연결하는 방법</blockquote>
검색을 해보니 다이오드를 이용하는 단순한 방법이 있기는 한데 전압 강하가 있거나 스위칭의 특성이 좋지 않은 것 같다. 좀 더 비싸고 좋은 방법을 찾다보니 <a href="http://cds.linear.com/docs/en/datasheet/4412fb.pdf">LTC4412라는 "Low loss PowerPath controller in ThinSOT" </a>칩을 찾았다. <a href="http://cds.linear.com/docs/en/datasheet/4412fb.pdf">데이터시트</a>를 보면 샘플 회로가 나와 있다. 기본 회로에는 쇼트키 다이오드와 P-Channel MOSFET이 필요하다. 데이터시트를 정독하면 아래 회로는 이렇게 해석된다.  LTC4412는 ideal diode이고 P-ch MOSFET을 제어한다. 6번핀 SENSE에 외부전원을 연결해 놓고 외부전원이 들어오면 5번핀 GATE가 pull-up 된다. 그러면 MOSFET의 gate에 0v 이상이 걸려서 MOSFET이 OFF 된다(S --&gt; D가 끊어진다) 따라서 배터리 전원이 차단된다.

<a href="/wp-content/uploads/2017/11/LTC4412-basic-circuit.jpg"><img class="size-full wp-image-5355 aligncenter" src="/wp-content/uploads/2017/11/LTC4412-basic-circuit.jpg" alt="" width="639" height="384" /></a>

이 기본회로 2개를 겹쳐써야겠다. 왜냐면 첫번째 LTC4412는 USB 5v와 무선충전기 5v 사이를 선택해주고 두번째는 배터리와 첫번째 선택된 소스 사이를 선택해준다. 이렇게 하면
<ul>
 	<li>외부전원 공급이 없을 때 배터리가 전원을 공급해준다.</li>
 	<li>USB와 무선충전기가 동시에 공급되면 USB 우선으로 공급해준다.</li>
 	<li>USB와 무선충전기 둘중 하나만 공급되면 그 전원이 공급된다.</li>
 	<li>배터리 충전은 첫번째 LTC4412 회로의 출력에 물려주면 USB 또는 무선충전기로 충전이 된다.</li>
</ul>
<a href="/wp-content/uploads/2017/11/LTC4412-double.jpg"><img class="size-full wp-image-5356 aligncenter" src="/wp-content/uploads/2017/11/LTC4412-double.jpg" alt="" width="637" height="547" /></a>
<h4>Autodesk Eagle로 그린 전원 공급 회로도</h4>
<a href="/wp-content/uploads/2017/11/LTC4412-circuit.jpg"><img class="size-full wp-image-5357 aligncenter" src="/wp-content/uploads/2017/11/LTC4412-circuit.jpg" alt="" width="1383" height="795" /></a>

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5352</wp:post_id>
		<wp:post_date><![CDATA[2017-11-11 11:40:13]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-11-11 02:40:13]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[portable-lamp-6-external-power-supply-circuit]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="circuit"><![CDATA[circuit]]></category>
		<category domain="category" nicename="maker"><![CDATA[I'm Maker]]></category>
		<category domain="post_tag" nicename="ltc4412"><![CDATA[LTC4412]]></category>
		<category domain="post_tag" nicename="oring"><![CDATA[ORing]]></category>
		<category domain="post_tag" nicename="portable-lamp"><![CDATA[portable lamp]]></category>
		<category domain="post_tag" nicename="power"><![CDATA[power]]></category>
		<category domain="post_tag" nicename="power-supply"><![CDATA[power supply]]></category>
		<category domain="post_tag" nicename="power-switching"><![CDATA[power switching]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[5369]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>59</wp:comment_id>
			<wp:comment_author><![CDATA[Portable Lamp #7 &#8211; 전체 회로 테스트 &#8211; 오일석의 블로그]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://ilseokoh.com/2017/11/12/portable-lamp-7-entire-circuit-test/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[52.231.32.123]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2017-11-12 15:46:07]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2017-11-12 06:46:07]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] 외부전원 공급회로에서 설계한 회로를 포함하여 LED, 전원 버튼 모듈, 충전회로 모듈, 리튬이온 배터리를 모두 포함하여 전체 회로를 Bread Board를 이용하여 테스트 했다. 결과는 잘 작동했지만 한가지 예상하지 못한 문제도 찾아냈다. 이제 테스트 완료한 이 회로와 LED회로까지 포함하여 PCB 디자인을 해야한다. [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Portable Lamp #7 - 전체 회로 테스트</title>
		<link>http://ilseokoh.com/2017/11/12/portable-lamp-7-entire-circuit-test/</link>
		<pubDate>Sun, 12 Nov 2017 06:46:01 +0000</pubDate>
		<dc:creator><![CDATA[ilseokoh]]></dc:creator>
		<guid isPermaLink="false">http://ilseokoh.com/?p=5363</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://ilseokoh.com/2017/11/11/portable-lamp-6-external-power-supply-circuit/">외부전원 공급회로</a>에서 설계한 회로를 포함하여 <a href="http://ilseokoh.com/2017/11/08/portable-lamp-5-led-test/">LED</a>, <a href="http://ilseokoh.com/2017/10/22/portable-lamp-4-circuit-test/">전원 버튼 모듈, 충전회로 모듈</a>, 리튬이온 배터리를 모두 포함하여 전체 회로를 Bread Board를 이용하여 테스트 했다. 결과는 잘 작동했지만 한가지 예상하지 못한 문제도 찾아냈다. 이제 테스트 완료한 이 회로와 LED회로까지 포함하여 PCB 디자인을 해야한다.

<a href="/wp-content/uploads/2017/11/test-result.jpg"><img class="size-full wp-image-5367 aligncenter" src="/wp-content/uploads/2017/11/test-result.jpg" alt="" width="852" height="540" /></a>
<ul>
 	<li>USB 대신 Power Supply를 사용하여 외부 전원 1번 입력</li>
 	<li>무선충전기를 이용한 외부전원 2번</li>
 	<li>LTC4412회로 2개를 이용한 전원 선택 회로</li>
 	<li>배터리 충전기와 배터리</li>
 	<li>Soft Latch 전원버튼</li>
 	<li>조명용 LED</li>
</ul>
<h4>테스트 동영상</h4>
&nbsp;

[embed]https://youtu.be/pyJUUfS4rro[/embed]
<h4>부품의 구입 - Digikey 칭찬</h4>
국내 전자부품 사이트에서 부품들이 검색이 되지만 재고가 없고 리드타임이 길다. 결국 해외 배송이라는 얘기다. <a href="https://www.digikey.kr/">Digikey</a>라는 사이트를 찾았다. 한국어 사이트도 있고 리드테크라는 업체가 한국 사이트를 관리하는 것 같다. 찾는 부품은 거의 다 있고 각 부품은 1개 살 때 가격과 대량 구입 가격이 명시되어 있다. 부품 수가 ㅠ엄청날 텐데 검색이 되고 관리가 되는 걸 보면 대단한 시스템을 가지고 있는게 분명하다. 검색해서 들어가면 데이터시트와 함께 충분한 데이터를 제공한다. 6만원 이상이면 배송비가 없다. 이하면 2만원이 붙는다. 배송은 3일만에 왔다. 심지어는 주소를 틀리게 썼는데 전화가 와서 정정해줬다. 포장은 예술이다. 부품의 특성을 충분히 반영한게 틀림 없다. 칩 LED는 재습제와 습도 측정카드와 함께 밀봉되어 있었다. 감동이다.

세운상가가면 많은 업체들이 있고 각자 취급하는 물품들이 다르다. 발품을 팔아도 원하는 부품을 찾기는 애초에 불가능하다. 혹시나 찾아도 "10개만 주세요"하기가 죄송하기도 하다. 이 수많은 가게중에 분명히 부품이 있을텐데 ... 한국의 부품 사이트들도 잘 되어 있지만 잘 팔리는 부품위주로 구성되어 있다. 아쉽다.

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5363</wp:post_id>
		<wp:post_date><![CDATA[2017-11-12 15:46:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-11-12 06:46:01]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[portable-lamp-7-entire-circuit-test]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="bread-board"><![CDATA[bread board]]></category>
		<category domain="post_tag" nicename="circuit-test"><![CDATA[circuit test]]></category>
		<category domain="category" nicename="maker"><![CDATA[I'm Maker]]></category>
		<category domain="post_tag" nicename="ltc4412"><![CDATA[LTC4412]]></category>
		<category domain="post_tag" nicename="portable-lamp"><![CDATA[portable lamp]]></category>
		<category domain="post_tag" nicename="power-supply"><![CDATA[power supply]]></category>
		<category domain="post_tag" nicename="power-switching"><![CDATA[power switching]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_61f405c475fe700de93409b89ee548e8]]></wp:meta_key>
			<wp:meta_value><![CDATA[<iframe width="640" height="360" src="https://www.youtube.com/embed/pyJUUfS4rro?feature=oembed" frameborder="0" gesture="media" allowfullscreen></iframe>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_time_61f405c475fe700de93409b89ee548e8]]></wp:meta_key>
			<wp:meta_value><![CDATA[1510469115]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[5366]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Portable Lamp #9 - 3D 프린팅</title>
		<link>http://ilseokoh.com/2017/11/12/portable-lamp-9-3d-printing/</link>
		<pubDate>Sun, 12 Nov 2017 11:33:34 +0000</pubDate>
		<dc:creator><![CDATA[ilseokoh]]></dc:creator>
		<guid isPermaLink="false">http://ilseokoh.com/?p=5380</guid>
		<description></description>
		<content:encoded><![CDATA[모델을 완성했으니 3D 프린터로 출력을 해보자. 이번 출력으로 실물을 보고 조립을 해보고 다시 수정을 해야한다. 경험이 없기 때문에 몇 번을 더 해야 좋은 설계가 나오지 않을까 생각한다. Fusion 360에서 4개의 STL파일을 가져왔고 Cura에 넣었다. 프린터는 팹랩 서울에 있는 Creative 3D를 활용하기로 했다. 아래 그림처럼 출력의 상세 설정을 했다.

슬라이싱 프로그램인 Cura에서 서포터도 만들어줬는데 생각보다 많은 양의 서포터가 만들어졌다. 아래 그림에서 하늘색이 서포터인데 서포터가 많다 보니 출력시간이 길어졌다.

<a href="/wp-content/uploads/2017/11/cura.jpg"><img class="size-large wp-image-5382 aligncenter" src="/wp-content/uploads/2017/11/cura-1024x552.jpg" alt="" width="640" height="345" /></a>
<p style="text-align: center;">(크게보기 클릭)</p>
&nbsp;
<h4>출력시작</h4>
엄청난 출력 시간이 걸렸다. 24시간이 훌쩍 넘은 것 같다. 한번 출력에 신중한 모델링이 필요하다.

<a href="/wp-content/uploads/2017/11/printing.jpg"><img class="alignnone size-full wp-image-5384" src="/wp-content/uploads/2017/11/printing.jpg" alt="" width="1280" height="720" /></a>
<h4>출력 결과 - 서포터를 제거하고 완료된 출력물</h4>
<img class="size-large wp-image-5387 aligncenter" src="/wp-content/uploads/2017/11/IMG_0412-e1510485328182-1024x768.jpg" alt="" width="640" height="480" />
<h4>조립</h4>
다행히 조립은 되었다.

<img class="size-large wp-image-5389 aligncenter" src="/wp-content/uploads/2017/11/combine-977x1024.jpg" alt="" width="640" height="671" />
<h4>수정이 필요한 부분</h4>
<ol>
 	<li>
<h5>조립했을때 여유간격이 부족해서 살짝 휘어있다.</h5>
</li>
</ol>
<img class="size-large wp-image-5390 aligncenter" src="/wp-content/uploads/2017/11/defect1-1024x766.jpg" alt="" width="640" height="479" />
<h5>2. 실제 버튼 부품과 결합하면 조립되지 않는다.</h5>
<img class="size-large wp-image-5391 aligncenter" src="/wp-content/uploads/2017/11/defect2-1024x761.png" alt="" width="640" height="476" />
<h5>3. 배터리 부품을 넣으면 전선이 접히면서 결합이 되지 않는다.</h5>
<img class="size-large wp-image-5392 aligncenter" src="/wp-content/uploads/2017/11/defect3-1024x850.jpg" alt="" width="640" height="531" />
<h5>4. 버튼 부품의 간격이 작아서 뻑뻑하다.</h5>
<img class="size-large wp-image-5393 aligncenter" src="/wp-content/uploads/2017/11/defect4-1024x677.png" alt="" width="640" height="423" />
<h5>5. 벽이 너무 두꺼워서 빛이 너무 적게 투과한다.</h5>
<img class="size-large wp-image-5394 aligncenter" src="/wp-content/uploads/2017/11/defect5-880x1024.jpg" alt="" width="640" height="745" />]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5380</wp:post_id>
		<wp:post_date><![CDATA[2017-11-12 20:33:34]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-11-12 11:33:34]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[portable-lamp-9-3d-printing]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="3d-printer"><![CDATA[3d printer]]></category>
		<category domain="post_tag" nicename="3d-printing"><![CDATA[3d printing]]></category>
		<category domain="post_tag" nicename="cura"><![CDATA[cura]]></category>
		<category domain="post_tag" nicename="fab-lab"><![CDATA[fab lab]]></category>
		<category domain="category" nicename="maker"><![CDATA[I'm Maker]]></category>
		<category domain="post_tag" nicename="portable-lamp"><![CDATA[portable lamp]]></category>
		<category domain="post_tag" nicename="stl"><![CDATA[stl]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[5398]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Azure Container Service (Kubernetes)와 DevOps 구현 사례 #1</title>
		<link>http://ilseokoh.com/2017/11/22/azure-container-service-kubernetes-devops-case-1/</link>
		<pubDate>Tue, 21 Nov 2017 20:41:24 +0000</pubDate>
		<dc:creator><![CDATA[ilseokoh]]></dc:creator>
		<guid isPermaLink="false">http://ilseokoh.com/?p=5400</guid>
		<description></description>
		<content:encoded><![CDATA[온프레미스에 배포하던 Multi-factor Authentication 솔루션을 클라우드로 전환하면서 SaaS 서비스를 준비하고 있는 <a href="http://www.aircuve.com/wp/">에어큐브(주)</a>와 함께 해커톤을 이틀간 진행했었다. 에어큐브는 SaaS를 준비하면서 기존 아키텍쳐를 마이크로서비스 아키텍쳐로 변환했다. 총9개의 서비스가 관리 운영되어야 하는데 서비스가 많아지다 보니 관리, 운영, 배포가 문제가 되었다. 이를 컨테이너 서비스로 해결을 하려고 고민했고 이틀간의 해커톤으로 그 문제를 해결했던 사례를 공유한다. 설명할 내용을 요약하면 아래와 같다.
<blockquote>Azure Container Service로 Kubernetes 클러스터와 Private Registry인 Azure Container Registry를 사용하여 서비스를 운영할 인프라를 만들었다. 개발자들은 자신의 로컬 개발환경에서 Docker를 이용하여 컨테이너 이미지를 만들고 Docker-Compose를 이용하여 여러개의 서비스를 한꺼번에 실행하여 테스트를 한다. 개발자들이 테스트 완료된 소스코드를 소스코드 리파지토리에 커밋하면 <a href="https://www.visualstudio.com/team-services/">Visual Studio Team Service</a>에서 자동으로 빌드하고 자동으로 배포해서 새로운 버전의 컨테이너 애플리케이션을 Kubernetes 클러스터에 Rolling Update 한다.</blockquote>
총 3개의 포스팅이 연결되어 있다.

<a href="http://ilseokoh.com/2017/11/22/azure-container-service-kubernetes-devops-case-1-local-dev-environment/">Azure Container Service (Kubernetes)와 DevOps 구현 사례 #2 – 로컬 개발환경</a>

<a href="http://ilseokoh.com/2017/11/22/azure-container-service-kubernetes-devops-case-3-devops/">Azure Container Service (Kubernetes)와 DevOps 구현 사례 #3 – DevOps</a>
<h4>Azure Container Service (Kubernetes)</h4>
Azure에서 컨테이너로 만든 애플리케이션을 운영하는 가장 좋은 방법은 Azure Container Service (ACS)를 이용하는 것이다. 우리가 Kubernetes 클러스터를 만들기 위해서 관련 내용을 찾아 공부하고 Azure 환경에 최적으로 만들어 내려면 아마도 많은 시간이 걸릴 것이다. Azure Container Services는 인프라에 대한 고민을 하지 않도록 도와준다. Azure Portal에서 마스터노드의 개수, 에이전트 노드의 개수 등 몇 가지만 정해주면 약 5분안에 우리가 원하는 Kubernetes 클러스터를 만들어준다. 우리는 Kubernetes의 사용법을 공부해서 즉시 배포하고 운영에 들어가면 된다. 이런게 Managed Service의 장점이다. Azure Container Services는 Kubernetes, DC/OS, Docker Swamp 이렇게 3가지 Ochestration을 지원한다. 이 중에서 Kubernetes를 선택하면 아래 그림과 같이 Azure의 인프라스트럭쳐와 가상머신을 이용하여 클러스터를 만들어준다.<a href="/wp-content/uploads/2017/11/acs-detail.jpg"><img class="size-full wp-image-5403 aligncenter" src="/wp-content/uploads/2017/11/acs-detail.jpg" alt="" width="918" height="360" /></a>
<h4>Azure Portal에서 Kubernetes 클러스터 만들기</h4>
<a href="https://docs.microsoft.com/ko-kr/azure/container-service/kubernetes/container-service-kubernetes-walkthrough">Azure CLI로 ACS를 만드는 방법</a>은 문서에 잘 설명되어 있다. Azure Portal에서도 쉽게 만들 수 있다. 아래 화면캡쳐처럼 Azure Container Service를 선택하고 몇 가지 주요 설정을 해주면 된다. 몇 가지만 살펴보자.
<ul>
 	<li><strong>위치</strong>: 한국 데이터센터에서도 사용 가능함 (2018년 1월 12일 확인 및 수정) <del>2017-11-22 현재 한국 데이터센터에는 ACS를 만들 수 없다. 로드맵에 이미 들어가 있고 몇 달 안에 들어올 것으로 예상된다. 여기서는 일본서부에서 만들었다.</del></li>
 	<li><strong>Orchestration</strong>: Kubernetes, DC/OS, Docker Swamp 중에 선택한다. 여기서는 Kubernetes를 선택한다.</li>
 	<li><strong>DNS name prefix:</strong> DNS 호스트이름 앞부분에 쓰인다. 만약 opencloud라서 설정하면 opencloudmgmt.japanwest.cloudapp.azure.com 도메인이 생성된다.</li>
 	<li><strong>Master Count:</strong> 설정한 수 만큼 Master Node VM을 생성한다. Master Node는 홀수로 만들어야 하기 때문에 1,3,5를 선택하게 되어있다.</li>
 	<li><strong>Master Credential</strong> : Linux VM에 SSH를 접속하는 용도</li>
 	<li><strong>Service Principle</strong>: ACS를 만들면 Azure 인프라의 여러 리소스를 API를 통해서 생성하게 되는데 이때 인증 방법이 필요하다. Azure Service Principle를 만들고 Application ID와 Secret를 적어준다. <a href="https://docs.microsoft.com/ko-kr/azure/azure-resource-manager/resource-group-create-service-principal-portal">Azure Service Principle을 만드는 방법은 문서를 참조</a>하면 된다.</li>
 	<li><strong>Agent Count</strong>: Agent Node의 개수를 정해주면 그 수 많큼 VM을 생성해준다.</li>
 	<li><strong>Operating System</strong>: Linux로 선택한다. Windows는 현재 Preview.</li>
</ul>
<a href="/wp-content/uploads/2017/11/acs-create.jpg"><img class="size-full wp-image-5405 aligncenter" src="/wp-content/uploads/2017/11/acs-create.jpg" alt="" width="1585" height="975" /></a>

Node 개수에 따라 다르지만 약 5분정도 걸리고 아래 그림처럼 Azure의 네트워크, 가상머신 등을 사용한 건 볼 수 있다. ACS 자체는 무료다. 대신 사용한 VM에 대한 과금을 한다. 즉 Node를 많이 만들면 VM수가 많아 지기 때문에 VM크기와 갯수에 따른 비용이 발생한다.

<a href="/wp-content/uploads/2017/11/acs-create-result.jpg"><img class="size-full wp-image-5406 aligncenter" src="/wp-content/uploads/2017/11/acs-create-result.jpg" alt="" width="1730" height="1075" /></a>
<h4>kubectl 로 Kubernetes 관리</h4>
Kubernetes 클러스터를 만들었으니 접속해보자. <a href="https://docs.microsoft.com/ko-kr/azure/container-service/kubernetes/container-service-kubernetes-walkthrough">빠른 시작 문서</a>에 설명되어 있는데 Azure CLI를 통해서 kubectl 툴을 설치하고 Kubernetes 접속을 위한 config를 얻어 올 수 있다.
<pre class="prettyprint"># kubectl 설치
$  az acs kubernetes install-cli

# 자격증명 다운로드 
az acs kubernetes get-credentials --resource-group=OpenCloudDemo --name=OpenCloudACS</pre>
자격증명은 ~/.kube/config 파일에 저장된다. 공동 개발자나 관리자에게 공유해서 협업을 할 수 있다. kubectl은 다른 방법을 설치해도 좋다. 즉, 기존 사용하던 오픈소스 툴을 그대로 사용하면 된다. kubectl로 Azure 에 생성된 내용과 데모를 위해 배포된 서비스들을 살펴볼 수 있다.
<pre class="prettyprint">KevinMac:~ Kevin$ kubectl get nodes
NAME                    STATUS    ROLES     AGE       VERSION
k8s-agent-4491db0a-0    Ready     agent     6d        v1.7.7
k8s-agent-4491db0a-1    Ready     agent     6d        v1.7.7
k8s-agent-4491db0a-2    Ready     agent     22h       v1.7.7
k8s-master-4491db0a-0   Ready     master    6d        v1.7.7

$ kubectl get pods
NAME                         READY     STATUS    RESTARTS   AGE
api-demo-1039156325-fmt1w    1/1       Running   0          4d
view-demo-2794589291-g6rsj   1/1       Running   0          10h

$ kubectl get deployments
NAME        DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE
api-demo    1         1         1            1           4d
view-demo   1         1         1            1           4d

$ kubectl get services
NAME         TYPE           CLUSTER-IP     EXTERNAL-IP     PORT(S)         AGE
api-demo     ClusterIP      10.0.219.24    &lt;none&gt;          8080/TCP        4d
kubernetes   ClusterIP      10.0.0.1       &lt;none&gt;          443/TCP         6d
view-demo    LoadBalancer   10.0.253.107   104.215.31.15   443:31586/TCP   4d</pre>
<a href="https://kubernetes.io/docs/user-guide/kubectl-overview/">kubectl의 상세한 사용법은 Kubernetes Documentation</a>을 참조하면 된다. kubectl이 좋은 툴이지만 웹 기반의 관리툴이 더 편하다. ACS가 이미 셋업을 해놨다. proxy명령으로 proxy를 설정하고 localhost로 접속할 수 있다.
<pre class="prettyprint">$ kubectl proxy
Starting to serve on 127.0.0.1:8001</pre>
접속주소는 http://127.0.0.1:8001/ui 이고 접속하면 http://127.0.0.1:8001/api/v1/namespaces/kube-system/services/kubernetes-dashboard/proxy 로 리다이렉션되는데 <strong>Kubernetes 1.7.7의 버그인지 리다이렉션 주소에 슬래시(/)를 하나 더 붙여줘야 접속된다</strong>. Kubernetes 포탈을 이용해서 전체 클러스터에 대한 관리나 서비스, 애플리케이션의 관리가 가능하다.

<a href="/wp-content/uploads/2017/11/kubernetes-portal.jpg"><img class="size-full wp-image-5410 aligncenter" src="/wp-content/uploads/2017/11/kubernetes-portal.jpg" alt="" width="1730" height="1075" /></a>
<h4>Azure Container Registry 만들기</h4>
Docker Hub 같은 공개된 Container Registry를 사용할 수 없는 경우 Private Registry를 사용하면 된다. 물론 내 로컬 서버에 설치할 수 도 있고 Azure VM을 만들어서 설치하거나 Container 이미지를 Kubernete에 배포해서 운영해도 되겠지만 Azure Container Registry는 사용할 수 있다. Azure Portal에서 이름 정도만 정해주면 만들 수 있다. Standard 를 선택하면 100GB의 저장공간을 제공한다. 2017년 11월 22일 현재 Korea DC에 만들 수 없고 아직 언제 가능하지 모르지만 가까운 일본 DC에 만들어도 운영에 문제가 되지는 않는다.

<a href="/wp-content/uploads/2017/11/azure-container-registry.jpg"><img class="size-full wp-image-5411 aligncenter" src="/wp-content/uploads/2017/11/azure-container-registry.jpg" alt="" width="1730" height="1075" /></a>

여기까지 Azure에 컨테이너 애플리케이션을 배포해서 운영할 수 있는 환경을 Azure Container Service와 Kubernetes를 이용해서 만들었다. <a href="http://ilseokoh.com/2017/11/22/azure-container-service-kubernetes-devops-case-1-local-dev-environment/">다음은 개발자들의 로컬 개발환경 설정에 대한 내용</a>이다.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5400</wp:post_id>
		<wp:post_date><![CDATA[2017-11-22 05:41:24]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-11-21 20:41:24]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[azure-container-service-kubernetes-devops-case-1]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="acs"><![CDATA[acs]]></category>
		<category domain="category" nicename="azure"><![CDATA[Azure]]></category>
		<category domain="post_tag" nicename="azure"><![CDATA[azure]]></category>
		<category domain="post_tag" nicename="azure-container-service"><![CDATA[azure container service]]></category>
		<category domain="post_tag" nicename="cloud"><![CDATA[cloud]]></category>
		<category domain="post_tag" nicename="container"><![CDATA[container]]></category>
		<category domain="post_tag" nicename="docker"><![CDATA[docker]]></category>
		<category domain="post_tag" nicename="kubernetes"><![CDATA[kubernetes]]></category>
		<category domain="post_tag" nicename="open-cloud-2017"><![CDATA[open cloud 2017]]></category>
		<category domain="post_tag" nicename="%ec%95%a0%ec%a0%80"><![CDATA[애저]]></category>
		<category domain="post_tag" nicename="%ed%81%b4%eb%9d%bc%ec%9a%b0%eb%93%9c"><![CDATA[클라우드]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[5402]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>62</wp:comment_id>
			<wp:comment_author><![CDATA[Azure Container Service (Kubernetes)와 DevOps 구현 사례 #2 &#8211; 로컬 개발환경 &#8211; 오일석의 블로그]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://ilseokoh.com/2017/11/22/azure-container-service-kubernetes%ec%99%80-devops-case-1-local-dev-environment/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[52.231.32.123]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2017-11-22 16:14:05]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2017-11-22 07:14:05]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] Azure Container Service (Kubernetes)와 DevOps 구현 사례 #1 에서는 Kubernetes 운영환경을 만들었다. 여기서는 개발자들이 로컬 개발환경에서 소스를 수정 후에 빌드를 하고 Docker 이미지를 만드는 과정을 알아보자. 여러 개의 서비스로 구성된 마이크로서비스 아키텍쳐라면 서비스들이 한꺼번에 실행되어야 테스트를 할 수 있는데 Docker Compose로 테스트 하는 방법도 알아보자. [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>64</wp:comment_id>
			<wp:comment_author><![CDATA[Open Cloud 2017 자료 공유 &#8211; 오일석의 블로그]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://ilseokoh.com/2017/11/22/open-cloud-2017/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[52.231.32.123]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2017-11-22 17:33:02]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2017-11-22 08:33:02]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] Azure Container Service (Kubernetes)와 DevOps 구현 사례 #1 [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Azure Container Service (Kubernetes)와 DevOps 구현 사례 #2 - 로컬 개발환경</title>
		<link>http://ilseokoh.com/2017/11/22/azure-container-service-kubernetes-devops-case-1-local-dev-environment/</link>
		<pubDate>Wed, 22 Nov 2017 07:13:58 +0000</pubDate>
		<dc:creator><![CDATA[ilseokoh]]></dc:creator>
		<guid isPermaLink="false">http://ilseokoh.com/?p=5422</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://ilseokoh.com/2017/11/22/azure-container-service-kubernetes-devops-case-1/">Azure Container Service (Kubernetes)와 DevOps 구현 사례 #1</a> 에서는 Kubernetes 운영환경을 만들었다. 여기서는 개발자들이 로컬 개발환경에서 소스를 수정 후에 빌드를 하고 Docker 이미지를 만드는 과정을 알아보자. 여러 개의 서비스로 구성된 마이크로서비스 아키텍쳐라면 서비스들이 한꺼번에 실행되어야 테스트를 할 수 있는데 Docker Compose로 테스트 하는 방법도 알아보자.
<h4>Docker 설치</h4>
먼저 Docker 가 로컬 개발환경에 설치되어 있어야 한다. <a href="https://docs.docker.com/docker-for-mac/install/">Docker 설치 방법</a>은 웹에 문서가 많다. 검색해서 참조해서 설치하면 된다. 맥의 경우 dmg 이미지로 쉽게 설치할 수 있다.
<h4>개발환경</h4>
Java + Spring boot 로 개발이 되어있고 이클립스를 사용했다. <a href="http://maven.apache.org/">메이븐(maven)</a>을 사용하여 빌드를 관리한다. 설명에 사용한 소스코드는 github에<a href="https://github.com/bang0124/api-demo"> api-demo</a>, <a href="https://github.com/bang0124/view-demo">view-demo</a> 라는 프로젝트로 공개되어 있다. 소스코드에서 Dockerfile, pom.xml, docker-compose.yml 파일을 참고 바란다.
<h4><a href="https://github.com/bang0124/view-demo/blob/master/pom.xml">pom.xml</a></h4>
Maven을 사용하면 빌드와 도커 이미지 생성을 동시에 할 수 있다. spotify 에서 만든 Maven Plugin인 <a href="https://docs.spring.io/spring-boot/docs/current/maven-plugin/usage.html">spring-boot-maven-plugin</a>을 사용하면 쉽게 설정 할 수 있다. pom.xml 에 plugin 설정을 보면 Maven의 Goal은 package로 설정되어 있고 $ mvn package 명령하나로 소스빌드와 도커이미지 설정이 한번에 수행된다. repository 을 보면 이미지의 이름과 태그가 opencloudregistry.azurecr.io/clouddemo/view-demo:1 으로 설정되어 있는 걸 볼 수 있다.

이클립스에서 Maven Build를 실행하거나 터미널에서 $ mvn package 명령으로 실행할 수 있다. pom.xml에 기술되어 있는 것처럼 소스를 빌드하고 war 패키지를 만들고 마지막으로 도커 이미지를 만든다.
<pre class="prettyprint">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
	&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

	&lt;groupId&gt;com.aircuve&lt;/groupId&gt;
	&lt;artifactId&gt;view-demo&lt;/artifactId&gt;
	&lt;version&gt;0.0.1&lt;/version&gt;
	&lt;packaging&gt;war&lt;/packaging&gt;

	&lt;name&gt;view-demo&lt;/name&gt;
	&lt;description&gt;Saas view demo for Spring Boot&lt;/description&gt;

	&lt;parent&gt;
		&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
		&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;
		&lt;version&gt;1.4.7.RELEASE&lt;/version&gt;
		&lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;
	&lt;/parent&gt;

	&lt;properties&gt;
		&lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;
		&lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;
		&lt;java.version&gt;1.8&lt;/java.version&gt;
	&lt;/properties&gt;

	&lt;dependencies&gt;
		&lt;dependency&gt;
			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
			&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
		&lt;/dependency&gt;

	(중간생략)	...

	&lt;/dependencies&gt;

	&lt;build&gt;
		&lt;plugins&gt;
			&lt;plugin&gt;
				&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
				&lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;
			&lt;/plugin&gt;
			&lt;plugin&gt;
	            &lt;groupId&gt;com.spotify&lt;/groupId&gt;
	            &lt;artifactId&gt;dockerfile-maven-plugin&lt;/artifactId&gt;
	            &lt;version&gt;1.3.4&lt;/version&gt;
				&lt;executions&gt;
				    &lt;execution&gt;
                        &lt;id&gt;build-image&lt;/id&gt;
                        &lt;phase&gt;package&lt;/phase&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;build&lt;/goal&gt;
                        &lt;/goals&gt;
                    &lt;/execution&gt;      
				  &lt;/executions&gt;
				  
	            &lt;configuration&gt;
	           	 &lt;repository&gt;opencloudregistry.azurecr.io/clouddemo/view-demo&lt;/repository&gt;
    				 &lt;tag&gt;1&lt;/tag&gt;
    				&lt;googleContainerRegistryEnabled&gt;false&lt;/googleContainerRegistryEnabled&gt;
	            &lt;/configuration&gt;
        	&lt;/plugin&gt;
		&lt;/plugins&gt;
	&lt;/build&gt;
&lt;/project&gt;</pre>
<h4><a href="https://github.com/bang0124/view-demo/blob/master/Dockerfile">Dockerfile</a></h4>
<pre class="prettyprint">FROM java:8
VOLUME /tmp
ADD target/view-demo-0.0.1.war app.war
ENV JAVA_OPTS=""
RUN bash -c 'touch /app.war'
ENTRYPOINT ["java","-Djava.security.egd=file:/dev/./urandom","-jar","/app.war"]
</pre>
Maven이 도커 이미지를 만들기 위해서는 Dockerfile이 필요하다. Dockerfile에 어떻게 도커 이미지를 만들것인지에 대한 명령이 들어있다. 여기서는 Base 이미지를 java:8을 사용했다. Docker Hub에서 이미지를 다운받아서 빌드할 때 만들어 놓은 war 파일을 복사한다. 마지막으로 도커 이미지가 로드되서 실행할 애플리케이션을 지정했다.
<h4>메이븐 빌드 로그</h4>
이클립스에서 빌드한 결과 로그를 보면 어떻게 최종 빌드 이미지를 만드는지 볼 수 있다.
<pre class="prettyprint">[INFO] Scanning for projects...
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building view-demo 0.0.1
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ view-demo ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 1 resource
[INFO] Copying 120 resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ view-demo ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ view-demo ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] skip non existing resourceDirectory /Users/Kevin/source/opencloud/view-demo/src/test/resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.1:testCompile (default-testCompile) @ view-demo ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- maven-surefire-plugin:2.18.1:test (default-test) @ view-demo ---
[INFO] Surefire report directory: /Users/Kevin/source/opencloud/view-demo/target/surefire-reports

-------------------------------------------------------
 T E S T S
-------------------------------------------------------
2017-11-22 15:52:30.555  INFO   --- [           main] .b.t.c.SpringBootTestContextBootstrapper : Neither @ContextConfiguration nor @ContextHierarchy found for test class [com.aircuve.view.ViewPackageApplicationTests], using SpringBootContextLoader
2017-11-22 15:52:30.575  INFO   --- [           main] o.s.t.c.support.AbstractContextLoader    : Could not detect default resource locations for test class [com.aircuve.view.ViewPackageApplicationTests]: no resource found for suffixes {-context.xml, Context.groovy}.

(중간생략 ...)

org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener@5ae50ce6]

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
 :: Spring Boot ::        (v1.4.7.RELEASE)

2017-11-22 15:52:31.290  INFO 8060 --- [           main] c.a.view.ViewPackageApplicationTests     : Starting ViewPackageApplicationTests on KevinMac.local with PID 8060 (started by Kevin in /Users/Kevin/source/opencloud/view-demo)

(중간생략 ...)

Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.84 sec - in com.aircuve.view.ViewPackageApplicationTests
2017-11-22 15:52:33.576  INFO 8060 --- [       Thread-2] o.s.w.c.s.GenericWebApplicationContext   : Closing org.springframework.web.context.support.GenericWebApplicationContext@6853425f: startup date [Wed Nov 22 15:52:31 KST 2017]; root of context hierarchy

Results :

Tests run: 1, Failures: 0, Errors: 0, Skipped: 0

[INFO] 
[INFO] --- maven-war-plugin:2.6:war (default-war) @ view-demo ---
[INFO] Packaging webapp
[INFO] Assembling webapp [view-demo] in [/Users/Kevin/source/opencloud/view-demo/target/view-demo-0.0.1]
[INFO] Processing war project
[INFO] Copying webapp resources [/Users/Kevin/source/opencloud/view-demo/src/main/webapp]
[INFO] Webapp assembled in [361 msecs]
[INFO] Building war: /Users/Kevin/source/opencloud/view-demo/target/view-demo-0.0.1.war
[INFO] 
[INFO] --- spring-boot-maven-plugin:1.4.7.RELEASE:repackage (default) @ view-demo ---
[INFO] 
[INFO] --- dockerfile-maven-plugin:1.3.4:build (build-image) @ view-demo ---
[INFO] Google Container Registry support is disabled
[INFO] Building Docker context /Users/Kevin/source/opencloud/view-demo
[INFO] 
[INFO] Image will be built as opencloudregistry.azurecr.io/clouddemo/view-demo:2
[INFO] 
[INFO] Step 1/6 : FROM java:8
[INFO] Pulling from library/java
[INFO] Digest: sha256:c1ff613e8ba25833d2e1940da0940c3824f03f802c449f3d1815a66b7f8c0e9d
[INFO] Status: Image is up to date for java:8
[INFO]  ---&gt; d23bdf5b1b1b
[INFO] Step 2/6 : VOLUME /tmp
[INFO]  ---&gt; Using cache
[INFO]  ---&gt; d7662a1cee77
[INFO] Step 3/6 : ADD target/view-demo-0.0.1.war app.war
[INFO]  ---&gt; fb5ba0dda896
[INFO] Step 4/6 : ENV JAVA_OPTS ""
[INFO]  ---&gt; Running in 29ff6523682b
[INFO]  ---&gt; 7ff1eed623c5
[INFO] Removing intermediate container 29ff6523682b
[INFO] Step 5/6 : RUN bash -c 'touch /app.war'
[INFO]  ---&gt; Running in 1d0725dc2a29
[INFO]  ---&gt; 229230cd53ba
[INFO] Removing intermediate container 1d0725dc2a29
[INFO] Step 6/6 : ENTRYPOINT java -Djava.security.egd=file:/dev/./urandom -jar /app.war
[INFO]  ---&gt; Running in dbff4c32c614
[INFO]  ---&gt; dbdf6c3ac7fc
[INFO] Removing intermediate container dbff4c32c614
[INFO] Successfully built dbdf6c3ac7fc
[INFO] Successfully tagged opencloudregistry.azurecr.io/clouddemo/view-demo:2
[INFO] 
[INFO] Detected build of image with id dbdf6c3ac7fc
[INFO] Building jar: /Users/Kevin/source/opencloud/view-demo/target/view-demo-0.0.1-docker-info.jar
[INFO] Successfully built opencloudregistry.azurecr.io/clouddemo/view-demo:2
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 25.745 s
[INFO] Finished at: 2017-11-22T15:52:53+09:00
[INFO] Final Memory: 33M/384M
[INFO] ------------------------------------------------------------------------
</pre>
<h4><a href="https://github.com/bang0124/view-demo/blob/master/docker-compose.yml">Docker Compose</a></h4>
마이크로서비스 아키텍쳐의 경우 테스트를 하려면 관련된 서비스가 모두 실행이 되어야 한다. 즉 연관된 도커 이미지가 한번에 실행되어야 내가 수정한 소스코드가 정상적으로 작동하는지 알 수 있다. docker 명령으로 하나씩 올려서 테스트 할 수 도 있지만 Docker Compose를 이용하면 쉽게 테스트 환경을 만들 수 있다. 여기에서는 view-demo 와 api-demo 두 개의 서비스를 한번에 올려서 테스트 하도록 Docker Compose를 구성했다. <a href="https://github.com/bang0124/view-demo/blob/master/docker-compose.yml">docker-compose.yml</a> 파일의 내용은 아래와 같다.
<pre class="prettyprint">version: "3.3"
services:
    view-demo:
      image: opencloudregistry.azurecr.io/clouddemo/view-demo:1
      container_name: view-demo
      ports:
        - "443:8443"
    api-demo:
      image: opencloudregistry.azurecr.io/clouddemo/api-demo:1
      container_name: api-demo</pre>
$ docker-compose up 명령을 실행해서 https://localost로 접속해서 테스트 할 수 있다.
<pre class="prettyprint">$ docker-compose up
Starting view-demo ... 
Starting api-demo ... 
Starting api-demo
Starting api-demo ... done
Attaching to view-demo, api-demo
api-demo     | 
api-demo     |   .   ____          _            __ _ _
api-demo     |  /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
api-demo     | ( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
api-demo     |  \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
api-demo     |   '  |____| .__|_| |_|_| |_\__, | / / / /
api-demo     |  =========|_|==============|___/=/_/_/_/
api-demo     |  :: Spring Boot ::        (v1.4.7.RELEASE)
api-demo     | 
view-demo    | 
view-demo    |   .   ____          _            __ _ _
view-demo    |  /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
view-demo    | ( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
view-demo    |  \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
view-demo    |   '  |____| .__|_| |_|_| |_\__, | / / / /
view-demo    |  =========|_|==============|___/=/_/_/_/
view-demo    |  :: Spring Boot ::        (v1.4.7.RELEASE)
view-demo    | 
view-demo    | 2017-11-22 07:00:07.288  INFO 1 --- [           main] com.aircuve.ViewPackageApplication       : Starting ViewPackageApplication v0.0.1 on a7a23f97ce7c with PID 1 (/app.war started by root in /)
view-demo    | 2017-11-22 07:00:07.309 DEBUG 1 --- [           main] com.aircuve.ViewPackageApplication       : Running with Spring Boot v1.4.7.RELEASE, Spring v4.3.9.RELEASE
view-demo    | 2017-11-22 07:00:07.310  INFO 1 --- [           main] com.aircuve.ViewPackageApplication       : No active profile set, falling back to default profiles: default
api-demo     | 2017-11-22 07:00:07.357  INFO 1 --- [           main] com.aircuve.ApiPackageApplication        : Starting ApiPackageApplication v0.0.1 on 16b394d7ca29 with PID 1 (/app.war started by root in /)
api-demo     | 2017-11-22 07:00:07.396  INFO 1 --- [           main] com.aircuve.ApiPackageApplication        : No active profile set, falling back to default profiles: default
view-demo    | 2017-11-22 07:00:07.424  INFO 1 --- [           main] ationConfigEmbeddedWebApplicationContext : Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@14899482: startup date [Wed Nov 22 07:00:07 UTC 2017]; root of context hierarchy

(중간생략 ...)

view-demo    | 2017-11-22 07:00:14.622  INFO 1 --- [           main] com.aircuve.ViewPackageApplication       : Started ViewPackageApplication in 8.298 seconds (JVM running for 9.362)
api-demo     | 2017-11-22 07:00:14.713  INFO 1 --- [           main] o.s.j.e.a.AnnotationMBeanExporter        : Registering beans for JMX exposure on startup
api-demo     | 2017-11-22 07:00:14.842  INFO 1 --- [           main] s.b.c.e.t.TomcatEmbeddedServletContainer : Tomcat started on port(s): 8080 (http)
api-demo     | 2017-11-22 07:00:14.850  INFO 1 --- [           main] com.aircuve.ApiPackageApplication        : Started ApiPackageApplication in 8.51 seconds (JVM running for 9.59)</pre>
&nbsp;

<img class="size-large wp-image-5427 aligncenter" src="/wp-content/uploads/2017/11/docker-compose-test-1024x649.jpg" alt="" width="640" height="406" />]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5422</wp:post_id>
		<wp:post_date><![CDATA[2017-11-22 16:13:58]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-11-22 07:13:58]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[azure-container-service-kubernetes-devops-case-1-local-dev-environment]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="acs"><![CDATA[acs]]></category>
		<category domain="category" nicename="azure"><![CDATA[Azure]]></category>
		<category domain="post_tag" nicename="azure"><![CDATA[azure]]></category>
		<category domain="post_tag" nicename="azure-container-service"><![CDATA[azure container service]]></category>
		<category domain="post_tag" nicename="container"><![CDATA[container]]></category>
		<category domain="post_tag" nicename="container-registry"><![CDATA[container registry]]></category>
		<category domain="post_tag" nicename="docker"><![CDATA[docker]]></category>
		<category domain="post_tag" nicename="eclipse"><![CDATA[eclipse]]></category>
		<category domain="post_tag" nicename="java"><![CDATA[java]]></category>
		<category domain="post_tag" nicename="maven"><![CDATA[maven]]></category>
		<category domain="post_tag" nicename="open-cloud-2017"><![CDATA[open cloud 2017]]></category>
		<category domain="post_tag" nicename="sprint-boot"><![CDATA[sprint boot]]></category>
		<category domain="post_tag" nicename="%ec%95%a0%ec%a0%80"><![CDATA[애저]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[5425]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[azure-container-service-kubernetes%ec%99%80-devops-case-1-local-dev-environment]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>63</wp:comment_id>
			<wp:comment_author><![CDATA[Azure Container Service (Kubernetes)와 DevOps 구현 사례 #1 &#8211; 오일석의 블로그]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://ilseokoh.com/2017/11/22/azure-container-service-kubernetes-devops-case-1/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[52.231.32.123]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2017-11-22 16:17:14]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2017-11-22 07:17:14]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] 여기까지 Azure에 컨테이너 애플리케이션을 배포해서 운영할 수 있는 환경을 Azure Container Service와 Kubernetes를 이용해서 만들었다. 다음은 개발자들의 로컬 개발환경 설정에 대한 내용이다. [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>65</wp:comment_id>
			<wp:comment_author><![CDATA[Open Cloud 2017 자료 공유 &#8211; 오일석의 블로그]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://ilseokoh.com/2017/11/22/open-cloud-2017/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[52.231.32.123]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2017-11-22 17:33:49]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2017-11-22 08:33:49]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] Azure Container Service (Kubernetes)와 DevOps 구현 사례 #2 – 로컬 개발환경 [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Azure Container Service (Kubernetes)와 DevOps 구현 사례 #3 - DevOps</title>
		<link>http://ilseokoh.com/2017/11/22/azure-container-service-kubernetes-devops-case-3-devops/</link>
		<pubDate>Wed, 22 Nov 2017 08:18:04 +0000</pubDate>
		<dc:creator><![CDATA[ilseokoh]]></dc:creator>
		<guid isPermaLink="false">http://ilseokoh.com/?p=5441</guid>
		<description></description>
		<content:encoded><![CDATA[마이크로소프트 아키텍쳐로 만들어진 애플리케이션을 개발하거나 SaaS 애플리케이션을 개발한다면 DevOps는 어쩌면 필수다. 개발자가 최신 소스를 소스 저장소에 올리면 자동으로 빌드를 하고 Unit 테스트 등 기본 테스트를 자동으로 진행하는 CI(Continuous Integration), 빌드가 성공하면 테스트 환경에 자동으로 배포가 되는 CD(Continuous Deployment) 가 없으면 실수가 많아지고 개발자가 코드에 집중하지 못하는 등 어려움이 많아진다.
<h4>Visual Studio Team Services</h4>
<a href="https://www.visualstudio.com/">Visual Studio</a> 패밀리 중에 <a href="https://www.visualstudio.com/team-services/">Visual Studio Team Services (VSTS)</a>가 있다. 기존 TFS (Team Foundation Server)의 클라우드 버전이고 가입하면 바로 쓸 수 있는 SaaS 서비스이다. 처음 5명에 대해서는 무료 사용이 가능하다. 가입을 하면 사이트가 하나 생기기 프로젝트를 만들수 있다. 사실 VSTS에는 소프트웨어 라이프사이클 전체를 관리할 수 있는 모든 기능이 있지만 여기서는 Build와 Release에 집중하겠다.
<h4>Build 설정</h4>
빌드는 개발자가 Github 마스터 브랜치에 소스를 커밋하면 시작하도록 설정할 수 있다. 즉 트리거링을 소스코드 커밋으로 할 수 있다. 빌드가 시작되면 3가지 작업을 수행하도록 설정해 놨다.
<ol>
 	<li><strong>Maven pom.xml</strong> : 로컬 개발할 때와 마찬가지로 maven 으로 빌드를 실행하고 이미지를 만든다.</li>
 	<li><strong>Push an image</strong>: Private registry에 만든 이미지를 push (업로드) 한다.</li>
 	<li><strong>Publish Artifact</strong>: kubcofig : Kubernetes 배포에 사용하는 <a href="https://github.com/bang0124/view-demo/blob/master/view-demo.yml">view-demo.yaml</a> 파일을 VSTS에 업로드 해둔다.</li>
</ol>
VSTS의 특징이라면 UI를 통해서 설정을 직관적으로 할 수 있는 것이다. 필요한 작업을 하나 끌어다 한 단계씩 설정을 해나가면 실제 빌드 될 때 그대로 실행된다.

<a href="/wp-content/uploads/2017/11/vsts-build.jpg"><img class="size-full wp-image-5444 aligncenter" src="/wp-content/uploads/2017/11/vsts-build.jpg" alt="" width="2444" height="1616" /></a>

<a href="/wp-content/uploads/2017/11/vsts-build-2.jpg"><img class="alignnone size-full wp-image-5445" src="/wp-content/uploads/2017/11/vsts-build-2.jpg" alt="" width="2444" height="1616" /></a>

<a href="/wp-content/uploads/2017/11/vsts-build-3.jpg"><img class="alignnone size-full wp-image-5446" src="/wp-content/uploads/2017/11/vsts-build-3.jpg" alt="" width="2444" height="1616" /></a>
<h4>빌드 실행</h4>
소스코드를 commit 하면 시작되도록 trigger를 설정해 놓았다. VSTS에서는 로그를 보면서 실행되는 내용을 확인 할 수 있다. 빌드는 Hosted Agent라는 빌드 머신에서 수행이 되는데 Hosted Agent는 VSTS가 제공하는 클라우드에 있는 빌드 머신이다. 여기에는 기본적인 개발환경이 설치되어 있지만 그 외에는 빈통이다. 따라서 제일 처음에 소스 저장소에서 소스를 가져온 후에 우리가 만들어 놓은 빌드 태스크를 하나씩 실행한다.

빌드 결과 화면은 아래와 같다.

<a href="/wp-content/uploads/2017/11/vsts-build-result.jpg"><img class="alignnone size-full wp-image-5447" src="/wp-content/uploads/2017/11/vsts-build-result.jpg" alt="" width="2444" height="1616" /></a>
<h4>Release 설정</h4>
빌드가 성공하면 개발/테스트 서버 환경에 배포를 자동으로 수행 할 수 있다. 릴리즈 작업은 하나만 설정해놨다. view-demo.yml 파일의 설정 그대로 Kubernetes 클러스터에 배포를 하는 작업이다.

<a href="/wp-content/uploads/2017/11/vsts-release.jpg"><img class="size-full wp-image-5450 aligncenter" src="/wp-content/uploads/2017/11/vsts-release.jpg" alt="" width="2454" height="1874" /></a>

릴리즈 실행 결과 로그파일을 볼 수 있다.

<a href="/wp-content/uploads/2017/11/vsts-release-result.jpg"><img class="alignnone size-full wp-image-5451" src="/wp-content/uploads/2017/11/vsts-release-result.jpg" alt="" width="2812" height="1850" /></a>
<h4><a href="https://github.com/bang0124/view-demo/blob/master/view-demo.yml">view-demo.yml </a></h4>
<pre class="prettyprint">apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: view-demo
spec:
  replicas: 1
  minReadySeconds: 30
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable:
      maxSurge: 1
  template:
    metadata:
      labels:
        app: view-demo
    spec:
      #imagePullSecrets:
      #  - name: 
      containers:
      - name: view-demo
        image: opencloudregistry.azurecr.io/clouddemo/view-demo:2
        ports:
        - containerPort: 8443
        name : view-demo</pre>
Kubernetes 배포에 사용할 yaml 파일이다. replicas 의 숫자를 높이면 서비스 인스턴스가 늘어난다. RollingUpdate 를 하면 새 버전의 pod를 만들고 기존버전의 pod를 종료하는 식으로 업데이트가 되기 때문에 서비스가 정지되지 않고 업데이트 된다. 이 과정에서 minReadySeconds 만큼 기다리게 할 수 있다. 애플리케이션이 올라가는 시간만큼 기다리게 할 수 있다. 상세한 설정은 <a href="https://kubernetes.io/docs/concepts/workloads/controllers/deployment/">Kubernetes Deployment 문서</a>를 참조하기 바란다.

개발자의 로컬 개발환경에서 테스트 완료된 코드는 소스 저장소로 커밋되고 다시 VSTS에서 빌드와 배포까지 자동화 할 수 있다. 이렇게 되면 개발자들은 코드에 집중 할 수 있게된다.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5441</wp:post_id>
		<wp:post_date><![CDATA[2017-11-22 17:18:04]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-11-22 08:18:04]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[azure-container-service-kubernetes-devops-case-3-devops]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="azure"><![CDATA[Azure]]></category>
		<category domain="post_tag" nicename="azure"><![CDATA[azure]]></category>
		<category domain="post_tag" nicename="azure-container-service"><![CDATA[azure container service]]></category>
		<category domain="post_tag" nicename="cd"><![CDATA[cd]]></category>
		<category domain="post_tag" nicename="ci"><![CDATA[ci]]></category>
		<category domain="post_tag" nicename="ci-cd"><![CDATA[ci/cd]]></category>
		<category domain="post_tag" nicename="container"><![CDATA[container]]></category>
		<category domain="post_tag" nicename="continuous-deployment"><![CDATA[continuous deployment]]></category>
		<category domain="post_tag" nicename="continuous-integration"><![CDATA[continuous integration]]></category>
		<category domain="post_tag" nicename="devops"><![CDATA[devops]]></category>
		<category domain="post_tag" nicename="open-cloud-2017"><![CDATA[open cloud 2017]]></category>
		<category domain="post_tag" nicename="visual-studio-team-services"><![CDATA[visual studio team services]]></category>
		<category domain="post_tag" nicename="vsts"><![CDATA[vsts]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[5454]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>66</wp:comment_id>
			<wp:comment_author><![CDATA[Open Cloud 2017 자료 공유 &#8211; 오일석의 블로그]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://ilseokoh.com/2017/11/22/open-cloud-2017/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[52.231.32.123]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2017-11-22 17:36:41]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2017-11-22 08:36:41]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] Azure Container Service (Kubernetes)와 DevOps 구현 사례 #3 – DevOps [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>67</wp:comment_id>
			<wp:comment_author><![CDATA[Azure Container Service (Kubernetes)와 DevOps 구현 사례 #1 &#8211; 오일석의 블로그]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://ilseokoh.com/2017/11/22/azure-container-service-kubernetes-devops-case-1/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[52.231.32.123]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2017-11-23 10:00:12]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2017-11-23 01:00:12]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] Azure Container Service (Kubernetes)와 DevOps 구현 사례 #3 – DevOps [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Open Cloud 2017 자료 공유</title>
		<link>http://ilseokoh.com/2017/11/22/open-cloud-2017/</link>
		<pubDate>Wed, 22 Nov 2017 08:32:56 +0000</pubDate>
		<dc:creator><![CDATA[ilseokoh]]></dc:creator>
		<guid isPermaLink="false">http://ilseokoh.com/?p=5455</guid>
		<description></description>
		<content:encoded><![CDATA[Microsoft Open Cloud 2017 행사에서 발표했던 내용 공유합니다.

발표자: 마이크로소프트 오일석 부장, 에어큐브 방승호 선임

발표자료 다운로드 : <a href="https://onedrive.live.com/view.aspx?cid=30a24ab895bc444f&amp;page=view&amp;resid=30A24AB895BC444F!2293&amp;parId=30A24AB895BC444F!127&amp;app=PowerPoint">https://onedrive.live.com/view.aspx?cid=30a24ab895bc444f&amp;page=view&amp;resid=30A24AB895BC444F!2293&amp;parId=30A24AB895BC444F!127&amp;app=PowerPoint</a>

발표에 사용된 상세 내용은 3개의 포스트로 정리했습니다. 도움이 되었으면 좋겠습니다.

<a href="http://ilseokoh.com/2017/11/22/azure-container-service-kubernetes-devops-case-1/">Azure Container Service (Kubernetes)와 DevOps 구현 사례 #1</a>

<a href="http://ilseokoh.com/2017/11/22/azure-container-service-kubernetes-devops-case-1-local-dev-environment/">Azure Container Service (Kubernetes)와 DevOps 구현 사례 #2 – 로컬 개발환경</a>

<a href="http://ilseokoh.com/2017/11/22/azure-container-service-kubernetes-devops-case-3-devops/">Azure Container Service (Kubernetes)와 DevOps 구현 사례 #3 – DevOps</a>

<img class="alignnone size-large wp-image-5460" src="/wp-content/uploads/2017/11/088AB3A8-2D19-4496-93CB-6EB9CADD8CE6-1024x576.jpeg" alt="" width="640" height="360" />]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5455</wp:post_id>
		<wp:post_date><![CDATA[2017-11-22 17:32:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-11-22 08:32:56]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[open-cloud-2017]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="azure"><![CDATA[Azure]]></category>
		<category domain="post_tag" nicename="azure"><![CDATA[azure]]></category>
		<category domain="post_tag" nicename="azure-container"><![CDATA[azure container]]></category>
		<category domain="post_tag" nicename="container"><![CDATA[container]]></category>
		<category domain="post_tag" nicename="open-cloud-2017"><![CDATA[open cloud 2017]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[5456]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Azure CDN - DSA(Dynamic Site Acceleration) 동적 사이트 가속</title>
		<link>http://ilseokoh.com/2017/11/24/azure-cdn-dsadynamic-site-acceleration-dynamic-site-acceleration/</link>
		<pubDate>Fri, 24 Nov 2017 08:29:59 +0000</pubDate>
		<dc:creator><![CDATA[ilseokoh]]></dc:creator>
		<guid isPermaLink="false">http://ilseokoh.com/?p=5468</guid>
		<description></description>
		<content:encoded><![CDATA[CDN은 잘 변하지 않는 정적인(static) 컨텐츠를 사용자 가까운 캐싱서버에 캐싱해 놓고 사용자 요청이 있을 때 캐싱서버에서 컨텐츠를 가져가기 때문에 웹 사이트의 속도를 향상 시킬 수 있다. 정적인 컨텐츠는 이미지, 동영상, JavaScript, CSS 파일이다. 쇼핑카트 페이지 같은 동적인(Dynamic) 컨텐츠는 내용이 자꾸 변하기 때문에 전통적인 CDN의 도움을 받지 못한다. 하지만 지속적인 CDN의 기술 발전은 다양한 기술을 사용해서 동적인 컨텐츠도 빠르게 사용자에게 도달 하도록 돕고 있다. 그 중에 DSA(Dynamic Site Acceleration) 기능이 Azure CDN에 들어왔다.

Azure CDN은 Akamai와 Verizon CDN을 선택할 수 있다. 자세한 내용은 "<a href="http://ilseokoh.com/2016/11/23/azure-cdn-%ec%99%84%ec%a0%84%ec%a0%95%eb%b3%b5-1-%eb%a7%8c%eb%93%a4%ea%b8%b0/">Azure CDN 완전정복</a>" 시리즈를 참조바란다.

DSA는 몇 가지 방법으로 동적 컨텐츠의 성능을 올려준다. <a href="https://docs.microsoft.com/ko-kr/azure/cdn/cdn-dynamic-site-acceleration">상세 내용은 문서 참조</a>
<ol>
 	<li><strong>Route / network optimizations:</strong> 최적의 라우팅 경로를 BGP(경계 게이트웨이 프로토콜)를 통해서 찾아내서 가장 빠르고 안정적인 네트워크 경로(라우팅 경로)를 사용</li>
 	<li><strong>TCP optimization:</strong> TCP의 기본 행동중에 Slow Start를 제거,  TCP Connection을 영구적인 커넥션(persistent connection)으로 유지, TCP packet parameters 튜닝(Akamai only) 기술을 사용하여 TCP 를 최적화

[caption id="attachment_5473" align="aligncenter" width="1280"]<a href="/wp-content/uploads/2017/11/tcp-slow.jpg"><img class="wp-image-5473 size-full" src="/wp-content/uploads/2017/11/tcp-slow.jpg" alt="" width="1280" height="720" /></a> 그림은 TCP가 처음 3way 핸드쉐이크이크러러커넥션을을맺고고느린 시작으로로컨텐츠를 전송하는 방법에에대한 설명이다.[/caption]</li>
 	<li><strong>Resource prefetching (Akamai only):</strong> HTML 구문을 분석해서 이미지, CSS, Javascript 파일 같이 HTML에 포함된 리소스를 미리 캐싱해서 제공</li>
 	<li><strong>Adaptive Image Compression (Akamai only):</strong> 모바일과 같이 네트워크가 느려지는 상황에서는 고해상도 JPEG 파일이 아닌 작은 이미지를 보내주는 기술</li>
</ol>
<h4><a href="https://azure.microsoft.com/ko-kr/pricing/details/cdn/">DSA 가격 </a></h4>
DSA의 가격이 정적인 컨텐츠에 대한 CDN 가격 보다 조금 비싸다.
<h4>실제 적용 테스트</h4>
테스트 해본 사이트는 Word Press 사이트인 본 블로그  사이트에 적용해봤다.

Azure 포탈에서 CDN 끝점을 만들때 DSA를 적용하려면 아래 그림처럼 "Optimized for" 옵션을 "Dynamic site acceleration" 으로 설정한다. Route/ network optimization에서 Probe로 사용할 URL을 지정할 때 10KB 크기의 지워지지 않는 적당한 컨텐츠가 없어서 샘플파일을 다운받아 사이트에 업로드 후 적용했다.

<a href="/wp-content/uploads/2017/11/azure-cdn-dsa-create.jpg"><img class="size-full wp-image-5474 aligncenter" src="/wp-content/uploads/2017/11/azure-cdn-dsa-create.jpg" alt="" width="2048" height="1319" /></a>

사이트에 실제로 적용할 때는 Azure CDN에 <strong>두 개의 끝점(End Point)를 만들어서 정적인 컨텐츠와 동적인 컨텐츠에 대한 CDN 적용을 다르게 하는게 효율적이다</strong>.  아래 그림은 ilseokoh.azureedge.net은 DSA로 설정된 CDN 끝점이고, ilseokohstatic.azureedge.net은 일반 CDN 설정이다. 두 개 모두 DNS 관리 사이트에서 CNAME을 등록하고 Azure Portal에서 custom domain 설정을 했다.

<a href="/wp-content/uploads/2017/11/cdn-endpoint.jpg"><img class="size-full wp-image-5471 aligncenter" src="/wp-content/uploads/2017/11/cdn-endpoint.jpg" alt="" width="2002" height="1104" /></a>

Word Press에서 Static Contents에만 General web delivery 타입의 끝점을 적용하는 플러그인이 많다. 그 중에서 CDN Enabler 라는 플러그인을 적용해서 wp-content, wp-include 디렉토리에 들어있는 컨텐츠는 static.ilseokoh.com으로 요청하도록 설정했다.

<a href="/wp-content/uploads/2017/11/wordpress-cdn-enabler.jpg"><img class="alignnone size-full wp-image-5472" src="/wp-content/uploads/2017/11/wordpress-cdn-enabler.jpg" alt="" width="1717" height="1082" /></a>

적용 후 실제 http://dsa.ilseokoh.com/ 로 접속을 해서 테스트를 해보면 동적 컨텐츠인 홈페이지 등은 DSA가 적용된 dsa.ilseokoh.com 에서 컨텐츠를 가져오고 이미지 같은 정적인 컨텐츠는 static.ilseokoh.com 에서 가져온다.

브라우저 캐싱을 꺼놓고 접속 해보니 체감 속도는 무척 빠르다. 실제 성능 측정을 객관적으로 할 자신은 없다.

테스트를 마치고 설정을 모두 삭제했기 때문에 현재는 본 블로그에 CDN이 적용되지 않는다. CDN까지 적용할 만한 블로그는 아니다 ^^]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5468</wp:post_id>
		<wp:post_date><![CDATA[2017-11-24 17:29:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-11-24 08:29:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[azure-cdn-dsadynamic-site-acceleration-dynamic-site-acceleration]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="akamai"><![CDATA[akamai]]></category>
		<category domain="category" nicename="azure"><![CDATA[Azure]]></category>
		<category domain="post_tag" nicename="azure"><![CDATA[azure]]></category>
		<category domain="post_tag" nicename="azure-cdn"><![CDATA[azure cdn]]></category>
		<category domain="post_tag" nicename="cdn"><![CDATA[cdn]]></category>
		<category domain="post_tag" nicename="dsa"><![CDATA[DSA]]></category>
		<category domain="post_tag" nicename="dynamic-site-acceleration"><![CDATA[Dynamic Site Acceleration]]></category>
		<category domain="post_tag" nicename="verizon"><![CDATA[verizon]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[5476]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>69</wp:comment_id>
			<wp:comment_author><![CDATA[Anonymous]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[Anonymous@mail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[116.120.115.160]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2017-11-25 01:33:08]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2017-11-24 16:33:08]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Http 1.1 은 요청시마다 tcp연결을 맺지 않습니다. 1.0의 설명을 잘못 쓰신듯 합니다]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>74</wp:comment_id>
			<wp:comment_author><![CDATA[오일석]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[abc@sls.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[167.220.232.77]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2017-11-27 14:49:02]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2017-11-27 05:49:02]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[아 그러네요. HTTP 1.1 은 커넥션 킵얼라이브 등의 최적화가 되어 있군요.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Azure App Service - 문제진단 및 해결</title>
		<link>http://ilseokoh.com/2017/11/27/azure-app-service-diagonostic-trouble-shooting/</link>
		<pubDate>Mon, 27 Nov 2017 03:18:32 +0000</pubDate>
		<dc:creator><![CDATA[ilseokoh]]></dc:creator>
		<guid isPermaLink="false">http://ilseokoh.com/?p=5488</guid>
		<description></description>
		<content:encoded><![CDATA["[ALERT ACTIVATED] - Average Response Time GreaterThan 2 (Seconds) in the last 5 minutes" 라는 제목의 이메일을 가끔 받는다. Azure가 보내준 이메일 이고 블로그를 운영하는 Azure Web App에 아래와 같은 알람 설정을 해놨기 때문에 받을 수 있다.

<a href="/wp-content/uploads/2017/11/azure-web-app-alert.jpg"><img class="size-full wp-image-5490 aligncenter" src="/wp-content/uploads/2017/11/azure-web-app-alert.jpg" alt="" width="2126" height="1222" /></a>

임계값 2초는 조금 짧은 감이 있지만 다른 문제는 없는지 살펴보고 싶다. 다행히 Azure Application Insight를 연결해놨기 때문에 여러가지 지표를 볼 수 있다. Azure Dash 보드에 필요한 내용들을 모아서 한눈에 볼 수 있도록 설정 해놨다. 별 문제는 없어보인다. 방문자도 별로 없고 ...

<a href="/wp-content/uploads/2017/11/azure-web-app-dashboard.jpg"><img class="size-full wp-image-5491 aligncenter" src="/wp-content/uploads/2017/11/azure-web-app-dashboard.jpg" alt="" width="2560" height="1380" /></a>

최근에 새로 업데이트 된 기능인 "문제 진단 및 해결" 메뉴에서 뭔가 문제를 발견할 수 있을까 살펴봤다. 처음 열어봤는데 채팅처럼 꾸며놨고 기본 헬스체크를 해줬다. Requests and Error / CPU / Memory / Performance 4가지 항목에 대한 내용을 볼 수 있다. 4XX 오류가 1건 보이지만 중요한 URL이 아니었다. 급히 살펴본 내용이고 크게 문제는 없어 보인다. 여기서는 문제점이 안보여서 해결 방안 추천 등을 볼 수 없었지만 <a href="https://channel9.msdn.com/Shows/Azure-Friday/Azure-App-Service-Diagnostic-and-Troubleshooting-Experience">Azure Friday 동영상</a>에서는 문제가 있을 때의 데이터와 추천에 대한 내용을 볼 수 있다. Azure App Service는 내가 한 일이 적어도 많은 것을 되돌려준다.

<a href="/wp-content/uploads/2017/11/azure-web-app-diagonostics.jpg"><img class="size-full wp-image-5492 aligncenter" src="/wp-content/uploads/2017/11/azure-web-app-diagonostics.jpg" alt="" width="2560" height="1380" /></a>

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5488</wp:post_id>
		<wp:post_date><![CDATA[2017-11-27 12:18:32]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-11-27 03:18:32]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[azure-app-service-diagonostic-trouble-shooting]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="azure"><![CDATA[Azure]]></category>
		<category domain="post_tag" nicename="azure"><![CDATA[azure]]></category>
		<category domain="post_tag" nicename="azure-app-serivces"><![CDATA[azure app serivces]]></category>
		<category domain="post_tag" nicename="azure-application-insight"><![CDATA[azure application insight]]></category>
		<category domain="post_tag" nicename="azure-web-app"><![CDATA[azure web app]]></category>
		<category domain="post_tag" nicename="cloud"><![CDATA[cloud]]></category>
		<category domain="post_tag" nicename="diagonistics"><![CDATA[diagonistics]]></category>
		<category domain="post_tag" nicename="microsoft"><![CDATA[microsoft]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[5489]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>진에어 챗봇 서비스 - 제이드 출시</title>
		<link>http://ilseokoh.com/2017/11/28/jinair-chatbot-jaid/</link>
		<pubDate>Tue, 28 Nov 2017 04:32:12 +0000</pubDate>
		<dc:creator><![CDATA[ilseokoh]]></dc:creator>
		<guid isPermaLink="false">http://ilseokoh.com/?p=5497</guid>
		<description></description>
		<content:encoded><![CDATA[몇 달전에 진에어 팀과 함께 진행한 HackFest 가 있었다. 챗봇 개발을 위해 여러가지 적용해보는 내용이었고 3일 동안 할 수 있는 여러가지를 개발했었다. 관련된 내용은 <a href="https://microsoftapac.github.io/2017-05-26-jinair-kor.html">"진에어 고객지원 챗봇 서비스 구축"</a> 에서 상세한 내용을 살펴볼 수 있다. 진에어 팀에서는 지속적으로 개발하고 개선해서 최근 진에어 챗봇 서비스 제이드를 출시했다. 항공사의 여러가지 업무중 챗봇으로 서비스 할 수 있는 내용을 잘 구현해 놓았다. 앞으로 계속 발전해서 사람이 되길 ...

제이드가 해주는 기능은 크게 3가지
<ul>
 	<li>스케줄 조회, 출도착 조회</li>
 	<li>예약 조회</li>
 	<li>서비스 문의, Delight Message</li>
</ul>
Facebook 메신저와 Skype 채널에 배포되어 있다.

<a href="/wp-content/uploads/2017/11/jinair-jade-delight-message.png"><img class="alignnone size-full wp-image-5498" src="/wp-content/uploads/2017/11/jinair-jade-delight-message.png" alt="" width="246" height="437" /></a> <a href="/wp-content/uploads/2017/11/jinair-jade-faq.png"><img class="alignnone size-full wp-image-5499" src="/wp-content/uploads/2017/11/jinair-jade-faq.png" alt="" width="246" height="437" /></a> <a href="/wp-content/uploads/2017/11/jinair-jade-filght-info.png"><img class="alignnone size-full wp-image-5500" src="/wp-content/uploads/2017/11/jinair-jade-filght-info.png" alt="" width="246" height="437" /></a>

<a href="/wp-content/uploads/2017/11/jinair-jade-reservation.png"><img class="alignnone size-full wp-image-5501" src="/wp-content/uploads/2017/11/jinair-jade-reservation.png" alt="" width="245" height="437" /></a> <a href="/wp-content/uploads/2017/11/jinair-jade-reservation-detail.png"><img class="alignnone size-full wp-image-5502" src="/wp-content/uploads/2017/11/jinair-jade-reservation-detail.png" alt="" width="245" height="437" /></a> <a href="/wp-content/uploads/2017/11/jinair-jade-schedule.png"><img class="alignnone size-full wp-image-5503" src="/wp-content/uploads/2017/11/jinair-jade-schedule.png" alt="" width="246" height="437" /></a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5497</wp:post_id>
		<wp:post_date><![CDATA[2017-11-28 13:32:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-11-28 04:32:12]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[jinair-chatbot-jaid]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="chatbot"><![CDATA[chatbot]]></category>
		<category domain="post_tag" nicename="jade"><![CDATA[jade]]></category>
		<category domain="post_tag" nicename="jinair"><![CDATA[jinair]]></category>
		<category domain="category" nicename="microsoft-bot-framework"><![CDATA[Microsoft Bot Framework]]></category>
		<category domain="post_tag" nicename="microsoft-bot-framework"><![CDATA[microsoft bot framework]]></category>
		<category domain="post_tag" nicename="%ec%a0%9c%ec%9d%b4%eb%93%9c"><![CDATA[제이드]]></category>
		<category domain="post_tag" nicename="%ec%a7%84%ec%97%90%ec%96%b4"><![CDATA[진에어]]></category>
		<category domain="post_tag" nicename="%ec%b1%97%eb%b4%87"><![CDATA[챗봇]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[5504]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Azure SQL Database 마이그레이션 툴 - Microsoft SQL Server Migration Assistant</title>
		<link>http://ilseokoh.com/2017/12/01/microsoft-sql-server-migration-assistant/</link>
		<pubDate>Fri, 01 Dec 2017 07:45:51 +0000</pubDate>
		<dc:creator><![CDATA[ilseokoh]]></dc:creator>
		<guid isPermaLink="false">http://ilseokoh.com/?p=5508</guid>
		<description></description>
		<content:encoded><![CDATA[요즘 On-prem 서버 또는 VM에 SQL Server를 설치해서 사용하시던 많은 분들이 Azure SQL Database로 이전하고 있다. 관리도 편하고 안정성과 속도도 좋기 때문에 클라우드로 이전할 때 가능하다면 Azure SQL Database를 검토한다. 이 때 <a href="https://www.microsoft.com/en-us/download/details.aspx?id=53595">Microsoft SQL Server Migration Assistant</a> 툴을 사용하면 마이그레이션이 가능한지 확인을 하거나 (Assessment) 실제 스키마와 데이터를 마이그레이션(Migration) 할 수 있다.

SQL Server와 Azure SQL Database는 대부분 호환되지만 클라우드와 On-Prem의 특성으로 인한 차이점이 존재한다. 예를들어 Azure SQL Database는 Windows Authentication을 지원하지 않는다. 마이그레이션도 MDF, LDF 파일을 사용할 수 없다. 따라서 이런 툴이 서비스를 지원하는 것이다. 앞으로 <a href="https://azure.microsoft.com/en-us/blog/put-your-databases-on-autopilot-with-a-lift-and-shift-to-azure-sql-database/">Azure SQL Database Managed Instance</a>가 둘 사이의 차이점을 줄여줄 것이고,  <a href="https://azure.microsoft.com/ko-kr/services/database-migration/">Azure SQL Migration Service</a> (Preview) 가 더 편리한 마이그레이션 환경을 제공할 것이다.

툴은 총 6단계를 거치게 되는데 내부적으로는 아래 다이어그램처럼 작동한다.

<a href="/wp-content/uploads/2017/12/dma-process.jpg"><img class="alignnone size-full wp-image-5510" src="/wp-content/uploads/2017/12/dma-process.jpg" alt="" width="1408" height="942" /></a>
<h4>1.소스 데이터베이스 (Select Source)</h4>
로컬에 있는 소스 데이터베이스의 AAKorea3 라는 데이터베이스를 선택.

<a href="/wp-content/uploads/2017/12/sql-database-migration-source.jpg"><img class="size-full wp-image-5519 aligncenter" src="/wp-content/uploads/2017/12/sql-database-migration-source.jpg" alt="" width="1713" height="979" /></a>
<h4>2. 타겟 데이터베이스 (Select Target)</h4>
<a href="https://docs.microsoft.com/ko-kr/azure/sql-database/sql-database-get-started-portal">Azure 포탈을 통해서 미리 많들어 놓은 Azure SQL Database</a>를 선택. 여기서 SQL Database 의 방화벽에 작업하는 머신의 IP를 넣어야 접속 가능하다.

<a href="/wp-content/uploads/2017/12/sql-database-migration-target.jpg"><img class="size-full wp-image-5520 aligncenter" src="/wp-content/uploads/2017/12/sql-database-migration-target.jpg" alt="" width="1713" height="979" /></a>
<h4>3. 오브젝트 선택 (Select Object)</h4>
이 단계에서 마이그레이션 오류나 경고를 볼 수 있다. 지금 테스트로 마이그레이션 하는 데이터베이스는 스키마가 단순하기도 하고 SQL Database의 여러가지 기능을 사용하지 않아서 오류가 보이지 않고 일반적인 경고만 몇 개 보이지만 상황에 따라서 오류가 있을 수 있고 적절한 조치를 해줘야 한다.

여기서 발생한 경고는 "중요! ntext, 텍스트, 및 이미지 데이터 형식은 나중 버전의 SQL Server에서 제거 됩니다. 향후 개발 작업에서는 이 데이터 형식을 사용하지 않도록 하고 현재 이 데이터 형식을 사용하는 응용 프로그램은 수정하세요. 대신 nvarchar(max), varchar(max)및 varbinary(max) 를 사용합니다." 이런 내용인데 이번에는 수정하지 않고 넘어가기로 한다.

<a href="/wp-content/uploads/2017/12/sql-database-migration-select-object.jpg"><img class="size-full wp-image-5517 aligncenter" src="/wp-content/uploads/2017/12/sql-database-migration-select-object.jpg" alt="" width="1713" height="979" /></a>
<h4>4. 스크립트 생성 (Script &amp; Deploy schema)</h4>
마이그레이션을 위한 스크립트 생성

<a href="/wp-content/uploads/2017/12/sql-database-migration-redeploy.jpg"><img class="alignnone size-full wp-image-5515" src="/wp-content/uploads/2017/12/sql-database-migration-redeploy.jpg" alt="" width="1713" height="979" /></a>
<h4>5. 테이블 선택 (Select Table)</h4>
마이그레이션 할 테이블 선택.

<a href="/wp-content/uploads/2017/12/sql-database-migration-select-tables.jpg"><img class="size-full wp-image-5518 aligncenter" src="/wp-content/uploads/2017/12/sql-database-migration-select-tables.jpg" alt="" width="1713" height="979" /></a>

6. 데이터 마이그레이션 (Migrate Data)

데이터 이전을 해서 최종 마이그레이션 완료.

<a href="/wp-content/uploads/2017/12/sql-database-migration-migrate-data.jpg"><img class="alignnone size-full wp-image-5514" src="/wp-content/uploads/2017/12/sql-database-migration-migrate-data.jpg" alt="" width="1713" height="979" /></a>

여기까지 SQL Database (2012버전)에서 Azure SQL로 마이그레이션을 <a href="https://www.microsoft.com/en-us/download/details.aspx?id=53595">Microsoft SQL Server Migration Assistant</a> 툴을 이용해서 해봤다. 스키마가 다르고 사용하는 기능이나 Query가 다르니 상황마다 오류나 가이드가 다를 것이고 실제 Application 을 붙여서 테스트 해야 될 것이다.

다른 종류의 DBMS에서도도 Azure SQL Database로 마이그레이션 할 경우가 있는데 Migration Assistant 는 여러가지 버전이 있다.
<ul>
 	<li><a href="https://www.microsoft.com/en-us/download/details.aspx?id=54255">SQL Server Migration Assistant for Access</a></li>
 	<li><a href="https://www.microsoft.com/en-us/download/details.aspx?id=54254">SQL Server Migration Assistant for DB2</a></li>
 	<li><a href="https://www.microsoft.com/en-us/download/details.aspx?id=54257">SQL Server Migration Assistant for MySQL</a></li>
 	<li><a href="https://www.microsoft.com/en-us/download/details.aspx?id=54258">SQL Server Migration Assistant for Oracle</a></li>
 	<li><a href="https://www.microsoft.com/en-us/download/details.aspx?id=54256">SQL Server Migration Assistant for SAP ASE</a></li>
</ul>
다음 포스트에서는 이중에서 MySQL에 대해서 테스트 해보자.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5508</wp:post_id>
		<wp:post_date><![CDATA[2017-12-01 16:45:51]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-12-01 07:45:51]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[microsoft-sql-server-migration-assistant]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="azure"><![CDATA[Azure]]></category>
		<category domain="post_tag" nicename="azure"><![CDATA[azure]]></category>
		<category domain="post_tag" nicename="azure-sql-database"><![CDATA[azure sql database]]></category>
		<category domain="post_tag" nicename="microsoft-sql-server-migration-assistant"><![CDATA[Microsoft SQL Server Migration Assistant]]></category>
		<category domain="post_tag" nicename="migration"><![CDATA[migration]]></category>
		<category domain="post_tag" nicename="migraton-assistant"><![CDATA[migraton assistant]]></category>
		<category domain="post_tag" nicename="sql-database"><![CDATA[sql database]]></category>
		<category domain="post_tag" nicename="sql-server"><![CDATA[sql server]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[5523]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Azure Virtual Machine Scale Set #1 - 개요</title>
		<link>http://ilseokoh.com/2017/12/11/azure-virtual-machine-scale-set-1-introduction/</link>
		<pubDate>Mon, 11 Dec 2017 03:02:27 +0000</pubDate>
		<dc:creator><![CDATA[ilseokoh]]></dc:creator>
		<guid isPermaLink="false">http://ilseokoh.com/?p=5533</guid>
		<description></description>
		<content:encoded><![CDATA[같은 역할을 하는 VM이 수십, 수백대가 필요한 상황이 있을 수 있다. 규모가 큰 서비스 인프라를 운영하거나 또는 평소에는 2-3개의 VM으로 운영되다가 필요할 때 수십대의 VM으로 확장해서 사용해야하는 애플리케이션도 있다. 이렇게 VM의 개수가 많아지면 관리의 문제가 생긴다. 한꺼번에 만드는 건 Azure Poweshell이나 CLI를 통해서 한다고 하지만 VM 업데이트, 자동 확장(Auto Scale) 등 관리요소가 많아지고 스크립트도 많아진다. 이런 상황에 도움을 주기 위해 Azure Virtual Machine Scale Set(이하 VMSS)이 있다.

어떤 때에  Scale In/Out이 쉬운 수십대의 VM을 사용하게 될까? Azure 의 어떤 서비스는 VMSS를 사용해서 만들어진다. PaaS 서비스를 구축하는데 VMSS 가 사용되는 경우도 있다. 여기에 몇 가지 예가 있다.
<ul>
 	<li>Azure Service Fabric 은 VMSS로 VM을 생성하여 클러스터를 만든다.</li>
 	<li>Azure Batch 는 계산노드(Compute Node)를 VMSS 로 만든다.</li>
 	<li><a href="https://docs.microsoft.com/ko-kr/azure/virtual-machines/linux/cloudfoundry-get-started">Azure의 Pivotal Cloud Foundary</a>는 인프라를 생성할 때 VMSS를 사용한다.</li>
 	<li>MRI 에서 나온 이미지를 VMSS를 사용하여 VM들을 Scale out 해서 처리하고 다시 자동으로 Scale In 하는 사례</li>
 	<li>대용량의 데이터 분석을 위해 분석 VM 노드를 VMSS로 Scale Out/In을 처리</li>
 	<li>게임서버를 테스트 하기 위한 클라이언트를 VMSS를 이용하여 VM 400대에서 수행</li>
</ul>
<h4>VMSS의 특징</h4>
<ul>
 	<li>최대 1000개의 VM 생성</li>
 	<li>Custom VM을 이용하여 생성 가능 (Custom VM이미지의 경우 300대가 최대)</li>
 	<li>서비스 중지 없이 업데이트 가능(Rolling Update)</li>
 	<li>동적으로 VM 인스턴스 갯수를 관리하여 비용 절감</li>
 	<li>Auto Scale: 특정 조건에서 VM 개수를 자동으로 증가/감소</li>
 	<li>Azure Load Balancer와 통합 (100대 이하)</li>
 	<li>VMSS 전체 VM을 대상으로 Auto Scale, 업데이트가 가능하다. 개별 VM을 새로운 이미지로 업데이트하거나 자동 크기조정을 할 수는 없다.</li>
 	<li>Managed Disk를 사용하는 것이 유리하다.</li>
</ul>
<h4>Azure Portal에서 VMSS 생성</h4>
<a href="https://docs.microsoft.com/ko-kr/azure/virtual-machine-scale-sets/virtual-machine-scale-sets-portal-create">Azure Portal에서 VMSS를 생성</a>할 수 있다. OS, 인스턴스 갯수(VM 갯수), 위치, ID/Pwd, 인스턴스 크기 등을 정해주면 만들 수 있다. 하지만 Portal UI에서는 Custom VM 이미지를 사용할 수 가 없고 세밀한 설정이 어렵다. <a href="https://docs.microsoft.com/ko-kr/azure/virtual-machine-scale-sets/virtual-machine-scale-sets-create">Powershell 또는 CLI로 스크립트를 이용하거나</a> <a href="https://docs.microsoft.com/ko-kr/azure/virtual-machine-scale-sets/virtual-machine-scale-sets-deploy-scaling-app-template">ARM Template</a>을 이용하는 것이 바람직하다.

<a href="/wp-content/uploads/2017/12/azure-vmss-portal.jpg"><img class="alignnone size-full wp-image-5538" src="/wp-content/uploads/2017/12/azure-vmss-portal.jpg" alt="" width="1919" height="1380" /></a>
<h4>100개 인스턴스가 넘는 크기 조정 사용</h4>
<a href="https://docs.microsoft.com/ko-kr/azure/virtual-machine-scale-sets/virtual-machine-scale-sets-placement-groups">대규모 Virtual Machine Scale Sets와 작동</a> 문서에 잘 설명이 되어 있다. 100개 이하와 이상의 VMSS는 차이가 있다.

100개 이하에서는 Load Balancer를 붙일 수 있고 Load Balancer를 설정하여 부하를 분산하고 Probe 설정을 통해 문제가 있는 VM에 로드를 주지 않을 수 있다. 100개 이하의 VM은 하나의 Placement Group 안에 배치되고 각각 5개의 Fault Domain / Update Domain 에 VM들이 배치된다.  LB는 표준크기를 사용할 수 있는데 표준 크기의 LB의 Back end pool 의 최대 크기가 100개라는 제약이 적용되기 때문이기도 하다.  Load Blancer가 붙어있고 Probe 설정이 되어 있어야 자동 Rolling Update가 가능하다.

<img class="size-full wp-image-5540 aligncenter" src="/wp-content/uploads/2017/12/azure-vmss-placement-group.jpg" alt="" width="1275" height="233" />

하지만 100대가 넘어가면 Placement Group이 여러개가 되고 Load Balancer를 붙일 수 없다. 최대 1000대의 VM이 생성되지만 내가 만든 Custom 이미지를 사용하는 경우 최대 300대까지 배포가 가능하다. 위 그림은 97대의 VM을 Load Balancer 없이 100대 이상 사용 옵션으로 만든 후의 배포 모습이다. 초록색 점이 VM 한대 인데 3개의 Placement Group이 만들어지고 VM이 적절히 분산되어 있다.

100대 이상과 이하를 구분하여 생성할 때 스크립트에서 쓰는 스위치는 <em>singlePlacementGroup</em>  이다. True로 설정하면 100대 이하 False로 설정하면 100대 이상이고 False일 때 LB를 만들지 않아야 오류가 나지 않는다.

VM의 생성은 병렬로 만들어 지기 때문에 빠르게 수백대의 VM을 생성할 수 있다.
<h4>오버프로비전(OverProvisioning)</h4>
VM을 만들어 내는 걸 Provisioning 한다고 한다. SSD 를 가진 하나의 VM은 99.5% 임을 알고 있을 것이다. 이걸 10대 생성한다면 (99.5%)^10 = 95%, 100대 생성한다면 (99.5%)^100 = 60% 로 SLA가 떨어진다. 계산이 그렇다는 것이다. VM 생성이 실패할 확률이 높아 진다는 얘기고 실제로 큰 문제가 발생하지는 않는다. 하지만 이를 보완할 필요가 있기 때문에 OverProvisioning을 한다. 만약 100대를 만든다면 경우에 따라 다르지만 120대를 생성요청하고 먼저 성공한 100대의 VM만 남기는 식이다. 이렇게 Provisioning의 실패율을 현저히 낮출 수 있다.  여기서 추가로 만들기 요청된 20 대에 대해서는 비용이 청구되지는 않는다. OverProvisioning은 기본값이 True로 되어 있고 끌 수도 있다. 아래 그림은 100대를 만들어야 하지만 OverProvisioning으로 110대가 만들어졌다.

OverProvisioning 를 Off 로 설정해서 사용하지 않아야 하는 때는 어떤 상황일까? 구독의 Core 제약이 걸려서 추가로 VM이 설정되지 않거나 가상네트워크의 서브넷 개수가 적어서 추가 VM을 넣을 수 없는 경우 등이 그렇다.

<img class="size-full wp-image-5541 aligncenter" src="/wp-content/uploads/2017/12/azure-vmss-overprovisioning.jpg" alt="" width="665" height="246" />
<h4>Managed Disk 사용</h4>
VMSS에서 Managed Disk를 사용하는 것이 유리하다. 100대 이상의 인스턴스를 만들 때는 반드시 Managed Disk를 사용해야 한다. Unmanaged Disk는 Storage Account를 만들어야하고 Storage Account는 자신의 네트워크 제약 때문에 최대 20대 이하의 VM 디스크를 넣어야 한다. Unmanaged Disk를 사용해도 VMSS가 알아서 Storage Account를 관리해주기는 하지만 굳이 Unmanaged Disk를 사용할 이유는 찾지 못하겠다.
<h4>Custom VM의 생성</h4>
여러대의 VM을 생성해서 내 인프라를 꾸미는데 아무것도 설치되지 않은 Windows Server 2016을 사용하고 100대를 하나씩 RDP로 들어가서 관리를 할 수 는 없다. 거의 불가능한 작업이고 실수를 할 위험이 있다. 따라서 자동으로 이 설정을 해줘야 한다. 두가지 방법이 있다. Custom Script Extension을 사용하는 방법이 있고 VM 이미지를 사용하는 방법이 있다.
<h5>Custom Script Extension</h5>
VM의 확장(Extension)이고 VM이 Provision 되면 설정된 스크립트를 다운받아서 실행한다. <a href="https://docs.microsoft.com/ko-kr/azure/virtual-machines/windows/extensions-customscript">Windows VM이라면 PowerShell</a>, <a href="https://docs.microsoft.com/ko-kr/azure/virtual-machines/linux/extensions-customscript">Linux</a>라면 Bash 스크립트를 실행하는 식이고 이 스크립트에서 해당 VM에 필요한 모든 미들웨어와 데이터, 내 Application을 설치하고 설정까지 자동으로 실행하는 것이다. 스크립트를 만드는데 노력이 들어가는 일이지만 VMSS의 최대값이 1000대까지 VM을 만들 수 있고 코드이기 때문에 업데이트와 관리가 쉽다.
<h5>VM 이미지 사용</h5>
VM을 하나 만들어서 필요한 모든 미들웨어와 Application을 설치한 후에 VM을 이미지로 만들고 VMSS 가 VM을 생성할 때 이 이미지를 사용하는 방법이다. 스크립트보다는 빠르게 적용할 수 있다. 다만 Applicsation의 업데이트가 있을 때 이미지를 다시 생성해야 한다. 이 부분을 어느정도 스크립트로 작성해 놓으면 좋다. 단점은 최대 300대까지만 생성이 가능하다.
<h4>Azure 가상 네트워크</h4>
VMSS가 VM을 생성하지만 그 VM들은 Azure의 가상네트워크의 하나의 Subnet 안에 모두 만들어진다. 여기서 주의할 것은 Subnet의 IP 갯수다. 300대를 만들어야 하는데 Subnet의 설정이 10.0.0.0/24 (256개 영역. 실제로는 251개 사용 가능)로 되어 있다면 오류가 발생한다. 따라서 가상네트워크를 미리 만들면서 네트워크 주소 범위와 서브넷을 잘 설정해놓고 VMSS를 만들 때 그 서브넷을 지정해서 만드는 게 실수를 줄여준다. Subnet의 IP 개수는 필요한 것 보다 약 20% 정도 더 여유를 둬야 하는데 이는 OverProvisioning을 생각해야 하기 때문이다.
<h4>구독(Subscription)의 Core 수 제약</h4>
구독은 기본값으로 20개의 Core 수 제약이 있다. 이는 어떤 실수로 인해 비용이 과다 청구되는 것을 막기 위한 제약이다. 하지만 VMSS를 쓰기로 했다면 20개의 Core 보다 더 많이 사용할 가능성이 있다. 따라서 코어 제약을 원하는 개수로 늘려놔야 한다.  <a href="http://ilseokoh.com/2017/12/10/azure-core-limit/">Azure 구독의 코어수 제약 늘리기</a>를 참조해서 변경할 수 있다.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5533</wp:post_id>
		<wp:post_date><![CDATA[2017-12-11 12:02:27]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-12-11 03:02:27]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[azure-virtual-machine-scale-set-1-introduction]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="azure"><![CDATA[Azure]]></category>
		<category domain="post_tag" nicename="azure"><![CDATA[azure]]></category>
		<category domain="post_tag" nicename="azure-virtual-machine-scale-set"><![CDATA[Azure Virtual Machine Scale Set]]></category>
		<category domain="post_tag" nicename="cloud"><![CDATA[cloud]]></category>
		<category domain="post_tag" nicename="microsoft"><![CDATA[microsoft]]></category>
		<category domain="post_tag" nicename="virtual-machine-scale-set"><![CDATA[Virtual Machine Scale Set]]></category>
		<category domain="post_tag" nicename="vmss"><![CDATA[vmss]]></category>
		<category domain="post_tag" nicename="%ec%95%a0%ec%a0%80"><![CDATA[애저]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[5555]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>147</wp:comment_id>
			<wp:comment_author><![CDATA[Azure Planned Maintenance (리부팅 동반)-2018년 1월 2일 부터 &#8211; 오일석의 블로그]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://ilseokoh.com/2017/12/15/azure-planned-maintenance-jan-2nd-2018/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[52.231.32.123]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2017-12-15 18:13:21]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2017-12-15 09:13:21]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] Service와 VMSS(Virtual Machine Scale Set)은 지원하지 [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>148</wp:comment_id>
			<wp:comment_author><![CDATA[Azure Planned Maintenance 리부팅 동반 2018년 1월 2일 부터 &#8211; 오일석의 블로그]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://ilseokoh.com/2017/12/15/azure-planned-maintenance/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[52.231.32.123]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2017-12-15 18:24:18]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2017-12-15 09:24:18]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] Service와 VMSS(Virtual Machine Scale Set)은 지원하지 [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Azure 구독의 Core 수 제약 늘리기</title>
		<link>http://ilseokoh.com/2017/12/10/azure-core-limit/</link>
		<pubDate>Sun, 10 Dec 2017 04:36:46 +0000</pubDate>
		<dc:creator><![CDATA[ilseokoh]]></dc:creator>
		<guid isPermaLink="false">http://ilseokoh.com/?p=5545</guid>
		<description></description>
		<content:encoded><![CDATA[Azure 구독당 기본값으로 20개의 Core 수 제약이 있다. 이는 어떤 실수로 인해 과다한 사용량 청구를 막기위한 제약이다. 내 구독의 현재 상태를 보려면 구독 메뉴에서 사용량 및 할당량 메뉴에 들어가면 볼 수 있다.

<img class="size-full wp-image-5546 aligncenter" src="/wp-content/uploads/2017/12/azure-quoat.jpg" alt="" width="2536" height="1249" />

&nbsp;

이 제약을 넘어서는 Core를 사용하려고 하면 이런 오류메시지를 만나게 된다.
<blockquote>Operation results in exceeding quota limits of Core</blockquote>
이 오류를 해결하기 위해서는 서비스 요청을 해서 제약을 풀어야 한다.
<h5>1. 위 그림에서 "증가요청" 버튼을 누르거나 "도움말 + 지원" 메뉴에서 "새 지원 요청"을 누른다. 기본사항에 할당량 문제 유형, 구독, 코어, 지원 플랜을 선택한다.</h5>
<img class="size-full wp-image-5547 aligncenter" src="/wp-content/uploads/2017/12/azure-core-support.jpg" alt="" width="1323" height="908" />
<h5>2. 리소스 관리자 배포모델, 위치, 필요한 VM 시리즈를 선택</h5>
<img class="size-full wp-image-5548 aligncenter" src="/wp-content/uploads/2017/12/azure-core-support2.jpg" alt="" width="1323" height="908" />
<h5>3. 연락처 정보를 입력한다. 잠시후에 아래와 같은 이메일을 받을 수 있다.</h5>
<img class="size-full wp-image-5550 aligncenter" src="/wp-content/uploads/2017/12/azure-core-support-email.jpg" alt="" width="1497" height="1069" />

이제 마이크로소프트 기술지원 부서에서 할당량 요청에 대한 처리를 해주거나 연락을 취할 것이다.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5545</wp:post_id>
		<wp:post_date><![CDATA[2017-12-10 13:36:46]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-12-10 04:36:46]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[azure-core-limit]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="auzre-%ec%a7%80%ec%9b%90-%ec%9a%94%ec%b2%ad"><![CDATA[Auzre 지원 요청]]></category>
		<category domain="category" nicename="azure"><![CDATA[Azure]]></category>
		<category domain="post_tag" nicename="azure"><![CDATA[azure]]></category>
		<category domain="post_tag" nicename="azure-limit"><![CDATA[Azure limit]]></category>
		<category domain="post_tag" nicename="subscription"><![CDATA[subscription]]></category>
		<category domain="post_tag" nicename="%ea%b5%ac%eb%8f%85"><![CDATA[구독]]></category>
		<category domain="post_tag" nicename="%ec%97%90%eb%9f%ac"><![CDATA[에러]]></category>
		<category domain="post_tag" nicename="%ec%a0%9c%ec%95%bd"><![CDATA[제약]]></category>
		<category domain="post_tag" nicename="%ec%a0%9c%ed%95%9c"><![CDATA[제한]]></category>
		<category domain="post_tag" nicename="%ec%bd%94%ec%96%b4"><![CDATA[코어]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[5552]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>146</wp:comment_id>
			<wp:comment_author><![CDATA[Azure Virtual Machine Scale Set #1 &#8211; 개요 &#8211; 오일석의 블로그]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://ilseokoh.com/2017/12/11/azure-virtual-machine-scale-set-1-introduction/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[52.231.32.121]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2017-12-11 12:04:24]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2017-12-11 03:04:24]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;]  가능성이 있다. 따라서 코어 제약을 원하는 개수로 늘려놔야 한다.  Azure 구독의 코어수 제약 늘리기를 참조해서 변경할 수 [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Azure Virtual Machine Scale Set #2 – Custom 이미지로 120대 만들기</title>
		<link>http://ilseokoh.com/2017/12/11/azure-virtual-machine-scale-set-2-120-instances/</link>
		<pubDate>Mon, 11 Dec 2017 07:01:34 +0000</pubDate>
		<dc:creator><![CDATA[ilseokoh]]></dc:creator>
		<guid isPermaLink="false">http://ilseokoh.com/?p=5558</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://ilseokoh.com/2017/12/11/azure-virtual-machine-scale-set-1-introduction/">Virtual Machine Scale Set(이하 VMSS)의 개요</a>에 대해서는 지난 포스트에 설명이 되어 있다. 여기서는 Azure CLI를 이용해서 실제로 VMSS를 만드는 방법에 대한 내용이다. Custom VM 이미지를 이용해서 VMSS의 VM들을 생성하기 위해서 이미지용 VM을 만들고 스크립트를 통해서 이미지를 만든다.

전체 다이어그램은 아래 그림과 같다.

<img class="size-full wp-image-5561 aligncenter" src="/wp-content/uploads/2017/12/vmss-architecture.jpg" alt="" width="1280" height="720" />
<h4>1. VM 이미지 만들기</h4>
<h5><a href="https://docs.microsoft.com/en-us/cli/azure/install-azure-cli?view=azure-cli-latest">1) Azure CLI 2.0 설치</a> 하고  <a href="https://docs.microsoft.com/ko-kr/cli/azure/authenticate-azure-cli?view=azure-cli-latest">Azure 로그인</a>을 먼저한다.</h5>
<pre class="prettyprint">$ az login
To sign in, use a web browser to open the page https://aka.ms/devicelogin and enter the code G8R712ZTN6 to authenticate.</pre>
<h5>2) 리소스 그룹을 2개 만든다.</h5>
<pre class="prettyprint">$ az group create --name VMSSImageGroup --location koreacentral

$ az group create --name VMSSGroup --location koreacentral</pre>
<h5>3) Portal 에서 이미지 생성용 VM을 생성하고 필요한 미들웨어나 Application을 설치 후 잘 작동하는지 확인한다.</h5>
<h5>4) <a href="https://docs.microsoft.com/ko-kr/azure/virtual-machines/windows/classic/capture-image">Windows의 경우 RDP 접속해서 sysprep 한다</a>. <a href="https://docs.microsoft.com/ko-kr/azure/virtual-machines/linux/capture-image">리눅스의 경우 SSH로 접속해서 waagent 명령을 실행</a>한다.</h5>
<h5>5) 이미지 생성용 VM을 Deallocate / Generalize 시키고 이미지를 생성한다.</h5>
<pre class="prettyprint">$ az vm deallocate -g VMSSImageGroup -n VMSSImageVM1

$ az vm generalize -g VMSSImageGroup -n VMSSImageVM1

$ az image create --name VMSSImage01 --resource-group VMSSImageGroup --source VMSSImageVM1</pre>
<h5>6) 이미지 생성용 VM을 지운다.</h5>
<pre class="prettyprint">az vm delete -n VMSSImageVM1 -g VMSSImageGroup</pre>
&nbsp;
<h4>2. VMSS 생성</h4>
VM들이 들어갈 가상네트워크를 먼저 만들고 방금 만든 이미지로 120개의 VM을 VMSS로 생성한다. 100개 이상의 VM은 Load Balancer를 붙이지 못하고 single-placement-group을 false로 설정하여 생성한다. 가상네트워크의 서브넷 IP 범위를 120개 보다 크게 넉넉히 잡아줘야 한다.
<pre class="prettyprint">$ az network vnet create --name VMSSVNet --resource-group VMSSGroup --location koreacentral --address-prefix 10.1.0.0/16 --subnet-name VMSSSubnet --subnet-prefix 10.1.0.0/22

$ az vmss create --image /subscriptions/e4723bbb-cd59-41dc-86b7-2e239d536c04/resourceGroups/VMSSImageGroup/providers/Microsoft.Compute/images/VMSSImage0  \
                 --name TestVMSS --resource-group VMSSGroup --authentication-type password \
                 --admin-username kevinoh --admin-password '&lt;pasword&gt;' --single-placement-group false \
                 --load-balancer "" --vm-sku Standard_D1_v2 --instance-count 120 --vnet-name VMSSVNet \
                 --subnet VMSSSubnet --disable-overprovision</pre>
명령에서 사용한 파라미터를 몇 가지 살펴보자.
<ul>
 	<li>image: 1에서 생성한 이미지를 포탈에서 보면 Resource ID가 있다. 리소스그룹이 같으면 이미지 이름을 써도 되지만 리소스그룹이 다르기 때문에 ID를 사용한다. Managed Image는 리소스 아이디, Unmanaged image는 Storage Account URL를 사용한다.</li>
 	<li>name: VMSS이름</li>
 	<li>resource-group: VMSS가 생성될 리소스그룹</li>
 	<li>authntication-type: password 로 지정하여 ID/pwd를 입력한다.</li>
 	<li>admin-username: admin id</li>
 	<li>admin-password: admin pwd</li>
 	<li>single-placement-group: 100개 이상을 만들기 위해서 false로 설정한다. 상세 설명은 <a href="http://ilseokoh.com/2017/12/11/azure-virtual-machine-scale-set-1-introduction/">개요</a> 참조</li>
 	<li>load-balancer: single-placement-group false이고 100개 이상을 만드려면 Load Balancer를 만들지 않아야 한다. ""로 명시하지 않으면 오류 발생</li>
 	<li>vm-sku: VM 사이즈. 사이즈 선택을 위한 문자열은 <a href="https://docs.microsoft.com/ko-kr/azure/virtual-machines/windows/sizes-general">가상 컴퓨터 크기 페이지</a> 참조</li>
 	<li>instance-count: 생성할 VM 수</li>
 	<li>vnet-name: 가상네트워크 이름</li>
 	<li>subnet-name: 서브넷 이름</li>
 	<li>disable-overprovision: 현재 사용중인 구독의 core limit이 100개로 설정되어 있어서 껐다.</li>
</ul>
그 외 상세한 파라미터는<a href="https://docs.microsoft.com/en-us/cli/azure/vmss?view=azure-cli-latest#az_vmss_scale"> az vmss 커멘드 설명</a>을 참조

Azure Portal에서 인스턴스를 확인하면 120개의 인스턴스가 생성된 것을 확인 할 수 있다.

<a href="/wp-content/uploads/2017/12/azure-vmss-after-update2.jpg"><img class="size-full wp-image-5564 aligncenter" src="/wp-content/uploads/2017/12/azure-vmss-after-update2.jpg" alt="" width="1323" height="908" /></a>
<h4>3. 인스턴스 갯수 늘리기/줄이기</h4>
<pre class="prettyprint"># 줄이기
az vmss scale --resource-group VMSSGroup --name TestVMSS --new-capacity 3
# 늘이기
az vmss scale --resource-group VMSSGroup --name TestVMSS --new-capacity 120</pre>
인스턴스 갯수를 늘리고 줄이는 명령이다.
<h4>4. VM 업데이트</h4>
운영을 하다보면 업데이트가 필요하다. VMSS 를 업데이트 하려면 먼저 VM이미지에서 다시 VM을 생성해서 업데이트를 하고 새로운 VM이미지를 만들어야 한다. VM 생성은 Portal에서 할 수 있고 아래 명령으로 VM을 다시 생성할 수 있다. 그리고 다시 1번을 수행해서 이미지를 생성한다.
<pre class="prettyprint">$ az vm create -n VMSSImageVM3 -g VMSSImageGroup --image VMSSImage01 --vnet-name VMSSI
mageGroup-vnet --subnet default --authentication-type password --admin-username kevinoh --admin-password 'Kevin!3245678' --size Standard_DS1_v2</pre>
새로 생성된 이미지 이름이 VMSSImage02라면 아래 명령으로 VMSS 의 이미지를 업데이트 할 수 있다. 그리고 전체 이미지를 즉시 업데이트 할 수 있다. instance-ids "*" 는 전체 업데이트고 인스턴스 아이디를 여러개씩 지정해서 업데이트 할 수도 있다. 100개 이상의 VM을 가지고 있고 Load Blancer가 없는 VMSS 구성은 Rolling Update가 지원되지 않는다. 반대의 경우라면 az vmss rolling-upgrade 명령을 살펴보기 바란다.
<pre class="prettyprint">$ az vmss update --resource-group VMSSTestGroup --name VMSSTest --set virtualMachineProfile.storageProfile.imageReference.id=/subscriptions/e47f23bb-cd59-41dc-86b7-2e239d536c04/resourceGroups/VMImageGroup/providers/Microsoft.Compute/images/VMSSImage02

$ az vmss update-instances --resource-group VMSSGroup --name TestVMSS --instance-ids "*"</pre>
이미지를 변경 후에 Azure Portal에서 인스턴스를 확인해보면 최신모델이 아니오로 표시된다. 업데이트에 성공하면 다시 예로 변경된다.
<a href="/wp-content/uploads/2017/12/azure-vmss-update.jpg">
<img class="size-full wp-image-5565 aligncenter" src="/wp-content/uploads/2017/12/azure-vmss-update.jpg" alt="" width="1329" height="879" /></a>
<h4>5. VMSS Dashboard tool 을 사용하여 수동 Rolling Update</h4>
python으로 만들어진 <a href="https://github.com/MurthyCloudConfigurations/vmssdashboard">VMSS Dashboard tool</a> 이 있다. Github에서 소스를 다운로드 받아서 python vmsseditor.py 를 실행하면 툴이 실행된다. 이 툴을 이용하면 Fault Domain 별로 VM 업데이트를 수동으로 실행 할 수 있다. 만약 VM 이미지를 변경하고 서비스의 중단없이 업데이트를 하려면 Fault Domain 별로 업데이트를 수행하면 된다.

<a href="/wp-content/uploads/2017/12/azure-vmss-after-update3.jpg"><img class="size-full wp-image-5567 aligncenter" src="/wp-content/uploads/2017/12/azure-vmss-after-update3.jpg" alt="" width="1302" height="982" /></a>

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5558</wp:post_id>
		<wp:post_date><![CDATA[2017-12-11 16:01:34]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-12-11 07:01:34]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[azure-virtual-machine-scale-set-2-120-instances]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="azure"><![CDATA[Azure]]></category>
		<category domain="post_tag" nicename="azure"><![CDATA[azure]]></category>
		<category domain="post_tag" nicename="azure-virtual-machine-scale-set"><![CDATA[Azure Virtual Machine Scale Set]]></category>
		<category domain="post_tag" nicename="custom-image"><![CDATA[custom image]]></category>
		<category domain="post_tag" nicename="virtual-machine-scale-set"><![CDATA[Virtual Machine Scale Set]]></category>
		<category domain="post_tag" nicename="vm"><![CDATA[VM]]></category>
		<category domain="post_tag" nicename="vmss"><![CDATA[vmss]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[azure-virtual-machine-scale-set-2-100-instances]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[5541]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Azure Planned Maintenance 리부팅 동반</title>
		<link>http://ilseokoh.com/2017/12/15/azure-planned-maintenance/</link>
		<pubDate>Fri, 15 Dec 2017 09:22:37 +0000</pubDate>
		<dc:creator><![CDATA[ilseokoh]]></dc:creator>
		<guid isPermaLink="false">http://www.ilseokoh.com/?p=5593</guid>
		<description></description>
		<content:encoded><![CDATA[&nbsp;

Azure Planned Maintenance(계획된 유지 관리)가 계획되어 있습니다. VM을 사용해서 서비스하고 있는 팀은 살펴볼 필요가 있습니다. 아래 날짜들은 변경될 가능성이 있습니다.
<h4>Planned Maintenance(계획된 유지 관리)에 대하여</h4>
Azure에서 사용하는 VM은 가상환경으로 Host 인프라 위에서 만들어지고 관리됩니다. Host 인프라의 안정성, 보안을 향상시키기 위해서 주기적으로 업데이트를 합니다. Host OS에 보안 업데이트나 기능 업그레이드, 펌웨어 업데이트 등의 업데이트가 있습니다. 이런 Planned Maintenance는 두가지 종류가 있습니다.
<ul>
 	<li><strong>리부팅 없는 Planned Maintenance:</strong> VM을 리부팅 하지 않아도 되는 업데이트입니다. 업데이트가 실행되면 몇 초 동안 VM이 멈추고(Freezing) 호스트 업데이트가 끝나면 바로 작동합니다. 최대 시간은 30초라고 되어 있는데 보통 5-15초 정도의 임팩트가 있습니다. 따라서 정말 중요한 워크로드(Mission Critical Workload)가 아니면 신경쓰지 않아도 자연스럽게 지나갈 수 있습니다. 여기서 그냥 지나가려면 리트라이(Retry) 로직이 중요할 수 있습니다. 예를들어 15초 멈춘다 해도 설정에 따라 Database 커넥션이 끊어지거나 TCP 커넥션이 끊어질 수 있습니다. 이때 애플리케이션의 Retry 로직이 작동하여 문제없이 다시 커넥션할 수 있어야 합니다.</li>
 	<li><strong>리부팅을 동반하는 Planned Maintenance</strong>: VM 리부팅을 동반하는 업데이트 입니다. 신경써서 관리해야합니다. 이런 Planned Maintenance 는 공지도 나오고 알림도 받을 수 있습니다.</li>
</ul>
이번 Planned Maintenance 는 리부팅을 동반하는 업데이트 입니다. 지난 2016년 봄에 한번 있었고 이번에 또 계획되어 있습니다. Azure 팀은 일년에 한번 이하로 발생하도록 목표를 잡고 있습니다. 이번 Planned Maintenance 의 상세 내용에 설명 합니다.
<h4>이번 Planned Maintenance 는</h4>
<ul>
 	<li><strong>리부팅 됩니다</strong>. (정확히는 Redeploy )</li>
 	<li><strong>몇 분</strong> 걸릴 수도 있습니다.</li>
 	<li>Host OS를 Windows Server 2016으로 업데이트 합니다. 여기서 Host OS와 내 VM의 OS가 헷갈리면 안됩니다. 내 VM의 OS는 그대로 유지 됩니다.</li>
 	<li>그 동안 쌓여 있던 펌웨어 업데이트를 이번에 한꺼번에 합니다.</li>
 	<li><strong>VM의 Temp Disk 는 지워집니다.</strong> (윈도우 서버의 경우 대걔 D: 드라이브, Linux의 경우 /dev/sdb1) OS 디스크나 Data Disk는 유지됩니다. 혹시 Temp Disk에 지워지면 안되는 내용을 쓰도록 설정되어 있다면 이번에 수정을 하는게 좋겠습니다.</li>
 	<li>모든 VM이 대상이 되는 건 아닙니다. 최근 4-5개월 전에 만든 VM은 이미 업데이트된 Host에 만들어졌을 가능성이 있습니다. (확인은 일정이 시작된 후 아래 방법으로 가능)</li>
 	<li>모든 지역이 한꺼번에 실행되는게 아니고 계획에 따라 몇 단계로 실행됩니다. 특히 데이터센터의 페어는 동시에 하지 않습니다. 예를들어 Korea Central 지역과 Korea South가 동시에 진행되지 않습니다.</li>
</ul>
<h4>이번 Planned Maintenance의 일정과 프로세스</h4>
아래 날짜들은 변경될 가능성이 있습니다.
<h5><strong>Step 1. 2018년 1월 2일에 시작 - 관리자에게 이메일이 발송될 예정</strong></h5>
Azure 구독의 관리자(Admin)와 협력 관리자(Co-admin)에게 이메일이 발송됩니다. 현재 설정되어 있는 Admin 을 확인하거나 추가하려면 <a href="https://docs.microsoft.com/ko-kr/azure/billing/billing-add-change-azure-subscription-administrator#add-an-rbac-owner-admin-for-a-subscription-in-azure-portal">Azure Portal에서 구독에 대한 RBAC 소유자 관리자 추가 문서</a>를 참조하시고 이메일을 받을 수 있는 상태인지 미리 살펴보는게 좋겠습니다. 앞으로 계속 주요 알림이 구독 관리자 이메일 주소로 전송됩니다.

이메일 말고 Webhooks 나 SMS 도 지원하는데 한국 휴대폰 번호는 안됩니다. 혹시 Azure Logic App 을 사용하고 계신다면 <a href="https://docs.microsoft.com/ko-kr/azure/connectors/connectors-native-webhook">Webhook 커넥터</a>를 이용해서 <a href="https://docs.microsoft.com/ko-kr/azure/connectors/connectors-create-api-slack">슬랙 커넥터</a>로 연결시켜 슬랙에 꽂을 수도 있겠죠. Webhook 설정은 <a href="http://Windows 가상 컴퓨터에 대한 계획된 유지 관리 알림 처리">Windows 가상컴퓨터에 대한 계획된 유지 관리 알림 처리 문서</a>를 참조 바랍니다.
<h5>포털에서 확인하는 3가지 방법</h5>
<strong>1. Azure 포탈의 "도움말 + 지원 &gt; 계획된 유지 관리" 메뉴에서 확인 할 수 있습니다. </strong>

<a href="/wp-content/uploads/2017/12/azure-planned-maintenance-menu.jpg"><img class="size-full wp-image-5572 aligncenter" src="/wp-content/uploads/2017/12/azure-planned-maintenance-menu.jpg" alt="" width="1042" height="691" /></a>

&nbsp;

지금은 기간이 아니라서 내용이 없고 저도 한번도 본적이 없어서 동영상에서 캡쳐 했습니다. 이런식으로 계획된 VM들의 리스트를 볼 수 있습니다.

<a href="/wp-content/uploads/2017/12/portal-planned-maintenace.jpg"><img class="size-full wp-image-5573 aligncenter" src="/wp-content/uploads/2017/12/portal-planned-maintenace.jpg" alt="" width="1910" height="1004" /></a>

<strong>2. 포탈의 가상 컴퓨터 메뉴에서 확인 가능합니다. </strong>

<a href="/wp-content/uploads/2017/12/planned-maintenance-vm.png"><img class="size-full wp-image-5618 aligncenter" src="/wp-content/uploads/2017/12/planned-maintenance-vm.png" alt="" width="1833" height="1185" /></a>

<strong>3. Azure 포탈 가상컴퓨터에 들어가면 볼 수 있습니다. 특히 Step 2에서 설명할 직접 실행하기 버튼이 여기에 있습니다. </strong>

<a href="/wp-content/uploads/2017/12/planned-maintenance-vm-start.png"><img class="size-full wp-image-5619 aligncenter" src="/wp-content/uploads/2017/12/planned-maintenance-vm-start.png" alt="" width="1832" height="1185" /></a>

물론 <a href="https://docs.microsoft.com/ko-kr/azure/virtual-machines/linux/maintenance-notifications">Azure CLI</a>, <a href="https://docs.microsoft.com/ko-kr/azure/virtual-machines/windows/maintenance-notifications#check-maintenance-status-using-powershell">PowerShell</a> 을 사용해서 확인 할 수도 있습니다.
<h5><strong>Step 2. 내가 직접 실행하는 기간(Proactive Window) 2018년 1월 2일부터 1월 9일까지 </strong></h5>
내가 사용하는 VM들이 HA 구성이 잘 되어 있다면 직접 실행하지 않아도 Step 3에서 자연스럽게 되도록 그냥 둬도 됩니다. 사실 이렇게 되야죠. 가용성 집합(Availability Set)으로 묶여 있는 VM들의 경우 가능한 얘기 입니다. 하지만 여러가지 이유에서 HA 구성이 안되어 있거나 완벽하지 않을 수 있습니다. 예를들어 MySQL을 VM 1대(SSD 사용하면 SLA 99.5%)에 구성해서 사용하고 있는 경우가 그렇습니다.  여기에 그 외의 이유들이 몇 가지 있습니다.
<ul>
 	<li>리부팅이 되면 서비스를 수동으로 올려줘야 하는 경우. 또는 서비스들의 실행 순서가 있어서 사람이 확인하면서 해야 하는 경우</li>
 	<li>서비스를 사용하는 고객에게 정확히  날짜와 시간을 공지하고 하고 싶은 경우</li>
 	<li>미뤄놨던 윈도우 업데이트나 미들웨어 등의 같이 업데이트 하고 싶은 경우</li>
 	<li>리부팅 후에 서비스가 올라와서 스스로 준비되는데 30분이 넘게 걸리는 경우 (아래 Step 3에서 자동으로 업데이트 될 때 가용성 집합이 Update Domain 하나가 끝나면 30분 기다려 주는 이유)</li>
 	<li>그냥 내가 통제하는 상황에서 리부팅 하고 싶은 경우</li>
</ul>
굳이 신경쓰지 않아도 되는 경우도 있습니다.
<ul>
 	<li>개발용 QA 용이라서 리부팅되도 상관없는 경우</li>
 	<li>자주 리부팅 하는 경우</li>
 	<li>잠깐 쓰는 용도의 VM</li>
</ul>
<strong>기간중에 직접 실행하려면 위의 스크린 샷에서 보이는 "<span style="color: #800000;">Initiate Maintenance now</span>" 버튼을 눌러서 실행합니다.</strong>

Cloud Service와 <a href="http://ilseokoh.com/2017/12/11/azure-virtual-machine-scale-set-1-introduction/">VMSS(Virtual Machine Scale Set)</a>은 지원하지 않습니다.
<h5><strong>Step 3. 직접 실행하지 않은 VM에 대한 실행 (Scheduled Maintenance) - 기간이 아직 정해지지 않음. </strong></h5>
Step 2에서 직접 실행하지 않아서 남아있는 VM들은 이 기간 동안 자동으로 리부팅 되면서 업데이트 됩니다.  몇 분이 걸릴 수 있습니다. 역시 Temp Disk는 지워집니다. 가용성 집합을 사용한 경우 Update Domain 단위로 업데이트 됩니다. Update Domain 사이에는 30분의 시간을 기다려 줍니다.

<a href="https://docs.microsoft.com/ko-kr/azure/best-practices-availability-paired-regions#what-are-paired-regions">Region Pair</a> 는 동시에 업데이트 되지 않습니다.

<a href="https://docs.microsoft.com/ko-kr/azure/best-practices-availability-paired-regions">BCDR(Business continuity and disaster recovery)</a> 이 적용되어 있다면 더 안전하겠지만 몇 분안에 끝나는 업데이트에서 BCDR이 작동하는 것이 좋은지는 관리자의 판단이 필요할 것 같습니다.

<strong>Scheduled Event(예정된 이벤트) 를 사용하여 대응하기 (현재 미리보기)</strong>

Scheduled Event를 걸어놓으면 실제 리부팅 되기 15분 전에 알림을 받을 수 있습니다. Scheduled Event를 이용해서 리부팅 전에 해야하는 작업 예를들어 Load Balancer의 백엔트 풀에서 제거, 백업 포인트, 커넥션 정리, Failover 실행 등의 작업을 미리 실행해 놓고 리부팅을 할 수 있습니다. 좀 더 고급스러운 접근 같습니다. 저도 적용해 보지는 않았지만 가용성 집합 내의 VM 하나가 폴링을 해서 이벤트를 캐치해야 하고 그 후 정리할 걸 정리하는 등 코드를 좀 짜줘야 할 것 같습니다. 자세한 내용은 문서와 <a href="https://channel9.msdn.com/Shows/Azure-Friday/Using-Azure-Scheduled-Events-to-Prepare-for-VM-Maintenance">동영상</a> (데모 포함)참조 바랍니다.
<h4>질문들</h4>
Step 3에서 리부팅 시간을 미리 몇 일 또는 몇 시간 전에 알 수 있나요? 아니요 Scheduled Event를 이용해서 15분전에 알 수 있습니다.

VM 말고 Azure Web App 같은 PaaS 서비스도 이번에 적용되나요? 아니요. PaaS 서비스는 별도 스케줄로 업데이트가 되고 대걔 임팩트가 없는 방향으로 진행됩니다. PaaS의 장점이라고 할 수 있습니다.

&nbsp;

아 왜 업데이트가 있어서 귀찮게 ... 생각할 수 도 있지만 보안이나 가용성이 더 좋아질다고 하니 기꺼이 또는 강제로 업데이트를 해야하겠습니다. 더 상세한 내용을 알고 싶으시면 아래 링크 확인 바랍니다.
<ul>
 	<li><a href="https://azure.microsoft.com/en-us/resources/videos/azure-friday-virtual-machine-planned-maintenance-rafalovich/">Azure Friday 동영상</a></li>
 	<li><a href="https://azure.microsoft.com/en-us/blog/a-new-planned-maintenance-experience-for-your-virtual-machines/?cdn=disable">공식 블로그 포스트(영문)</a></li>
 	<li><a href="https://myignite.microsoft.com/videos/57085">이그나이트 동영상 (영문)</a></li>
 	<li><a href="https://docs.microsoft.com/ko-kr/azure/virtual-machines/windows/maintenance-and-updates">문서</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5593</wp:post_id>
		<wp:post_date><![CDATA[2017-12-15 18:22:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-12-15 09:22:37]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[azure-planned-maintenance]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="azure"><![CDATA[Azure]]></category>
		<category domain="post_tag" nicename="azure"><![CDATA[azure]]></category>
		<category domain="post_tag" nicename="planned-maintenance"><![CDATA[planned maintenance]]></category>
		<category domain="post_tag" nicename="reboot"><![CDATA[reboot]]></category>
		<category domain="post_tag" nicename="vm"><![CDATA[VM]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[5579]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Azure CLI로 Azure 리소스를 태그로 검색해서 NSG 룰 추가</title>
		<link>http://ilseokoh.com/2017/12/19/azure-cli-find-nsg-add-rule/</link>
		<pubDate>Tue, 19 Dec 2017 04:24:26 +0000</pubDate>
		<dc:creator><![CDATA[ilseokoh]]></dc:creator>
		<guid isPermaLink="false">http://ilseokoh.com/?p=5607</guid>
		<description></description>
		<content:encoded><![CDATA[Azure 에서 사용하는 모든 리소스에 태그를 걸어 둘 수 있다. Key=value 쌍의 태그를 걸어놓고 사용할 수 있는데 Azure Portal에서는 태그 메뉴에서 추가할 수 있다.

<a href="/wp-content/uploads/2017/12/azure-portal-tag.jpg"><img class="size-full wp-image-5608 aligncenter" src="/wp-content/uploads/2017/12/azure-portal-tag.jpg" alt="" width="1198" height="701" /></a>

이 태그를 잘 정의해 놓으면 스크립트에서 태그로 검색해서 관련된 리소스만 가져와서 특정 작업을 할 수 있다. 여기에 소개된스크립트에서는 ServerType=GameServer 태그가 들어 있는 Network Security Group을 찾아서 방화벽 룰을 추가한다. Azure CLI 로 작성되었다.
<pre class="prettyprint">#!/bin/bash

# tag query 
tagQuery=ServerType=GameServer

# new rule
ruleName=http
description=http-inbound
access=Allow
protocol=Tcp
direction=Inbound
priority=102
sourceAddressPrefix=*
sourcePortRange=*
destinationAddressPrefix=*
destinationPortRange=443

az resource list --tag $tagQuery --query "[].{Name: name,Group: resourceGroup}" -o tsv | 
while read -r name resourceGroup; do
    printf "Add new rule"
    az network nsg rule create -g $resourceGroup --nsg-name $name \
    --name $ruleName \
    --description $description \
    --access $access \
    --protocol $protocol  \
    --direction $direction \
    --priority $priority \
    --source-address-prefix "$sourceAddressPrefix" \
    --source-port-range "$sourcePortRange" \
    --destination-port-range "$destinationPortRange" \
    --destination-address-prefix "$destinationAddressPrefix"
    

    printf "NSG: $name, ResourceGroup: $resourceGroup"
    az network nsg show -g $resourceGroup -n $name --query 'securityRules[].{Name:name,Desc:description,Access:access,Direction:direction,DestPortRange:destinationPortRange,DestAddrPrefix:destinationAddressPrefix,SrcPortRange:sourcePortRange,SrcAddrPrefix:sourceAddressPrefix}' -o table
done</pre>
실행결과
<pre class="prettyprint">$ ./add-nsg-rule.sh
{
  "access": "Allow",
  "description": "http-inbound",
  "destinationAddressPrefix": "*",
  "destinationAddressPrefixes": [],
  "destinationApplicationSecurityGroups": null,
  "destinationPortRange": "443",
  "destinationPortRanges": [],
  "direction": "Inbound",
  "etag": "W/\"123427a1-855a-441b-8a79-4950326c043c\"",
  "id": "/subscriptions/12345bbb-cd59-41dc-86b7-2e239d536c04/resourceGroups/KaliGroup/providers/Microsoft.Network/networkSecurityGroups/KaliVM-nsg/securityRules/http",
  "name": "http",
  "priority": 102,
  "protocol": "Tcp",
  "provisioningState": "Succeeded",
  "resourceGroup": "KaliGroup",
  "sourceAddressPrefix": "*",
  "sourceAddressPrefixes": [],
  "sourceApplicationSecurityGroups": null,
  "sourcePortRange": "*",
  "sourcePortRanges": []
}
NSG: KaliVM-nsg, ResourceGroup: Kali
GroupName               Access    Direction      DestPortRange  DestAddrPrefix    SrcPortRange    SrcAddrPrefix    Desc
-----------------  --------  -----------  ---------------  ----------------  --------------  ---------------  ------------
default-allow-ssh  Allow     Inbound                   22  *                 *               *
Port_3389          Allow     Inbound                 3389  *                 *               *
http               Allow     Inbound                  443  *                 *               *                http-inbound
</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5607</wp:post_id>
		<wp:post_date><![CDATA[2017-12-19 13:24:26]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-12-19 04:24:26]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[azure-cli-find-nsg-add-rule]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="acl"><![CDATA[acl]]></category>
		<category domain="post_tag" nicename="add"><![CDATA[add]]></category>
		<category domain="category" nicename="azure"><![CDATA[Azure]]></category>
		<category domain="post_tag" nicename="azure"><![CDATA[azure]]></category>
		<category domain="post_tag" nicename="cli"><![CDATA[cli]]></category>
		<category domain="post_tag" nicename="network-security-group"><![CDATA[network security group]]></category>
		<category domain="post_tag" nicename="nsg"><![CDATA[nsg]]></category>
		<category domain="post_tag" nicename="rule"><![CDATA[rule]]></category>
		<category domain="post_tag" nicename="tag"><![CDATA[tag]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[5609]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Azure Linux VM 계정 추가</title>
		<link>http://ilseokoh.com/2017/12/21/azure-linux-vm-add-user/</link>
		<pubDate>Thu, 21 Dec 2017 08:43:49 +0000</pubDate>
		<dc:creator><![CDATA[ilseokoh]]></dc:creator>
		<guid isPermaLink="false">http://ilseokoh.com/?p=5614</guid>
		<description></description>
		<content:encoded><![CDATA[<h4>Azure Linux VM 계정 추가</h4>
Azure Linux VM 생성할 때 계정하나를 만들면서 VM을 생성합니다. 이 계정으로 SSH 접속할 수 있고 sudo 로 루트가 필요한 명령을 수행할 수 있습니다.  마치 사용자를 추가할 수 없을 것 같은 생각이 들 수도 있지만 여기에 여러 사람이 동시 작업을 해야할 필요가 있을 때 계정를 추가할 수 있습니다. 특별한건 아니고 리눅스의 adduser 명령입니다.
<pre class="prettyprint"># 계정생성.
$ sudo adduser ilseokoh

# sudo 사용 가능하도록 sudo 그룹에 추가
$ sudo adduser ilseokoh sudo

# 비밀번호 생성 
$ sudo passwd ilseokoh</pre>
<h4>root 계정은 어디있나?</h4>
Azure 에서 생성되는 Linux VM에는 root 계정이 비활성화 되어 있습니다. sudo 를 사용하면 되는데 추천하지 않지만 굳이 root를 살려야 하면 이렇게 하면 됩니다. 그러면 su 가 됩니다.
<pre class="prettyprint">$ sudo passwd -u root
$ sudo passwd root 
$ su
</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5614</wp:post_id>
		<wp:post_date><![CDATA[2017-12-21 17:43:49]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-12-21 08:43:49]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[azure-linux-vm-add-user]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="adduser"><![CDATA[adduser]]></category>
		<category domain="category" nicename="azure"><![CDATA[Azure]]></category>
		<category domain="post_tag" nicename="azure"><![CDATA[azure]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[linux]]></category>
		<category domain="post_tag" nicename="linux-vm"><![CDATA[linux vm]]></category>
		<category domain="post_tag" nicename="passwd"><![CDATA[passwd]]></category>
		<category domain="post_tag" nicename="su"><![CDATA[su]]></category>
		<category domain="post_tag" nicename="sudo"><![CDATA[sudo]]></category>
		<category domain="post_tag" nicename="useradd"><![CDATA[useradd]]></category>
		<category domain="post_tag" nicename="virtual-machine"><![CDATA[virtual machine]]></category>
		<category domain="post_tag" nicename="vm"><![CDATA[VM]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
</channel>
</rss>
